(function() {
  var EventManagerCls, ext, j3, root, toString, _regFormat, _stringBuilder_proto,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = this;

  j3 = function() {
    return j3.$.apply(this, arguments);
  };

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined') {
      module.exports = j3;
    } else {
      exports.j3 = j3;
    }
  } else {
    root.j3 = j3;
  }

  j3.version = '0.4.4';

  j3.fnRetFalse = function() {
    return false;
  };

  j3.isRunInServer = function() {
    return j3.UA.name === 'server';
  };

  j3.has = function(obj, prop) {
    return obj.hasOwnProperty(prop);
  };

  j3.isUndefined = function(obj) {
    return typeof obj === 'undefined';
  };

  j3.isBoolean = function(obj) {
    return typeof obj === 'boolean';
  };

  j3.isNumber = function(obj) {
    return typeof obj === 'number';
  };

  j3.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  j3.isString = function(obj) {
    return typeof obj === 'string';
  };

  j3.isObject = function(obj) {
    return typeof obj === 'object';
  };

  j3.isNull = function(obj) {
    return obj === null;
  };

  j3.isNullOrUndefined = function(obj) {
    return j3.isNull(obj) || j3.isUndefined(obj);
  };

  toString = Object.prototype.toString;

  j3.isDate = function(obj) {
    return '[object Date]' === toString.call(obj);
  };

  j3.isArray = function(obj) {
    return '[object Array]' === toString.call(obj);
  };

  j3.isDateTime = function(obj) {
    return obj instanceof j3.DateTime;
  };

  j3.bind = function(fn, context, args) {
    if (args) {
      return function() {
        return fn.apply(context, args);
      };
    } else {
      return function() {
        return fn.call(context);
      };
    }
  };

  j3.clone = function(obj, properties, ignoreUndefined) {
    var item, prop, res, _i, _j, _len, _len1;
    if (!j3.isObject(obj)) {
      return obj;
    }
    if (obj === null) {
      return null;
    }
    if (j3.isDate(obj)) {
      return new Date(obj.getTime());
    }
    if (j3.isArray(obj)) {
      res = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        item = obj[_i];
        res.push(j3.clone(item));
      }
      return res;
    }
    if (j3.isFunction(obj.clone)) {
      return obj.clone(properties);
    }
    res = {};
    if (!properties) {
      for (prop in obj) {
        res[prop] = j3.clone(obj[prop]);
      }
    } else {
      for (_j = 0, _len1 = properties.length; _j < _len1; _j++) {
        prop = properties[_j];
        if (obj.hasOwnProperty(prop)) {
          if (ignoreUndefined) {
            if (!j3.isUndefined(obj[prop])) {
              res[prop] = j3.clone(obj[prop]);
            }
          } else {
            res[prop] = j3.clone(obj[prop]);
          }
        }
      }
    }
    return res;
  };

  j3.equals = function(obj1, obj2) {
    var i, key;
    if (typeof obj1 !== typeof obj2) {
      return false;
    }
    if (j3.isNull(obj1)) {
      return j3.isNull(obj2);
    }
    if (!j3.isObject(obj1)) {
      return obj1 === obj2;
    }
    if (j3.isDate(obj1)) {
      return obj1.getTime() === obj2.getTime();
    }
    if (j3.isArray(obj1)) {
      if (!obj2) {
        return false;
      }
      if (obj1.length !== obj2.length) {
        return false;
      }
      i = -1;
      while (++i < obj1.length) {
        if (!j3.equals(obj1[i], obj2[i])) {
          return false;
        }
      }
      return true;
    }
    if (j3.isFunction(obj1.equals)) {
      return obj1.equals(obj2);
    }
    if (j3.isObject(obj1) && j3.isObject(obj2)) {
      for (key in obj1) {
        if (!j3.equals(obj1[key], obj2[key])) {
          return false;
        }
      }
      return true;
    }
    return false;
  };

  j3.compare = function(obj1, obj2, nullGreat) {
    if (j3.isNullOrUndefined(obj1)) {
      if (j3.isNullOrUndefined(obj2)) {
        return 0;
      }
      if (nullGreat) {
        return 1;
      } else {
        return -1;
      }
    } else if (j3.isNullOrUndefined(obj2)) {
      if (nullGreat) {
        return -1;
      } else {
        return 1;
      }
    }
    if (j3.isDateTime(obj1) || j3.isDate(obj1)) {
      obj1 = obj1.getTime();
    }
    if (j3.isDateTime(obj2) || j3.isDate(obj2)) {
      obj2 = obj2.getTime();
    }
    if (j3.isObject(obj1)) {
      if (j3.isFunction(obj1.compare)) {
        return obj1.compare(obj2);
      } else if (!j3.isObject(obj2)) {
        return 1;
      }
    }
    if (j3.isObject(obj2)) {
      if (j3.isFunction(obj2.compare)) {
        return obj2.compare(obj1);
      } else if (!j3.isObject(obj1)) {
        return -1;
      }
    }
    if (obj1 === obj2) {
      return 0;
    } else if (obj1 > obj2) {
      return 1;
    } else {
      return -1;
    }
  };

  j3.$ = function(id) {
    if (typeof id === 'string') {
      return document.getElementById(id);
    }
    return id;
  };

  j3.guid = function() {
    var i, n, s, _i;
    s = "";
    for (i = _i = 1; _i < 33; i = ++_i) {
      n = Math.floor(Math.random() * 16.0).toString(16);
      s += n;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        s += "-";
      }
    }
    return s;
  };

  j3.ns = function(nameSpace) {
    var curNS, name, names, _i, _len;
    names = nameSpace.split(".");
    curNS = typeof window === 'undefined' ? global : window;
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      if (!curNS[name]) {
        curNS[name] = {};
      }
      curNS = curNS[name];
    }
    return curNS;
  };

  ext = j3.ext = function() {
    var extend, exts, original, prop, _i, _len;
    original = arguments[0], exts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = exts.length; _i < _len; _i++) {
      extend = exts[_i];
      for (prop in extend) {
        original[prop] = extend[prop];
      }
    }
    return original;
  };

  j3.cls = function(base, members) {
    var ctor, ctorOfCls, proto;
    if (arguments.length === 1) {
      members = base;
      base = null;
    }
    ctorOfCls = members.ctor;
    if (base) {
      if (ctorOfCls) {
        members.ctor = function() {
          base.apply(this, arguments);
          return ctorOfCls.apply(this, arguments);
        };
      } else {
        members.ctor = function() {
          return base.apply(this, arguments);
        };
      }
    } else if (!ctorOfCls) {
      members.ctor = function() {};
    }
    ctor = members.ctor;
    proto = ctor.prototype;
    if (base) {
      this.ext(proto, base.prototype);
    }
    this.ext(proto, members);
    if (this.has(members, 'toString')) {
      proto.toString = members.toString;
    }
    ctor.base = function() {
      return base.prototype;
    };
    return ctor;
  };

  j3.UA = (function() {
    var nStart, o, ua, version;
    o = {
      ie: 0,
      trident: 0,
      gecko: 0,
      webkit: 0,
      opera: 0,
      name: '',
      N_IE: 'MSIE',
      N_TRIDENT: 'Trident',
      N_FIREFOX: 'Firefox',
      N_OPERA: 'Opera',
      N_CHROME: 'Chrome',
      N_SAFARI: 'Safari',
      N_ANDROID: 'Android',
      P_IPOD: 'iPod',
      P_IPAD: 'iPad',
      P_IPHONE: 'iPhone',
      P_ANDROID: 'Android'
    };
    if (!this.navigator) {
      o.name = 'server';
      return o;
    }
    ua = this.navigator.userAgent;
    if (ua.indexOf(o.N_IE) > -1) {
      o.ie = true;
      o.name = o.N_IE;
    } else if (ua.indexOf(o.N_TRIDENT) > -1) {
      o.ie = true;
      o.trident = true;
      o.name = o.N_IE;
    } else if (ua.indexOf(o.N_FIREFOX) > -1) {
      o.gecko = true;
      o.name = o.N_FIREFOX;
    } else if (ua.indexOf(o.N_OPERA) > -1) {
      o.opera = true;
      o.name = o.N_OPERA;
    } else if (ua.indexOf('AppleWebKit') > -1) {
      o.webkit = true;
      if (ua.indexOf(o.N_ANDROID) > -1) {
        o.name = o.N_ANDROID;
      } else if (ua.indexOf(o.N_CHROME) > -1) {
        o.name = o.N_CHROME;
      } else if (ua.indexOf(o.N_SAFARI) > -1) {
        o.name = o.N_SAFARI;
      }
    }
    if (ua.indexOf(o.P_IPOD) > -1) {
      o.platform = o.P_IPOD;
    } else if (ua.indexOf(o.P_IPAD) > -1) {
      o.platform = o.P_IPAD;
    } else if (ua.indexOf(o.P_IPHONE) > -1) {
      o.platform = o.P_IPHONE;
    } else if (ua.indexOf(o.P_ANDROID) > -1) {
      o.platform = o.P_ANDROID;
    }
    if (o.name === o.N_OPERA || o.name === o.N_SAFARI) {
      nStart = ua.indexOf('Version') + 8;
    }
    if (o.trident) {
      nStart = ua.indexOf('rv:') + 3;
    } else {
      nStart = ua.indexOf(o.name) + o.name.length + 1;
    }
    version = parseFloat(ua.substring(nStart, nStart + 4).match(/\d+\.\d{1}/i)[0]);
    if (o.ie) {
      o.ie = version;
    } else if (o.gecko) {
      o.gecko = version;
    } else if (o.opera) {
      o.opera = version;
    } else if (o.webkit) {
      o.webkit = version;
    }
    o.supportTouch = document.documentElement && document.documentElement.hasOwnProperty && document.documentElement.hasOwnProperty('ontouchstart');
    return o;
  })();

  if (j3.UA.ie >= 8 || j3.UA.opera || j3.UA.webkit) {
    j3.StringBuilder = j3.cls({
      ctor: function() {
        this._data = '';
      },
      append: function(text) {
        this._data += text;
        return this;
      },
      encodeAndAppend: function(text) {
        this._data += j3.htmlEncode(text);
        return this;
      },
      clear: function() {
        this._data = '';
        return this;
      },
      toString: function() {
        return this._data;
      }
    });
  } else {
    j3.StringBuilder = j3.cls({
      ctor: function() {
        this._data = [];
      },
      append: function(text) {
        this._data[this._data.length] = text;
        return this;
      },
      encodeAndAppend: function(text) {
        this._data[this._data.length] = j3.htmlEncode(text);
        return this;
      },
      clear: function() {
        this._data = [];
        return this;
      },
      toString: function() {
        return this._data.join('');
      }
    });
  }

  _stringBuilder_proto = j3.StringBuilder.prototype;

  _stringBuilder_proto.a = _stringBuilder_proto.append;

  _stringBuilder_proto.e = _stringBuilder_proto.encodeAndAppend;

  j3.UrlQuery = j3.cls({
    ctor: function() {
      this._query = {};
      this.parse();
    },
    get: function(name, defaultValue) {
      if (!this._query) {
        return defaultValue;
      }
      if (this._query.hasOwnProperty(name)) {
        return this._query[name];
      }
      return defaultValue;
    },
    set: function(name, value) {
      var _ref;
      if ((_ref = this._query) == null) {
        this._query = {};
      }
      return this._query[name] = value;
    },
    unset: function(name) {
      if (!this._query) {
        return;
      }
      return delete this._query[name];
    },
    toString: function() {
      var first, name, sb, value, _ref;
      sb = new j3.StringBuilder;
      first = true;
      _ref = this._query;
      for (name in _ref) {
        value = _ref[name];
        if (first) {
          first = false;
        } else {
          sb.a('&');
        }
        sb.a(name + '=' + encodeURIComponent(value));
      }
      return sb.toString();
    },
    parse: function() {
      var eachKvStr, hash, idxSharp, key, kv, kvStrings, url, _i, _len, _results;
      url = location.href;
      idxSharp = url.indexOf('#');
      if (idxSharp < 0) {
        return;
      }
      hash = url.substr(idxSharp + 1);
      kvStrings = hash.split('&');
      _results = [];
      for (_i = 0, _len = kvStrings.length; _i < _len; _i++) {
        eachKvStr = kvStrings[_i];
        kv = eachKvStr.split('=');
        key = kv[0];
        if (key) {
          _results.push(this.set(key, kv[1]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  });

  (function(j3) {
    var DateTime, TimeSpan, _DAY, _FORMAT_LOACL, _FORMAT_UTC, _HOUR, _MINUTE, _SECOND, _monthNames, _regParse1, _regParse2, _regParseUTC;
    _SECOND = 1000;
    _MINUTE = 60000;
    _HOUR = 3600000;
    _DAY = 86400000;
    _monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    _regParse1 = /^(\d{4})-(\d{1,2})-(\d{1,2})(?: (\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?$/;
    _regParse2 = /^(\d{1,2})\/(\d{1,2})\/(\d{4})(?: (\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?$/;
    _regParseUTC = /^(\d{4})-(\d{1,2})-(\d{1,2})(?:T(\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?Z$/;
    _FORMAT_LOACL = 'yyyy-MM-dd HH:mm:ss';
    _FORMAT_UTC = 'yyyy-MM-ddTHH:mm:ssZ';
    DateTime = j3.cls({
      ctor: function(year, month, date, hours, minutes, seconds, ms) {
        var argLen;
        argLen = arguments.length;
        if (argLen === 0) {
          this._value = new Date;
        } else if (argLen === 1) {
          this._value = new Date(year);
        } else {
          month = month || 0;
          date = date || 0;
          hours = hours || 0;
          minutes = minutes || 0;
          seconds = seconds || 0;
          ms = ms || 0;
          this._value = new Date(year, month - 1, date, hours, minutes, seconds, ms);
        }
      },
      getYear: function() {
        return this._value.getFullYear();
      },
      getMonth: function() {
        return this._value.getMonth() + 1;
      },
      getDay: function() {
        return this._value.getDate();
      },
      getDayOfWeek: function() {
        return this._value.getDay();
      },
      justDate: function() {
        return new DateTime(this.getYear(), this.getMonth(), this.getDay());
      },
      justTime: function() {
        return new DateTime(this._value.getTime() % _DAY);
      },
      addYear: function(years) {
        return new DateTime(this._value.getFullYear + years, this._value.getMonth() + 1, this._value.getDate(), this._value.getHours(), this._value.getMinutes(), this._value.getSeconds(), this._value.getMilliseconds());
      },
      addMonth: function(months) {
        var month, year;
        month = this._value.getFullYear() * 12 + this._value.getMonth() + 1 + months;
        year = parseInt(month / 12);
        month %= 12;
        return new DateTime(year, month, this._value.getDate(), this._value.getHours(), this._value.getMinutes(), this._value.getSeconds(), this._value.getMilliseconds());
      },
      addDay: function(days) {
        return new DateTime(this._value.getTime() + _DAY * days);
      },
      addHour: function(hours) {
        return new DateTime(this._value.getTime() + _HOUR * hours);
      },
      addMinute: function(minutes) {
        return new DateTime(this._value.getTime() + _MINUTE * minutes);
      },
      addSecond: function(seconds) {
        return new DateTime(this._value.getTime() + _SECOND * seconds);
      },
      addMillisecond: function(milliseconds) {
        return new DateTime(this._value.getTime() + milliseconds);
      },
      toString: function(format) {
        if (format == null) {
          format = _FORMAT_LOACL;
        }
        return DateTime.format(this._value, format);
      },
      toUTCString: function() {
        return DateTime.format(this._value, _FORMAT_UTC, true);
      },
      toJson: function(sb) {
        if (j3.isUndefined(sb)) {
          sb = new j3.StringBuilder;
        }
        sb.a('"');
        sb.a(this.toUTCString());
        return sb.a('"');
      },
      getValue: function() {
        return new Date(this._value.getTime());
      },
      getTime: function() {
        return this._value.getTime();
      },
      equals: function(dateTime) {
        if (!dateTime) {
          return false;
        }
        return this._value.getTime() === dateTime._value.getTime();
      },
      lt: function(dateTime) {
        return j3.DateTime.lt(this, dateTime);
      },
      lte: function(dateTime) {
        return j3.DateTime.lte(this, dateTime);
      },
      gt: function(dateTime) {
        return j3.DateTime.gt(this, dateTime);
      },
      gte: function(dateTime) {
        return j3.DateTime.gte(this, dateTime);
      },
      clone: function() {
        return new DateTime(this._value.getTime());
      }
    });
    j3.ext(DateTime, {
      UTC: function(year, month, date, hours, minutes, seconds, ms) {
        var argLen, time;
        argLen = arguments.length;
        if (argLen === 0) {
          time = (new Date).getTime();
        } else if (argLen === 1) {
          time = year;
        } else {
          month = month || 0;
          date = date || 0;
          hours = hours || 0;
          minutes = minutes || 0;
          seconds = seconds || 0;
          ms = ms || 0;
          time = Date.UTC(year, month - 1, date, hours, minutes, seconds, ms);
        }
        return new DateTime(time);
      },
      format: function(value, format, isUTC) {
        var str, strDay, strHour, strMinute, strMonth, strSecond, strYear;
        if (value instanceof DateTime) {
          value = value.getValue();
        }
        if (typeof value === 'number') {
          value = new Date(value);
        } else if (!value instanceof Date) {
          return '';
        }
        if (format == null) {
          format = _FORMAT_LOACL;
        }
        if (isUTC) {
          strYear = value.getUTCFullYear().toString();
          strMonth = (value.getUTCMonth() + 1).toString();
          strDay = value.getUTCDate().toString();
          strHour = value.getUTCHours().toString();
          strMinute = value.getUTCMinutes().toString();
          strSecond = value.getUTCSeconds().toString();
        } else {
          strYear = value.getFullYear().toString();
          strMonth = (value.getMonth() + 1).toString();
          strDay = value.getDate().toString();
          strHour = value.getHours().toString();
          strMinute = value.getMinutes().toString();
          strSecond = value.getSeconds().toString();
        }
        str = format.replace('yyyy', strYear);
        str = str.replace('MMM', _monthNames[value.getMonth()]);
        str = str.replace('MM', strMonth.length === 1 ? '0' + strMonth : strMonth);
        str = str.replace('dd', strDay.length === 1 ? '0' + strDay : strDay);
        str = str.replace('HH', strHour.length === 1 ? '0' + strHour : strHour);
        str = str.replace('mm', strMinute.length === 1 ? '0' + strMinute : strMinute);
        str = str.replace('ss', strSecond.length === 1 ? '0' + strSecond : strSecond);
        str = str.replace('yy', strYear.substr(2));
        str = str.replace('M', strMonth);
        str = str.replace('d', strDay);
        str = str.replace('H', strHour);
        str = str.replace('m', strMinute);
        return str.replace('s', strSecond);
      },
      formatUTC: function(value, format) {
        if (format == null) {
          format = _FORMAT_UTC;
        }
        return this.format(value, format, true);
      },
      parse: function(str) {
        var res;
        if (str instanceof DateTime) {
          return str;
        }
        res = _regParseUTC.exec(str);
        if (res) {
          return DateTime.UTC(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        res = _regParse1.exec(str);
        if (res) {
          return new DateTime(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        res = _regParse2.exec(str);
        if (res) {
          return new DateTime(parseInt(res[3], 10), parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        return null;
      },
      convertFromJson: function() {
        var attr, attrs, obj, _i, _len;
        obj = arguments[0], attrs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = attrs.length; _i < _len; _i++) {
          attr = attrs[_i];
          obj[attr] = j3.DateTime.parse(obj[attr]);
        }
      },
      now: function() {
        return new DateTime;
      },
      today: function() {
        return (new DateTime).justDate();
      },
      fromMongoObjectId: function(id) {
        return new DateTime(1000 * parseInt(id.slice(0, 8), 16));
      },
      equals: function(dateTime1, dateTime2) {
        if (dateTime1) {
          return dateTime1.equals(dateTime2);
        }
        return !dateTime2;
      },
      lt: function(dateTime1, dateTime2) {
        var t1, t2;
        t1 = dateTime1 ? dateTime1.getTime() : 0;
        t2 = dateTime2 ? dateTime2.getTime() : 0;
        return t1 < t2;
      },
      lte: function(dateTime1, dateTime2) {
        return this.lt(dateTime1, dateTime2) || this.equals(dateTime1, dateTime2);
      },
      gt: function(dateTime1, dateTime2) {
        var t1, t2;
        t1 = dateTime1 ? dateTime1.getTime() : 0;
        t2 = dateTime2 ? dateTime2.getTime() : 0;
        return t1 > t2;
      },
      gte: function(dateTime1, dateTime2) {
        return this.gt(dateTime1, dateTime2) || this.equals(dateTime1, dateTime2);
      }
    });
    j3.DateTime = DateTime;
    TimeSpan = function(dateTime1, dateTime2) {
      var span;
      if (arguments.length === 1) {
        span = dateTime1;
      } else {
        span = dateTime1.getTime() - dateTime2.getTime();
      }
      if (span < 0) {
        span = span * -1;
      }
      this._span = span || 0;
    };
    j3.ext(TimeSpan.prototype, {
      totalSeconds: function() {
        return Math.floor(this._span / _SECOND);
      },
      totalMinutes: function() {
        return Math.floor(this._span / _MINUTE);
      },
      totalHours: function() {
        return Math.floor(this._span / _HOUR);
      },
      totalDays: function() {
        return Math.floor(this._span / _DAY);
      }
    });
    j3.ext(TimeSpan, {
      format: function(span) {
        var days, formatStr, hours, minutes, seconds;
        if (span < _MINUTE) {
          seconds = Math.floor(span / _SECOND);
          return j3.format(j3.Lang.seconds, seconds);
        } else if (span < _HOUR) {
          minutes = Math.floor(span / _MINUTE);
          if (minutes === 1) {
            formatStr = j3.Lang.minute;
          } else {
            formatStr = j3.Lang.minutes;
          }
          return j3.format(formatStr, minutes);
        } else if (span < _DAY) {
          hours = Math.floor(span / _HOUR);
          minutes = Math.floor((span - (hours * _HOUR)) / _MINUTE);
          if (minutes === 0) {
            if (hours === 1) {
              formatStr = j3.Lang.hour;
            } else {
              formatStr = j3.Lang.hours;
            }
          } else {
            formatStr = j3.Lang.hourMinute;
          }
          return j3.format(formatStr, hours, minutes);
        } else {
          days = Math.floor(span / _DAY);
          hours = Math.floor((span - (days * _DAY)) / _HOUR);
          if (hours === 0) {
            if (days === 1) {
              formatStr = j3.Lang.day;
            } else {
              formatStr = j3.Lang.days;
            }
          } else {
            formatStr = j3.Lang.dayHour;
          }
          return j3.format(formatStr, days, hours);
        }
      }
    });
    return j3.TimeSpan = TimeSpan;
  })(j3);

  _regFormat = /{(\d+)?}/g;

  j3.ext(j3, {
    format: function(text) {
      var args;
      args = arguments;
      if (args.length === 0) {
        return '';
      }
      if (args.length === 1) {
        return text;
      }
      return text.replace(_regFormat, function($0, $1) {
        return args[parseInt($1) + 1];
      });
    },
    include: function(s, s1, s2) {
      if (s2 && s2.length) {
        return (s2 + s + s2).indexOf(s2 + s1 + s2) > -1;
      } else {
        return s.indexOf(s1) > -1;
      }
    },
    isNullOrEmpty: function(s) {
      return typeof s === 'undefined' || s === null || s === '';
    },
    isNullOrWhiteSpace: function(s) {
      return j3.isNullOrEmpty(s) || s.trim() === '';
    },
    hyphenlize: function(s) {
      var c, converted, i, len;
      converted = '';
      i = -1;
      len = s.length;
      while (++i < len) {
        c = s.charAt(i);
        if (c === c.toUpperCase()) {
          converted += '-' + c.toLowerCase();
        } else {
          converted += c;
        }
      }
      return converted;
    },
    htmlEncode: function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
    },
    substrEx: function(s, bytes) {
      var c, i, uFF61, uFF9F, uFFE8, uFFEE;
      if (j3.isNullOrEmpty(s)) {
        return '';
      }
      i = 0;
      uFF61 = 65377;
      uFF9F = 65439;
      uFFE8 = 65512;
      uFFEE = 65518;
      while (i < s.length && bytes > 0) {
        c = s.charCodeAt(i);
        if (c < 256 || ((uFF61 <= c) && (c <= uFF9F)) || ((uFFE8 <= c) && (c <= uFFEE))) {
          bytes -= 1;
        } else {
          bytes -= 2;
        }
        i++;
      }
      if (s.length > i) {
        return s.substr(0, i) + "...";
      }
      return s.substr(0, i);
    },
    startsWith: function(s, token) {
      if (!s || !token) {
        return false;
      }
      if (s.indexOf(token) === 0) {
        return true;
      }
      return false;
    },
    endsWith: function(s, token) {
      var pos;
      if (!s || !token) {
        return false;
      }
      pos = s.length - token.length;
      if (pos < 0) {
        return false;
      }
      if (s.substr(pos) === token) {
        return true;
      }
      return false;
    },
    padLeft: function(s, totalWidth, paddingChar) {
      var delta, i, padding, _i;
      if (!s) {
        s = '';
      }
      delta = totalWidth - s.length;
      if (delta < 0) {
        return s;
      }
      if (!paddingChar) {
        paddingChar = '0';
      }
      if (paddingChar.length > 1) {
        paddingChar = paddingChar.substr(0, 1);
      }
      padding = '';
      for (i = _i = 0; 0 <= delta ? _i < delta : _i > delta; i = 0 <= delta ? ++_i : --_i) {
        padding += paddingChar;
      }
      return padding + s;
    },
    padRight: function(s, totalWidth, paddingChar) {
      var delta, i, padding, _i;
      if (!s) {
        s = '';
      }
      delta = totalWidth - s.length;
      if (delta < 0) {
        return s;
      }
      if (!paddingChar) {
        paddingChar = '0';
      }
      if (paddingChar.length > 1) {
        paddingChar = paddingChar.substr(0, 1);
      }
      padding = '';
      for (i = _i = 0; 0 <= delta ? _i < delta : _i > delta; i = 0 <= delta ? ++_i : --_i) {
        padding += paddingChar;
      }
      return s + padding;
    }
  });

  if (String.prototype.trim) {
    j3.trim = function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.trim();
    };
  } else {
    j3.trim = function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.replace(_regTime, '');
    };
    String.prototype.trim = function() {
      var i, s, ws;
      s = this;
      s = s.replace(/^\s\s*/, '');
      ws = /\s/;
      i = s.length - 1;
      while (ws.test(s.charAt(i))) {
        i--;
      }
      return s.slice(0, i + 1);
    };
  }

  j3.template = (function(j3) {
    var escaper, escapes, noMatch, p, template, templateSettings, unescape, unescaper;
    templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    noMatch = /.^/;
    escapes = {
      '\\': '\\',
      "'": "'",
      'r': '\r',
      'n': '\n',
      't': '\t',
      'u2028': '\u2028',
      'u2029': '\u2029'
    };
    for (p in escapes) {
      escapes[escapes[p]] = p;
    }
    escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;
    unescape = function(code) {
      return code.replace(unescaper, function(match, escape) {
        return escapes[escape];
      });
    };
    template = function(text, data, settings) {
      var render, sb, source;
      settings = settings || {};
      j3.ext(settings, templateSettings);
      source = text.replace(escaper, function(match) {
        return '\\' + escapes[match];
      }).replace(settings.escape || noMatch, function(match, code) {
        return "',\nj3.htmlEncode(" + (unescape(code)) + "),\n'";
      }).replace(settings.interpolate || noMatch, function(match, code) {
        return "',\n" + (unescape(code)) + ",\n'";
      }).replace(settings.evaluate || noMatch, function(match, code) {
        return "');\n" + (unescape(code)) + "\n;__p.push('";
      });
      sb = new j3.StringBuilder;
      sb.append('var __p=[],print=function(){__p.push.apply(__p,arguments);};\n');
      if (!settings.variable) {
        sb.append('with(obj||{}){\n');
      }
      sb.append("__p.push('");
      sb.append(source);
      sb.append("');\n");
      if (!settings.variable) {
        sb.append('}\n');
      }
      sb.append('return __p.join("");\n');
      render = new Function(settings.variable || 'obj', 'j3', sb.toString());
      if (data) {
        return render(data, j3);
      }
      return function(data) {
        return render.call(this, data, j3);
      };
    };
    return template;
  })(j3);

  j3.List = j3.cls({
    ctor: function() {
      this._count = 0;
    },
    firstNode: function() {
      return this._first;
    },
    first: function() {
      return this._first && this._first.value;
    },
    lastNode: function() {
      return this._last;
    },
    last: function() {
      return this._last && this._last.value;
    },
    count: function() {
      return this._count;
    },
    insertNode: function(node, target) {
      if (node === target) {
        return this;
      }
      if (node.list) {
        if (target) {
          if (node.next) {
            node.next.prev = node.prev;
          } else {
            this._last = node.prev;
          }
          if (node.prev) {
            node.prev.next = node.next;
          } else {
            this._first = node.next;
          }
          node.prev = target.prev;
          node.next = target;
          if (target.prev) {
            target.prev.next = node;
            target.prev = node;
          } else {
            this._first = node;
          }
        } else {
          if (this._last === node) {
            return this;
          }
          node.next.prev = node.prev;
          if (node.prev) {
            node.prev.next = node.next;
          } else {
            this._first = node.next;
          }
          node.prev = this._last;
          node.next = null;
          this._last.next = node;
          this._last = node;
        }
        return this;
      }
      node.list = this;
      if (!this._first) {
        node.prev = node.next = null;
        this._first = this._last = node;
      } else if (!target) {
        node.next = null;
        node.prev = this._last;
        this._last.next = node;
        this._last = node;
      } else {
        node.next = target;
        node.prev = target.prev;
        target.prev = node;
        if (!node.prev) {
          this._first = node;
        } else {
          node.prev.next = node;
        }
      }
      this._count++;
      return this;
    },
    insert: function(value, target) {
      return this.insertNode({
        value: value
      }, target);
    },
    removeNode: function(node) {
      if (node) {
        if (node === this._first) {
          this._first = node.next;
        } else {
          node.prev.next = node.next;
        }
        if (node === this._last) {
          this._last = node.prev;
        } else {
          node.next.prev = node.prev;
        }
        this._count--;
        delete node.value;
        delete node.prev;
        delete node.next;
        delete node.list;
      }
      return this;
    },
    remove: function(value) {
      var node, removedValue;
      node = this.findNode(value);
      if (!node) {
        return null;
      }
      removedValue = node.value;
      this.removeNode(node);
      return removedValue;
    },
    clear: function() {
      var next, node;
      node = this._first;
      while (node) {
        next = node.next;
        delete node.value;
        delete node.prev;
        delete node.next;
        delete node.list;
        node = next;
      }
      this._first = this._last = null;
      return this._count = 0;
    },
    findNode: function(value, equals) {
      var node;
      node = this._first;
      if (equals) {
        while (node) {
          if (equals(value, node.value)) {
            return node;
          }
          node = node.next;
        }
      } else if (j3.isFunction(value)) {
        while (node) {
          if (value(node.value)) {
            return node;
          }
          node = node.next;
        }
      } else if (value && value.equals) {
        while (node) {
          if (value.equals(node.value)) {
            return node;
          }
          node = node.next;
        }
      } else {
        while (node) {
          if (value === node.value) {
            return node;
          }
          node = node.next;
        }
      }
      return null;
    },
    contains: function(value, equals) {
      return null !== this.findNode(value, equals);
    },
    getNodeAt: function(index) {
      var node;
      if (index < 0 || index > this._count) {
        return null;
      }
      node = this._first;
      while (index--) {
        node = node.next;
      }
      return node;
    },
    getAt: function(index) {
      var node;
      node = this.getNodeAt(index);
      if (node) {
        return node.value;
      } else {
        return null;
      }
    },
    toString: function() {
      var sb;
      sb = new j3.StringBuilder;
      this.toJson(sb);
      return sb.toString();
    },
    toJson: function(sb) {
      var node;
      sb.append('[');
      node = this._first;
      if (node) {
        j3.toJson(node.value, sb);
        node = node.next;
        while (node) {
          sb.append(',');
          j3.toJson(node.value, sb);
          node = node.next;
        }
      }
      sb.append(']');
    },
    forEach: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        callback.call(context, node.value, args, i);
        node = node.next;
        i++;
      }
    },
    tryUntil: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        if (callback.call(context, node.value, args, i)) {
          return node.value;
        }
        node = node.next;
        i++;
      }
    },
    doWhile: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        if (!callback.call(context, node.value, args, i)) {
          return node.value;
        }
        node = node.next;
        i++;
      }
    }
  });

  (function(j3) {
    var Queue, __enlarge;
    j3.Queue = Queue = j3.cls({
      ctor: function() {
        return this.clear();
      },
      clear: function() {
        this._size = 0;
        this._front = this._rear = -1;
        this._data = [];
        return this._data.length = 5;
      },
      enqueue: function(value) {
        if (this._size === this._data.length) {
          __enlarge.call(this);
        }
        this._rear = (this._rear + 1) % this._data.length;
        this._size += 1;
        this._data[this._rear] = value;
      },
      dequeue: function() {
        if (this._size === 0) {
          throw new Error("J3_Err_Queue_Empty");
        }
        this._data[this._front] = null;
        this._front = (this._front + 1) % this._data.length;
        this._size -= 1;
        return this._data[this._front];
      },
      peek: function() {
        if (this._size === 0) {
          throw new Error("J3_Err_Queue_Empty");
        }
        return this._data[(this._front + 1) % this._data.length];
      },
      getSize: function() {
        return this._size;
      }
    });
    __enlarge = function() {
      var data, i, len, max;
      data = this._data;
      max = data.length;
      if (max < 10240) {
        max *= 2;
      } else {
        max += 10240;
      }
      data.length = max;
      if (this._front < this._rear) {
        return;
      }
      if (this._rear + 1 < this._size - this._front - 1) {
        i = 0;
        len = this._rear + 1;
        while (i < len) {
          data[(this._size + i) % max] = data[i];
          data[i] = null;
          i++;
        }
        this._rear = (this._rear + this._size) % max;
      } else {
        i = this._size - 1;
        len = max - this._size;
        while (i > this._front) {
          data[i + len] = data[i];
          i--;
        }
        this._front += len;
      }
    };
    return Queue.fromArray = function(array) {
      var q;
      q = new Queue;
      q._data = array.concat();
      q._size = array.length;
      return q;
    };
  })(j3);

  (function(j3) {
    var _compiledGroupBy;
    j3.compileSelector = function(selector) {
      if (!selector) {
        return function(source) {
          return source;
        };
      }
      if (j3.isFunction(selector)) {
        return selector;
      }
      if (j3.isString(selector)) {
        return function(source) {
          return j3.getVal(source, selector);
        };
      }
      if (j3.isArray(selector)) {
        return function(source) {
          var name, result, val, _i, _len;
          result = {};
          for (_i = 0, _len = selector.length; _i < _len; _i++) {
            name = selector[_i];
            val = j3.getVal(source, name);
            if (!j3.isUndefined(val)) {
              result[name] = val;
            }
          }
          return result;
        };
      }
      if (j3.isObject(selector)) {
        return function(source) {
          var name, result, val, value;
          result = {};
          for (name in selector) {
            value = selector[name];
            if (j3.isString(value)) {
              val = j3.getVal(source, value);
            } else {
              val = value(source);
            }
            if (!j3.isUndefined(val)) {
              result[name] = val;
            }
          }
          return result;
        };
      }
    };
    j3.compileEquals = function(equals) {
      if (j3.isFunction(equals)) {
        return equals;
      }
      if (j3.isString(equals)) {
        return function(obj1, obj2) {
          if (obj1 === null) {
            if (obj2 === null) {
              return true;
            } else {
              return false;
            }
          } else {
            if (obj2 === null) {
              return false;
            } else {
              return j3.equals(j3.getVal(obj1, equals), j3.getVal(obj2, equals));
            }
          }
        };
      }
      if (j3.isArray(equals)) {
        return function(obj1, obj2) {
          var name, _i, _len;
          if (obj1 === null) {
            if (obj2 === null) {
              return true;
            } else {
              return false;
            }
          } else {
            if (obj2 === null) {
              return false;
            } else {
              for (_i = 0, _len = equals.length; _i < _len; _i++) {
                name = equals[_i];
                if (!j3.equals(j3.getVal(obj1, name), j3.getVal(obj2, name))) {
                  return false;
                }
              }
              return true;
            }
          }
        };
      }
    };
    j3.compileSortBy = function(sortBy) {
      var eachSortBy, info, sortInfo, sortRule, sortRules, _i, _j, _len, _len1, _ref;
      if (j3.isFunction(sortBy)) {
        return sortBy;
      }
      if (j3.isString(sortBy)) {
        sortBy = [sortBy];
      }
      sortRules = [];
      for (_i = 0, _len = sortBy.length; _i < _len; _i++) {
        eachSortBy = sortBy[_i];
        sortInfo = eachSortBy.split(' ');
        sortRule = {
          name: sortInfo[0]
        };
        if (sortRule.name.indexOf('?') === 0) {
          sortRule.name = sortRule.name.substr(1);
          sortRule.bool = true;
        }
        if (sortInfo.length > 1) {
          _ref = sortInfo.slice(1);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            info = _ref[_j];
            if (info === 'desc') {
              sortRule.desc = true;
            } else if (info === 'nullGreat') {
              sortRule.nullGreat = true;
            }
          }
        }
        sortRules.push(sortRule);
      }
      return function(obj1, obj2) {
        var eachRule, res, _k, _len2;
        res = 0;
        for (_k = 0, _len2 = sortRules.length; _k < _len2; _k++) {
          eachRule = sortRules[_k];
          if (eachRule.bool) {
            res = j3.compare(!!j3.getVal(obj1, eachRule.name), !!j3.getVal(obj2, eachRule.name));
          } else {
            res = j3.compare(j3.getVal(obj1, eachRule.name), j3.getVal(obj2, eachRule.name), eachRule.nullGreat);
          }
          if (eachRule.desc) {
            res *= -1;
          }
          if (res !== 0) {
            return res;
          }
        }
        return 0;
      };
    };
    _compiledGroupBy = {};
    return j3.compileGroupBy = function(groupBy) {
      var compiledGroupBy;
      if (j3.isFunction(groupBy)) {
        return groupBy;
      }
      if (j3.isString(groupBy)) {
        compiledGroupBy = _compiledGroupBy[groupBy];
        if (compiledGroupBy) {
          return compiledGroupBy;
        }
        _compiledGroupBy[groupBy] = compiledGroupBy = function(obj) {
          return j3.getVal(obj, groupBy);
        };
        return compiledGroupBy;
      }
    };
  })(j3);

  (function(j3) {
    var __forEach, __getChildItems;
    __forEach = function(callback) {
      var eachItem, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        eachItem = this[_i];
        _results.push(callback(eachItem));
      }
      return _results;
    };
    j3.indexOf = function(list, item, equals) {
      var index;
      if (!list) {
        return -1;
      }
      index = -1;
      if (equals == null) {
        equals = j3.equals;
      }
      j3.tryUntil(list, function(eachItem, args, i) {
        if (equals(eachItem, item)) {
          index = i;
          return true;
        }
      });
      return index;
    };
    j3.contains = function(list, item, equals) {
      return -1 !== j3.indexOf(list, item, equals);
    };
    j3["in"] = j3.contains;
    j3.remove = function(list, item, equals) {
      var eachItem, i, _i, _j, _k, _len, _len1, _len2;
      if (list.remove) {
        return list.remove(item, equals);
      }
      if (equals) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (equals(item, eachItem)) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      } else if (item.equals) {
        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
          eachItem = list[i];
          if (item.equals(eachItem)) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      } else {
        for (i = _k = 0, _len2 = list.length; _k < _len2; i = ++_k) {
          eachItem = list[i];
          if (item === eachItem) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      }
    };
    j3.count = function(list) {
      if (j3.isArray(list)) {
        return list.length;
      } else {
        if (!list) {
          return 0;
        }
        return list.count();
      }
    };
    j3.forEach = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          callback.call(context, eachItem, args, i);
        }
      } else if (list.forEach) {
        list.forEach(context, args, callback);
      }
    };
    j3.tryUntil = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (callback.call(context, eachItem, args, i)) {
            return eachItem;
          }
        }
      } else if (list.tryUntil) {
        list.tryUntil(context, args, callback);
      }
    };
    j3.doWhile = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (!callback.call(context, eachItem, args, i)) {
            return eachItem;
          }
        }
      } else if (list.doWhile) {
        list.doWhile(context, args, callback);
      }
    };
    j3.sortBy = function(list, sortBy) {
      var comparer;
      comparer = j3.compileSortBy(sortBy);
      return list.sort(comparer);
    };
    j3.group = function(list, groupBy, selector) {
      var forEach, grouper, groups;
      groups = {};
      grouper = j3.compileGroupBy(groupBy);
      forEach = list.forEach || __forEach;
      forEach.call(list, function(eachItem) {
        var groupName, subList;
        groupName = grouper(eachItem);
        subList = groups[groupName];
        if (!subList) {
          groups[groupName] = subList = [];
        }
        return subList.push(selector ? selector(eachItem) : eachItem);
      });
      return groups;
    };
    __getChildItems = function(list, parentId, options) {
      var children, childrenName, idName, parentName;
      idName = options.idName;
      parentName = options.parentName;
      childrenName = options.childrenName;
      children = [];
      j3.forEach(list, function(item) {
        if (parentId === j3.getVal(item, parentName)) {
          children.push(item);
          return j3.setVal(item, childrenName, __getChildItems(list, j3.getVal(item, idName), options));
        }
      });
      if (children.length) {
        return children;
      }
      return null;
    };
    j3.tree = function(list, options) {
      var childrenName, idName, itemsDictionary, parentName, rootItems, _ref, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.idName) == null) {
        options.idName = 'id';
      }
      if ((_ref1 = options.parentName) == null) {
        options.parentName = 'parentId';
      }
      if ((_ref2 = options.childrenName) == null) {
        options.childrenName = 'children';
      }
      idName = options.idName;
      parentName = options.parentName;
      childrenName = options.childrenName;
      itemsDictionary = {};
      j3.forEach(list, function(item) {
        return itemsDictionary[j3.getVal(item, idName)] = item;
      });
      rootItems = [];
      j3.forEach(list, function(item) {
        if (!j3.getVal(item, parentName)) {
          rootItems.push(item);
          return j3.setVal(item, childrenName, __getChildItems(list, j3.getVal(item, idName), options));
        }
      });
      return rootItems;
    };
    j3.pickFieldVal = function(list, options) {
      var map, res;
      if (j3.isString(options)) {
        options = {
          ensureUnique: false,
          ignoreEmpty: false,
          fieldName: options
        };
      }
      res = [];
      if (!options.ensureUnique) {
        j3.forEach(list, function(item) {
          if (options.ignoreEmpty && j3.isNullOrUndefined(item)) {
            return;
          }
          return res.push(j3.getVal(item, options.fieldName));
        });
        return res;
      }
      map = {};
      j3.forEach(list, function(item) {
        var eachVal, value, _i, _len;
        value = j3.getVal(item, options.fieldName);
        if (j3.isArray(value)) {
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            eachVal = value[_i];
            if (options.ignoreEmpty && j3.isNullOrUndefined(eachVal)) {
              return;
            }
            if (!map[eachVal]) {
              map[eachVal] = true;
              res.push(eachVal);
            }
          }
        } else {
          if (options.ignoreEmpty && j3.isNullOrUndefined(value)) {
            return;
          }
          if (!map[value]) {
            map[value] = true;
            return res.push(value);
          }
        }
      });
      return res;
    };
    j3.toMap = function(list, keyName) {
      var map;
      map = {};
      if (j3.isFunction(keyName)) {
        j3.forEach(list, function(item) {
          var key;
          key = keyName(item);
          return map[key] = item;
        });
      } else {
        j3.forEach(list, function(item) {
          var key;
          key = j3.getVal(item, keyName);
          return map[key] = item;
        });
      }
      return map;
    };
    return j3.without = function(list, values) {
      var result;
      result = [];
      j3.forEach(list, function(item) {
        if (j3.isFunction(values)) {
          if (!values(item)) {
            return result.push(item);
          }
        } else {
          if (!j3.tryUntil(values, (function(value) {
            return j3.equals(item, value);
          }))) {
            return result.push(item);
          }
        }
      });
      return result;
    };
  })(j3);

  j3.Pool = function(options) {
    this._maxSize = options.maxSize || -1;
    this._data = [];
    this._usedSize = 0;
    this._poolSize = 0;
    this.__onCreate = options.onCreate;
    this.__onInit = options.onInit;
    this.__onRelease = options.onRelease;
    return this.__onDestroy = options.onDestroy;
  };

  j3.ext(j3.Pool.prototype, {
    getMaxSize: function() {
      return this._maxSize;
    },
    setMaxSize: function(value) {
      if (value === -1 || value > this._maxSize) {
        return this._maxSize = value;
      }
    },
    getUsedSize: function() {
      return this._usedSize;
    },
    canGain: function() {
      return this._usedSize !== this._maxSize;
    },
    gain: function(options) {
      var entry;
      if (!this.canGain()) {
        return null;
      }
      if (this._usedSize < this._poolSize) {
        entry = this._data[this._usedSize];
      }
      if (!entry) {
        entry = this.__onCreate(options);
        if (!entry) {
          return null;
        }
        this._data[this._poolSize++] = entry;
      }
      this.__onInit(entry, options);
      this._usedSize++;
      return entry;
    },
    release: function(entry) {
      var i, lastEntry;
      if (!entry) {
        return;
      }
      lastEntry = this._data[this._usedSize - 1];
      if (entry !== lastEntry) {
        i = 0;
        while (i < this._usedSize) {
          if (entry === this._data[i]) {
            this._data[i] = lastEntry;
            break;
          }
          i++;
        }
        this._data[this._usedSize - 1] = entry;
      }
      if (typeof this.__onRelease === "function") {
        this.__onRelease(entry);
      }
      this._usedSize--;
    }
  });

  (function(j3) {
    var Unique, __addToArray;
    j3.Unique = Unique = function(options) {
      if (options == null) {
        options = {};
      }
      this._array = [];
      this._ignoreEmpty = options.ignoreEmpty;
    };
    Unique.prototype.getArray = function() {
      return this._array;
    };
    Unique.prototype.add = function(items) {
      var eachItem, _i, _len, _results;
      if (arguments.length === 0) {
        return;
      }
      if (this._ignoreEmpty) {
        if (j3.isUndefined(items)) {
          return;
        }
        if (j3.isNull(items)) {
          return;
        }
      }
      if (j3.isArray(items)) {
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          eachItem = items[_i];
          _results.push(__addToArray.call(this, eachItem));
        }
        return _results;
      } else {
        return __addToArray.call(this, items);
      }
    };
    return __addToArray = function(item) {
      var eachItem, _i, _len, _ref;
      _ref = this._array;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eachItem = _ref[_i];
        if (j3.equals(eachItem, item)) {
          return;
        }
      }
      return this._array.push(item);
    };
  })(j3);

  j3.EventManager = {
    on: function(name, context, handler) {
      var handlerList, handlerName, handlers;
      if (!this._eventHandlers) {
        this._eventHandlers = {};
      }
      if (arguments.length === 1) {
        handlers = name;
        for (handlerName in handlers) {
          handler = handlers[handlerName];
          handlerList = this._eventHandlers[handlerName];
          if (j3.isArray(handler)) {
            context = handler[0];
            handler = handler[1];
          } else if (j3.isObject(handler)) {
            context = handler.c || handler.ctx || handler.context;
            handler = handler.h || handler.hdl || handler.handler;
          } else {
            context = null;
          }
          if (!handlerList) {
            this._eventHandlers[handlerName] = handlerList = new j3.List;
          }
          handlerList.insert({
            handler: handler,
            context: context
          });
        }
      } else {
        if (arguments.length === 2) {
          handler = context;
          context = null;
        }
        handlerList = this._eventHandlers[name];
        if (!handlerList) {
          this._eventHandlers[name] = handlerList = new j3.List;
        }
        handlerList.insert({
          handler: handler,
          context: context
        });
      }
      return this;
    },
    un: function(name, context, handler) {
      var handlerList;
      if (!this._eventHandlers) {
        return this;
      }
      handlerList = this._eventHandlers[name];
      if (!handlerList) {
        return this;
      }
      if (arguments.length === 2) {
        handler = context;
        context = null;
      }
      handlerList.removeNode(handlerList.findNode({
        handler: handler,
        context: context,
        equals: function(obj) {
          return this.handler === obj.handler && this.context === obj.context;
        }
      }));
      return this;
    },
    fire: function(name, sender, args) {
      var handlerList;
      if (!this._eventHandlers) {
        return this;
      }
      handlerList = this._eventHandlers[name];
      if (!handlerList) {
        return this;
      }
      handlerList.forEach(function(obj) {
        return obj.handler.call(obj.context, sender, args);
      });
      return this;
    }
  };

  EventManagerCls = function() {};

  j3.ext(EventManagerCls.prototype, j3.EventManager);

  j3.createEventManager = function() {
    return new EventManagerCls;
  };

  (function(j3) {
    var ViewInfo;
    ViewInfo = function(view, handler) {
      this.view = view;
      this.handler = handler;
    };
    ViewInfo.prototype.equals = function(obj) {
      return this.view === obj.view && this.handler === obj.handler;
    };
    return j3.Datasource = {
      bind: function(view, handler) {
        var viewInfo;
        if (!view) {
          return;
        }
        if (!this._views) {
          this._views = new j3.List;
        }
        viewInfo = new ViewInfo(view, handler);
        if (this._views.contains(viewInfo)) {
          return;
        }
        this._views.insert(viewInfo);
        if (handler == null) {
          handler = view.updateView;
        }
        return handler.call(view, this, 'refresh');
      },
      unbind: function(view, handler) {
        var viewInfo;
        if (!view) {
          return;
        }
        if (!this._views) {
          return;
        }
        viewInfo = new ViewInfo(view, handler);
        if (!this._views.contains(viewInfo)) {
          return;
        }
        return this._views.remove(viewInfo);
      },
      updateViews: function(eventName, args) {
        var handler, node, view, viewInfo;
        if (!this._views) {
          return;
        }
        node = this._views.firstNode();
        while (node) {
          viewInfo = node.value;
          view = viewInfo.view;
          handler = viewInfo.handler || view.updateView;
          handler.call(view, this, eventName, args);
          node = node.next;
        }
      },
      refreshViews: function() {
        return this.updateViews('refresh');
      }
    };
  })(j3);

  j3.DataView = {
    getDatasource: function() {
      return this._datasource;
    },
    setDatasource: function(datasource) {
      if (this._datasource === datasource) {
        return;
      }
      if (this._datasource) {
        this._datasource.unbind(this);
      }
      this._datasource = datasource;
      if (datasource) {
        return datasource.bind(this);
      }
    },
    updateData: function() {
      if (!this._datasource) {
        return;
      }
      if (this._updatingData) {
        return;
      }
      this._updatingData = true;
      this.onUpdateData(this._datasource);
      return this._updatingData = false;
    },
    isUpdatingData: function() {
      return this._updatingData;
    },
    updateView: function(datasource, eventName, args) {
      if (this._updatingData || this._updatingView) {
        return;
      }
      this._updatingView = true;
      this.onUpdateView(datasource, eventName, args);
      return this._updatingView = false;
    },
    isUpdatingView: function() {
      return this._updatingView;
    }
  };

  (function(j3) {
    var Model;
    j3.Model = Model = function(data, options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      if (data && !options.noParse && this.parse) {
        data = this.parse(data);
      }
      if (defaults = this.get('defaults')) {
        data = j3.ext(defaults, data);
      }
      this._data = data || {};
    };
    j3.ext(Model.prototype, j3.EventManager, j3.Datasource, {
      notifyChangeName: 'modelDataChange',
      has: function(name) {
        return this._data.hasOwnProperty(name);
      },
      getData: function(fields) {
        if (this._data) {
          return j3.clone(this._data, fields);
        } else {
          return {};
        }
      },
      get: function(name, defaultVal) {
        if (j3.isFunction(this[name])) {
          return this[name].call(this);
        }
        if (!this._data) {
          return defaultVal;
        }
        if (this._data.hasOwnProperty(name)) {
          return this._data[name];
        } else {
          return defaultVal;
        }
      },
      set: function(name, value, options) {
        var changedData, data, eventName, _ref;
        if ((_ref = this._data) == null) {
          this._data = {};
        }
        if (j3.isObject(name)) {
          data = name;
          options = value;
        }
        if (options == null) {
          options = {};
        }
        if (!this._originalData) {
          this._originalData = j3.clone(this._data);
        }
        eventName = 'change';
        if (!data) {
          if (j3.equals(this._data[name], value)) {
            return;
          }
          changedData = {};
          changedData[name] = value;
          this._data[name] = value;
        } else {
          if (options.append) {
            changedData = {};
            for (name in data) {
              value = data[name];
              if (j3.equals(this._data[name], value)) {
                continue;
              }
              changedData[name] = value;
              this._data[name] = value;
            }
          } else {
            eventName = 'refresh';
            if (this.parse) {
              data = this.parse(data);
            }
            this._data = j3.clone(data);
          }
        }
        return this.notifyChange({
          eventName: eventName,
          changedData: changedData,
          source: options.source
        });
      },
      notifyChange: function(options) {
        var args, collection, eventName;
        if (options == null) {
          options = {};
        }
        eventName = options.eventName;
        args = {
          changedData: options.changedData,
          source: options.source,
          model: this
        };
        this.fire(eventName, this, args);
        this.updateViews(eventName, args);
        collection = this.collection;
        return collection && collection.notifyModelChange(this.notifyChangeName, args);
      },
      toJson: function(buffer) {
        return j3.toJson(this._data, buffer);
      }
    });
    j3.getVal = function(model, name, defaultVal) {
      if (j3.isFunction(model.get)) {
        return model.get(name, defaultVal);
      }
      if (j3.isUndefined(model[name])) {
        return defaultVal;
      }
      return model[name];
    };
    return j3.setVal = function(model, name, value, options) {
      if (j3.isFunction(model.set)) {
        return model.set(name, value, options);
      }
      return model[name] = value;
    };
  })(j3);

  (function(j3) {
    var _collections;
    _collections = {};
    j3.getCollection = function(id) {
      return _collections[id];
    };
    j3.Collection = j3.cls({
      ctor: function(options) {
        if (options == null) {
          options = {};
        }
        if (options.id) {
          this.id = options.id;
          _collections[this.id] = this;
        }
        this._idName = options.idName || 'id';
        this._idxId = {};
        this._model = options.model || j3.Model;
        this._models = new j3.List;
        this._notFoundModels = {};
        this._lazyLoad = options.lazyLoad;
        this._url = options.url;
        this._contextData = options.contextData;
        options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model;
      },
      getContextData: function() {
        return this._contextData;
      },
      setContextData: function(value) {
        if (this._contextData === value) {
          return;
        }
        return this._contextData = value;
      },
      insert: function(data, options) {
        var args, id, model, target;
        if (options == null) {
          options = {};
        }
        if (data instanceof this._model) {
          model = data;
        } else {
          model = new this._model(data);
        }
        id = model.get(this._idName);
        if (id) {
          this._idxId[id] = model;
        }
        model.collection = this;
        target = null;
        if (!j3.isUndefined(options.targetIndex)) {
          target = this._models.getNodeAt(options.targetIndex);
        }
        this._models.insert(model, target);
        if (!options.silent) {
          args = {
            model: model
          };
          this.updateViews('add', args);
          this.fire('addModel', this, args);
        }
        return model;
      },
      remove: function(model, options) {
        var args, newActiveModel, node;
        if (!model) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._models.findNode(model);
        if (this._activeModel === model) {
          newActiveModel = node.next && node.next.value;
          if (!newActiveModel) {
            newActiveModel = node.prev && node.prev.value;
          }
        }
        delete this._idxId[model.get(this._idName)];
        this._models.removeNode(node);
        if (!options.silent) {
          args = {
            model: model
          };
          this.updateViews('remove', args);
          this.fire('removeModel', this, args);
        }
        if (newActiveModel) {
          this.setActive(newActiveModel, options);
        }
        return model;
      },
      removeById: function(id, options) {
        var model;
        model = this.getById(id);
        if (model) {
          return this.remove(model, options);
        }
      },
      removeActive: function(options) {
        if (this._activeModel) {
          return this.remove(this._activeModel, options);
        }
      },
      clear: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this._notFoundModels = {};
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadData: function(dataList, options) {
        var data, silent, _i, _len;
        dataList = dataList || [];
        options = options || {};
        silent = options.silent;
        options.silent = true;
        this.clear(options);
        for (_i = 0, _len = dataList.length; _i < _len; _i++) {
          data = dataList[_i];
          this.insert(data, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActive(this._models.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      setActiveByIndex: function(index, options) {
        if (index >= this.count() || index < 0) {
          index = -1;
        }
        return this.setActive(this.getAt(index), options);
      },
      setActiveById: function(id, options) {
        var _this = this;
        return this.getById(id, function(model) {
          return _this.setActive(model, options);
        });
      },
      notifyModelChange: function(changeName, args) {
        this.updateViews(changeName, args);
        return this.fire(changeName, this, args);
      },
      getById: function(id, callback) {
        var model;
        if (!id) {
          callback && callback(null);
          return null;
        }
        model = this._idxId[id];
        if (model) {
          callback && callback(model);
          return model;
        }
        if (!this._lazyLoad || this._notFoundModels[id]) {
          callback && callback(null);
          return null;
        }
        return j3.get(this._url + id, null, this, function(xhr, result) {
          if (xhr.status >= 500) {
            return callback(null);
          } else if (xhr.status >= 400) {
            this._notFoundModels[id] = true;
            return callback(null);
          }
          this.insert(result);
          callback(this._idxId[id]);
        });
      },
      getAt: function(index) {
        return this._models.getAt(index);
      },
      count: function() {
        return this._models.count();
      },
      forEach: function(context, args, callback) {
        return this._models.forEach(context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return this._models.tryUntil(context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return this._models.doWhile(context, args, callback);
      },
      find: function(model, equals) {
        var node;
        node = this._models.findNode(model, equals);
        return node && node.value;
      },
      contains: function(model, equals) {
        return this._models.contains(model, equals);
      },
      map: function(callback, context) {
        var result;
        result = [];
        this.forEach(context, null, function(model) {
          return result.push(callback.call(this, model));
        });
        return result;
      }
    });
    j3.ext(j3.Collection.prototype, j3.Datasource);
    return j3.ext(j3.Collection.prototype, j3.EventManager);
  })(j3);

  (function(j3) {
    var __filter, __group, __grouper, __select;
    __filter = function(model, filterBy) {
      var filter, name;
      if (j3.isFunction(filterBy)) {
        return filterBy(model);
      }
      for (name in filterBy) {
        filter = filterBy[name];
        if (j3.isFunction(filter)) {
          if (!filter(model[name], model)) {
            return false;
          }
        } else if (model[name] !== filter) {
          return false;
        }
      }
      return true;
    };
    __select = function(model, selector) {
      if (j3.isFunction(selector)) {
        return selector(model);
      }
    };
    __grouper = function(groupBy) {
      var groupId, groupText, groupValue, idName, textName, valueName;
      if (j3.isFunction(groupBy)) {
        return groupBy;
      }
      if (j3.isString(groupBy)) {
        return function(obj) {
          return obj[groupBy];
        };
      }
      if (j3.isObject(groupBy)) {
        if (!groupBy.text) {
          groupText = null;
        } else if (j3.isFunction(groupBy.text)) {
          groupText = groupBy.text;
        } else {
          textName = groupBy.text;
          groupText = function(obj) {
            return obj[textName];
          };
        }
        if (!groupBy.value) {
          groupValue = null;
        } else if (j3.isFunction(groupBy.value)) {
          groupValue = groupBy.value;
        } else {
          valueName = groupBy.value;
          groupValue = function(obj) {
            return obj[valueName];
          };
        }
        if (!groupBy.id) {
          groupId = null;
        } else if (j3.isFunction(groupBy.id)) {
          groupId = groupBy.id;
        } else {
          idName = groupBy.id;
          groupId = function(obj) {
            return obj[idName];
          };
        }
        return function(obj) {
          var groupInfo;
          groupInfo = {};
          if (groupText) {
            groupInfo.text = groupText(obj);
          }
          if (groupValue) {
            groupInfo.value = groupValue(obj);
          }
          if (groupId) {
            groupInfo.id = groupId(obj);
          }
          return groupInfo;
        };
      }
    };
    __group = function() {
      var eachModel, groupBy, groupData, groupIdName, groupList, groupMap, groupSortBy, grouper, modelGroup, models, _i, _len;
      models = this._models;
      groupIdName = this._groupIdName;
      groupBy = this._groupBy;
      groupSortBy = this._groupSortBy;
      if (!groupBy) {
        return;
      }
      grouper = __grouper(groupBy);
      groupMap = {};
      groupList = [];
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        eachModel = models[_i];
        groupData = grouper(eachModel.getData());
        if (!groupData) {
          groupData = this._defaultGroupData;
        }
        if (!groupData) {
          continue;
        }
        modelGroup = groupMap[groupData[groupIdName]];
        if (!modelGroup) {
          groupData.items = [];
          groupMap[groupData[groupIdName]] = modelGroup = groupData;
          groupList.push(modelGroup);
        }
        modelGroup.items.push(eachModel);
      }
      if (!groupSortBy) {
        groupSortBy = 'id';
      }
      groupList.sort(j3.compileSortBy(groupSortBy));
      this._groupList = groupList;
      this._groupMap = groupMap;
    };
    j3.CollectionView = j3.cls({
      ctor: function(options) {
        this._idName = options.idName || 'id';
        this._selector = options.selector;
        this._filterBy = options.filterBy;
        this._sortBy = options.sortBy;
        this._groupIdName = options.groupIdName || 'id';
        this._groupBy = options.groupBy;
        this._groupSortBy = options.groupSortBy;
        this._defaultGroupData = options.defaultGroupData;
        this._model = options.model;
        this.setDatasource(options.datasource);
        return options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model || this.getDatasource().getModel() || j3.Model;
      },
      getSelector: function() {
        return this._selector;
      },
      setSelector: function(selector, options) {
        options = options || {};
        this._selector = selector;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getFilterBy: function() {
        return this._filterBy;
      },
      setFilterBy: function(filterBy, options) {
        options = options || {};
        this._filterBy = filterBy;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getSortBy: function() {
        return this._sortBy;
      },
      setSortBy: function(sortBy, options) {
        options = options || {};
        this._sortBy = sortBy;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getGroupBy: function() {
        return this._groupBy;
      },
      setGroupBy: function(groupBy, options) {
        options = options || {};
        this._groupBy = groupBy;
        if (!options.silent) {
          __group.call(this);
          return this.updateViews('group');
        }
      },
      getGroupSortBy: function() {
        return this._groupSortBy;
      },
      setGroupSortBy: function(groupBy, options) {
        options = options || {};
        this._groupSortBy = groupBy;
        if (!options.silent) {
          return this.updateViews('groupSort');
        }
      },
      getById: function(id) {
        return this._idxId[id];
      },
      getAt: function(index) {
        if (index < 0 || index >= this._models.length) {
          return null;
        }
        return this._models[index];
      },
      removeById: function(id, options) {
        return this.getDatasource().removeById(id, options);
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      count: function() {
        return this._models.length;
      },
      onUpdateView: function(datasource, eventName, args) {
        return this.refresh();
      },
      forEach: function(context, args, callback) {
        return j3.forEach(this._models, context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return j3.tryUntil(this._models, context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return j3.doWhile(this._models, context, args, callback);
      },
      forEachGroup: function(context, args, callback) {
        var group, i, _i, _len, _ref, _results;
        if (!this._groupList) {
          return;
        }
        if (!args && !callback) {
          callback = context;
          context = null;
          args = null;
        } else if (!callback) {
          callback = args;
          args = null;
        }
        _ref = this._groupList;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          group = _ref[i];
          _results.push(callback.call(context, group, args, i));
        }
        return _results;
      },
      getGroupById: function(id) {
        if (!this._groupMap) {
          return;
        }
        return this._groupMap[id];
      },
      refresh: function() {
        var Model, distinctor, filtedModels, id, model, models, newModel, _i, _j, _len, _len1;
        models = [];
        distinctor = {};
        if (this._selector) {
          this._datasource.forEach(this, function(model) {
            var id, newModel;
            newModel = __select(model, this._selector);
            if (newModel) {
              if (this._idName) {
                id = newModel[this._idName];
                if (!distinctor[id]) {
                  distinctor[id] = newModel;
                  return models.push(newModel);
                }
              } else {
                return models.push(newModel);
              }
            }
          });
          if (this._filterBy) {
            filtedModels = [];
            for (_i = 0, _len = models.length; _i < _len; _i++) {
              model = models[_i];
              if (__filter(model, this._filterBy)) {
                filtedModels.push(model);
              }
            }
            models = filtedModels;
          }
        } else {
          if (this._filterBy) {
            this._datasource.forEach(this, function(model) {
              var newModel;
              newModel = model.getData();
              if (__filter(newModel, this._filterBy)) {
                return models.push(newModel);
              }
            });
          } else {
            this._datasource.forEach(this, function(model) {
              return models.push(model.getData());
            });
          }
        }
        this._models = [];
        this._idxId = {};
        Model = this.getModel();
        for (_j = 0, _len1 = models.length; _j < _len1; _j++) {
          model = models[_j];
          newModel = new Model(model);
          newModel.collection = this;
          this._models.push(newModel);
          if (this._idName) {
            id = model[this._idName];
            this._idxId[id] = newModel;
          }
        }
        if (this._sortBy) {
          this._models.sort(j3.compileSortBy(this._sortBy));
        }
        __group.call(this);
        this.updateViews('refresh');
        return this.fire('refresh', this);
      }
    });
    return j3.ext(j3.CollectionView.prototype, j3.DataView, j3.Datasource, j3.EventManager);
  })(j3);

  (function(j3) {
    var GroupedCollection, __getFirstNodeGreatThan, __insertModelToGroup, __removeModelFromGroup;
    __insertModelToGroup = function(model, group) {
      var items;
      if (model.group === group) {
        return;
      }
      if (model.group) {
        model.group.items.remove(model);
      }
      model.group = group;
      items = group.items;
      if (!items) {
        group.items = items = new j3.List;
      }
      return items.insert(model);
    };
    __removeModelFromGroup = function(model) {
      var group, items;
      group = model.group;
      if (!group) {
        return;
      }
      model.group = null;
      items = group.items;
      if (items) {
        return items.remove(model);
      }
    };
    __getFirstNodeGreatThan = function(list, value, comparer) {
      var node;
      node = list.firstNode();
      while (node) {
        if (node.value !== value && 0 < comparer(node.value._data, value._data)) {
          return node;
        }
        node = node.next;
      }
      return null;
    };
    j3.GroupedCollection = GroupedCollection = j3.cls({
      ctor: function(options) {
        if (options == null) {
          options = {};
        }
        if (options.id) {
          this.id = options.id;
          _collections[this.id] = this;
        }
        this._idName = options.idName || 'id';
        this._idxId = {};
        this._model = options.model || j3.Model;
        this._models = new j3.List;
        this._groupIdName = options.groupIdName || 'id';
        this._groupMap = {};
        this._groupModel = options.groupModel || j3.Model;
        this._groupList = new j3.List;
        if (options.groupBy) {
          this._groupBy = j3.compileGroupBy(options.groupBy);
        }
        if (options.groupSortBy) {
          this._groupSortBy = j3.compileSortBy(options.groupSortBy);
        }
        options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model;
      },
      getData: function(name) {
        if (!this._data) {
          return null;
        }
        return this._data[name];
      },
      setData: function(name, value) {
        if (!this._data) {
          this._data = {};
        }
        return this._data[name] = value;
      },
      insertGroup: function(data, options) {
        var group, groupNodeToInsert, id;
        if (options == null) {
          options = {};
        }
        group = new this._groupModel(data);
        group.notifyChangeName = 'groupDataChange';
        group.collection = this;
        id = group.get(this._groupIdName);
        if (id) {
          this._groupMap[id] = group;
        }
        if (this._groupSortBy) {
          groupNodeToInsert = __getFirstNodeGreatThan(this._groupList, group, this._groupSortBy);
        }
        this._groupList.insert(group, groupNodeToInsert);
        if (!options.silent) {
          this.updateViews('groupAdd', {
            group: group
          });
        }
        return group;
      },
      removeGroup: function(group, options) {
        var newActiveGroup, node;
        if (!group) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._groupList.findNode(group);
        if (this._activeGroup === group) {
          newActiveGroup = node.next && node.next.value;
          if (!newActiveGroup) {
            newActiveGroup = node.prev && node.prev.value;
          }
        }
        this._groupList.removeNode(node);
        delete this._groupMap[group.get(this._groupIdName)];
        if (!options.silent) {
          this.updateViews('groupRemove', {
            group: group
          });
        }
        if (newActiveGroup) {
          this.setActiveGroup(newActiveGroup, options);
        }
        return group;
      },
      removeGroupById: function(id, options) {
        var group;
        group = this.getGroupById(id);
        if (group) {
          return this.removeGroup(group, options);
        }
      },
      removeActiveGroup: function(options) {
        if (this._activeGroup) {
          return this.removeGroup(this._activeGroup, options);
        }
      },
      insert: function(data, options) {
        var group, groupId, id, model;
        if (options == null) {
          options = {};
        }
        if (data instanceof this._model) {
          model = data;
        } else {
          model = new this._model(data);
        }
        id = model.get(this._idName);
        if (id) {
          this._idxId[id] = model;
        }
        if (options.group) {
          __insertModelToGroup(model, options.group);
        } else {
          groupId = this._groupBy(model);
          group = this.getGroupById(groupId);
          if (!group) {
            return;
          }
          __insertModelToGroup(model, group);
        }
        model.collection = this;
        this._models.insert(model);
        if (!options.silent) {
          this.updateViews('add', {
            model: model
          });
        }
        return model;
      },
      remove: function(model, options) {
        var newActiveModel, node;
        if (!model) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._models.findNode(model);
        if (this._activeModel === model) {
          newActiveModel = node.next && node.next.value;
          if (!newActiveModel) {
            newActiveModel = node.prev && node.prev.value;
          }
        }
        __removeModelFromGroup(model);
        delete this._idxId[model.get(this._idName)];
        this._models.removeNode(node);
        if (!options.silent) {
          this.updateViews('remove', {
            model: model
          });
        }
        if (newActiveModel) {
          this.setActive(newActiveModel, options);
        }
        return model;
      },
      removeById: function(id, options) {
        var model;
        model = this.getById(id);
        if (model) {
          return this.remove(model, options);
        }
      },
      removeActive: function(options) {
        if (this._activeModel) {
          return this.remove(this._activeModel, options);
        }
      },
      clear: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this.forEachGroup(function(group) {
          return group.items && group.items.clear();
        });
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      clearGroup: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this._groupMap = {};
        this._groupList.clear();
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadGroupData: function(groupDataList, options) {
        var groupData, silent, _i, _len;
        if (options == null) {
          options = {};
        }
        silent = options.silent;
        options.silent = true;
        this.clearGroup(options);
        for (_i = 0, _len = groupDataList.length; _i < _len; _i++) {
          groupData = groupDataList[_i];
          this.insertGroup(groupData, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActiveGroup(this._groupList.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadData: function(dataList, options) {
        var data, silent, _i, _len;
        options = options || {};
        silent = options.silent;
        options.silent = true;
        this.clear(options);
        for (_i = 0, _len = dataList.length; _i < _len; _i++) {
          data = dataList[_i];
          this.insert(data, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActive(this._models.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      getActiveGroup: function() {
        return this._activeGroup;
      },
      setActiveGroup: function(group, options) {
        var args, old;
        if (this._activeGroup === group) {
          return;
        }
        options = options || {};
        old = this._activeGroup;
        this._activeGroup = group;
        if (!options.silent) {
          args = {
            old: old,
            group: group
          };
          this.updateViews('activeGroup', args);
          return this.fire('activeGroupChange', this, args);
        }
      },
      setActiveGroupByIndex: function(index, options) {
        if (index >= this._groupList.count() || index < 0) {
          index = -1;
        }
        return this.setActiveGroup(this.getGroupAt(index), options);
      },
      getGroupById: function(id) {
        if (!id) {
          return null;
        }
        return this._groupMap[id];
      },
      getGroupAt: function(index) {
        return this._groupList.getAt(index);
      },
      groupCount: function() {
        return this._groupList.count();
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      setActiveByIndex: function(index, options) {
        if (index >= this.count() || index < 0) {
          index = -1;
        }
        return this.setActive(this.getAt(index), options);
      },
      notifyModelChange: function(changeName, args) {
        var group, groupId, groupNode, model, targetNode;
        if (changeName === 'groupDataChange') {
          if (this._groupSortBy) {
            group = args.model;
            if (group) {
              targetNode = __getFirstNodeGreatThan(this._groupList, group, this._groupSortBy);
              groupNode = this._groupList.findNode(group);
              this._groupList.insertNode(groupNode, targetNode);
            }
          }
        } else {
          model = args.model;
          groupId = this._groupBy(model);
          group = this.getGroupById(groupId);
          if (group) {
            __insertModelToGroup(model, group);
          }
        }
        this.updateViews(changeName, args);
        return this.fire(changeName, this, args);
      },
      getById: function(id, callback) {
        if (!id) {
          return null;
        }
        return this._idxId[id];
      },
      getAt: function(index) {
        return this._models.getAt(index);
      },
      count: function() {
        return this._models.count();
      },
      forEach: function(context, args, callback) {
        return this._models.forEach(context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return this._models.tryUntil(context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return this._models.doWhile(context, args, callback);
      },
      forEachGroup: function(context, args, callback) {
        return this._groupList.forEach(context, args, callback);
      },
      tryUntilGroup: function(context, args, callback) {
        return this._groupList.tryUntil(context, args, callback);
      },
      doWhileGroup: function(context, args, callback) {
        return this._groupList.doWhile(context, args, callback);
      }
    });
    return j3.ext(GroupedCollection.prototype, j3.Datasource, j3.EventManager);
  })(j3);

  (function(j3) {
    var fEncodeString, mEncodeString, rEncodeString, __arrayToJson, __objectToJson, __stringToJson, __toJson;
    rEncodeString = /\\|\r|\n|\t|"/g;
    mEncodeString = {
      '\\': '\\\\',
      '\r': '\\n',
      '\n': '\\n',
      '\t': '\\t',
      '"': '\\"'
    };
    fEncodeString = function(match) {
      return mEncodeString[match];
    };
    __stringToJson = function(obj, buffer) {
      buffer.append('"');
      buffer.append(obj.replace(rEncodeString, fEncodeString));
      return buffer.append('"');
    };
    __arrayToJson = function(obj, buffer) {
      var firstItem, item, _i, _len;
      buffer.append('[');
      firstItem = true;
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        item = obj[_i];
        if (firstItem) {
          firstItem = false;
        } else {
          buffer.append(',');
        }
        __toJson(item, buffer);
      }
      return buffer.append(']');
    };
    __objectToJson = function(obj, buffer) {
      var firstItem, key, value;
      if (j3.isFunction(obj.toJson)) {
        return obj.toJson(buffer);
      }
      buffer.append('{');
      firstItem = true;
      for (key in obj) {
        value = obj[key];
        if (j3.isUndefined(value)) {
          continue;
        }
        if (firstItem) {
          firstItem = false;
        } else {
          buffer.append(',');
        }
        __stringToJson(key, buffer);
        buffer.append(':');
        __toJson(value, buffer);
      }
      return buffer.append('}');
    };
    __toJson = function(obj, buffer) {
      var typeOfObj;
      typeOfObj = typeof obj;
      switch (typeOfObj) {
        case 'string':
          buffer.append('"');
          buffer.append(obj.replace(rEncodeString, fEncodeString));
          buffer.append('"');
          break;
        case 'number':
        case 'boolean':
          buffer.append(obj.toString());
          break;
        case 'object':
          if (j3.isArray(obj)) {
            __arrayToJson(obj, buffer);
          } else if (j3.isDate(obj)) {
            buffer.append("\"/Date(" + (obj.getTime()) + ")/\"");
          } else if (j3.isNull(obj)) {
            buffer.append('null');
          } else {
            __objectToJson(obj, buffer);
          }
          break;
        case 'undefined':
          buffer.append('null');
          break;
        default:
          __stringToJson(obj.toString(), buffer);
      }
    };
    j3.toJSON = j3.toJson = function(obj, buffer) {
      if (j3.isUndefined(buffer)) {
        buffer = new j3.StringBuilder;
        __toJson(obj, buffer);
        return buffer.toString();
      } else {
        return __toJson(obj, buffer);
      }
    };
    return j3.fromJSON = j3.fromJson = function(json) {
      return eval("(" + json + ")");
    };
  })(j3);

  j3.Dom = (function() {
    var Dom, UA, __clientHeight_gecko, __clientHeight_ie, __clientHeight_opera, __clientWidth_gecko, __clientWidth_ie, __clientWidth_opera, __getStyle_ie, __getStyle_other, __height_ie, __height_other, __opacity_ie, __opacity_other, __position, __position_op_webkit, __width_ie, __width_other, _tempDiv;
    if (j3.isRunInServer()) {
      return null;
    }
    UA = j3.UA;
    _tempDiv = document.createElement('div');
    Dom = {
      create: function(tagName, attributes, innerHTML) {
        var el, name, value;
        el = document.createElement(tagName);
        if (!el) {
          return;
        }
        if (!attributes) {
          return el;
        }
        for (name in attributes) {
          value = attributes[name];
          el[name] = value;
        }
        if (!j3.isUndefined(innerHTML)) {
          el.innerHTML = innerHTML;
        }
        return el;
      },
      attr: function(el, name, value) {
        var node;
        if (arguments.length === 3) {
          el.attributes[name] = value;
          return;
        }
        node = el.attributes[name];
        if (!node) {
          return null;
        }
        return node.nodeValue;
      },
      getAttr: function(el, name) {
        var node;
        node = el.attributes[name];
        if (!node) {
          return null;
        }
        return node.nodeValue;
      },
      setAttr: function(el, name, value) {
        return el.attributes[name] = value;
      },
      removeAttr: function(el, name) {
        return el.removeAttribute(name);
      },
      data: function(el, name, value) {
        if (arguments.length === 3) {
          this.attr(el, "data-" + name, value);
          return;
        }
        if (el.dataset) {
          return el.dataset[name];
        } else {
          return this.attr(el, "data-" + name);
        }
      },
      getData: function(el, name) {
        if (el.dataset) {
          return el.dataset[name];
        } else {
          return this.getAttr(el, "data-" + name);
        }
      },
      setData: function(el, name, value) {
        return this.setAttr(el, "data-" + name, value);
      },
      removeData: function(el, name) {
        return this.removeAttr(el, "data-" + name);
      },
      hasCls: function(el, cls) {
        return j3.include(el.className, cls, ' ');
      },
      setCls: function(el, cls) {
        el.className = cls.trim();
      },
      addCls: function(el, cls) {
        if (!this.hasCls(el, cls)) {
          el.className = (el.className + ' ' + cls).trim();
        }
      },
      removeCls: function(el, cls) {
        el.className = el.className.replace(new RegExp('(^|\\s)' + cls + '(?:\\s|$)'), '$1').trim();
      },
      replaceCls: function(el, cls1, cls2) {
        if (this.hasCls(el, cls2)) {
          cls2 = ' ';
        } else {
          cls2 = ' ' + cls2 + ' ';
        }
        el.className = (' ' + el.className + ' ').replace(' ' + cls1 + ' ', cls2).trim();
      },
      toggleCls: function(el, cls1, cls2) {
        var hasCls1;
        hasCls1 = this.hasCls(el, cls1);
        if (arguments.length === 2) {
          if (hasCls1) {
            this.removeCls(el, cls1);
          } else {
            this.addCls(el, cls1);
          }
        } else {
          if (hasCls1) {
            this.replaceCls(el, cls1, cls2);
          } else {
            this.replaceCls(el, cls2, cls1);
          }
        }
      },
      visible: function(el, value) {
        if (arguments.length === 1) {
          return this.getStyle(el, 'display' !== 'none');
        } else if (value) {
          return this.show(el);
        } else {
          return this.hide(el);
        }
      },
      show: function(el) {
        if (el.style.display !== 'none') {
          return;
        }
        el.style.display = el._oldStyleDisplay || '';
      },
      hide: function(el) {
        if (el.style.display === 'none') {
          return;
        }
        el._oldStyleDisplay = el.style.display;
        el.style.display = 'none';
      },
      remove: function(el) {
        return el.parentNode.removeChild(el);
      },
      append: function(target, el) {
        var els;
        if (!target) {
          return;
        }
        if (typeof el === 'string') {
          _tempDiv.innerHTML = el;
          if (_tempDiv.childNodes.length > 1) {
            els = [];
            while (_tempDiv.firstChild) {
              els[els.length] = target.appendChild(_tempDiv.firstChild);
            }
            return els;
          }
          return target.appendChild(_tempDiv.firstChild);
        }
        return target.appendChild(el);
      },
      parent: function(el, selector) {
        if (arguments.length === 1) {
          return el.parentNode;
        }
        if (0 === selector.indexOf('.')) {
          selector = selector.substr(1);
          while (el) {
            if (this.hasCls(el, selector)) {
              return el;
            }
            el = el.parentNode;
          }
        } else {
          selector = selector.toUpperCase();
          while (el) {
            if (el.tagName === selector) {
              return el;
            }
            el = el.parentNode;
          }
        }
        return null;
      },
      indexOf: function(el) {
        var index, node, p, _i, _len, _ref;
        p = el.parentNode;
        if (!p) {
          return -1;
        }
        index = 0;
        _ref = p.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node.nodeType === 1) {
            if (node === el) {
              return index;
            }
            ++index;
          }
        }
        return -1;
      },
      byIndex: function(el, index) {
        var node, pi, _i, _len, _ref;
        if (!el) {
          return null;
        }
        pi = 0;
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node.nodeType === 1) {
            if (pi === index) {
              return node;
            }
            ++pi;
          }
        }
        return null;
      },
      byCls: function(el, cls) {
        var node, _i, _len, _ref;
        if (!el) {
          return null;
        }
        _ref = el.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node.nodeType === 1) {
            if (this.hasCls(node, cls)) {
              return node;
            }
          }
        }
        return null;
      },
      firstChild: function(el) {
        return el.children[0];
      },
      lastChild: function(el) {
        el = el.lastChild;
        while (el) {
          if (el.nodeType === 1) {
            return el;
          }
          el = el.previousSibling;
        }
        return null;
      },
      next: function(el) {
        if (!el) {
          return null;
        }
        el = el.nextSibling;
        while (el) {
          if (el.nodeType === 1) {
            return el;
          }
          el = el.nextSibling;
        }
        return null;
      },
      previous: function(el) {
        if (!el) {
          return null;
        }
        el = el.previousSibling;
        while (el) {
          if (el.nodeType === 1) {
            return el;
          }
          el = el.previousSibling;
        }
        return null;
      },
      pageWidth: function(wnd) {
        var cw, pw;
        if (wnd == null) {
          wnd = window;
        }
        pw = wnd.document.documentElement.scrollWidth;
        cw = this.clientWidth(wnd);
        if (pw > cw) {
          return pw;
        } else {
          return cw;
        }
      },
      pageHeight: function(wnd) {
        var ch, ph;
        if (wnd == null) {
          wnd = window;
        }
        ph = wnd.document.documentElement.scrollHeight;
        ch = this.clientHeight(wnd);
        if (ph > ch) {
          return ph;
        } else {
          return ch;
        }
      },
      offsetWidth: function(el, width) {
        var delta;
        if (arguments.length === 1) {
          return el.offsetWidth;
        }
        if (j3.isUndefined(width) || width === -1) {
          el.style.width = '';
        } else {
          delta = el.offsetWidth - this.width(el);
          el.style.width = (width - delta) + 'px';
        }
      },
      offsetHeight: function(el, height) {
        var delta;
        if (arguments.length === 1) {
          return el.offsetHeight;
        }
        if (j3.isUndefined(height) || height === -1) {
          el.style.height = '';
        } else {
          delta = el.offsetHeight - this.height(el);
          el.style.height = (height - delta) + 'px';
        }
      },
      place: function(el, left, top, clientAbs) {
        var pos, s;
        s = el.style;
        s.left = s.top = '0';
        pos = this.position(el, clientAbs);
        if (!j3.isUndefined(left)) {
          s.left = (left - pos.left) + 'px';
        }
        if (!j3.isUndefined(top)) {
          s.top = (top - pos.top) + 'px';
        }
      },
      center: function(el, top, left) {
        var ch, cw, eh, ew, sl, st, x, y;
        if (top !== 0) {
          if (top == null) {
            top = 0.4;
          }
        }
        if (left !== 0) {
          if (left == null) {
            left = 0.5;
          }
        }
        cw = this.clientWidth();
        ch = this.clientHeight();
        ew = this.offsetWidth(el);
        eh = this.offsetHeight(el);
        st = document.documentElement.scrollTop;
        sl = document.documentElement.scrollLeft;
        if (left >= 1) {
          x = left;
        } else {
          x = (cw - ew) * left + sl;
        }
        if (top >= 1) {
          y = top;
        } else {
          y = (ch - eh) * top + st;
        }
        if (x < 0) {
          x = 0;
        }
        if (y < 0) {
          y = 0;
        }
        return this.place(el, x, y);
      },
      disableLink: function(el, disabledCls) {
        if (!disabledCls) {
          disabledCls = 'disabled';
        }
        if (this.hasCls(el, disabledCls)) {
          return;
        }
        this.addCls(el, disabledCls);
        this.setData(el, 'href', el.href);
        this.removeAttr(el, 'href');
      },
      enableLink: function(el, disabledCls) {
        if (!disabledCls) {
          disabledCls = 'disabled';
        }
        if (!this.hasCls(el, disabledCls)) {
          return;
        }
        this.removeCls(el, disabledCls);
        el.href = this.getData(el, 'href');
        this.removeData(el, 'href');
      }
    };
    Dom.getAttr = Dom.attr;
    Dom.getData = Dom.data;
    __width_ie = function(el, width) {
      var borderLeft, borderRight, cs, paddingLeft, paddingRight;
      if (arguments.length === 2) {
        el.style.width = width + 'px';
        return;
      }
      cs = el.currentStyle;
      borderLeft = parseInt(cs.borderLeftWidth) || 0;
      borderRight = parseInt(cs.borderRightWidth) || 0;
      paddingLeft = parseInt(cs.paddingLeft) || 0;
      paddingRight = parseInt(cs.paddingRight) || 0;
      return el.offsetWidth - borderLeft - borderRight - paddingLeft - paddingRight;
    };
    __height_ie = function(el, height) {
      var borderBottom, borderTop, cs, paddingBottom, paddingTop;
      if (arguments.length === 2) {
        el.style.height = height + 'px';
        return;
      }
      cs = el.currentStyle;
      borderTop = parseInt(cs.borderTopWidth) || 0;
      borderBottom = parseInt(cs.borderBottomWidth) || 0;
      paddingTop = parseInt(cs.paddingTop) || 0;
      paddingBottom = parseInt(cs.paddingBottom) || 0;
      return el.offsetHeight - borderTop - borderBottom - paddingTop - paddingBottom;
    };
    __width_other = function(el, width) {
      if (arguments.length === 2) {
        el.style.width = width + 'px';
        return;
      }
      return parseInt(document.defaultView.getComputedStyle(el, null).getPropertyValue('width'));
    };
    __height_other = function(el, height) {
      if (arguments.length === 2) {
        el.style.height = height + 'px';
        return;
      }
      return parseInt(document.defaultView.getComputedStyle(el, null).getPropertyValue('height'));
    };
    __position = function(el, clientAbs) {
      var box, de, l, t;
      if (el.parentNode === null || this.getStyle(el, 'display') === 'none') {
        return null;
      }
      box = el.getBoundingClientRect();
      l = box.left;
      t = box.top;
      if (UA.ie && UA.version === 7 && window === top) {
        l -= 2;
        t -= 2;
      }
      if (!clientAbs) {
        de = document.documentElement;
        l += de.scrollLeft;
        t += de.scrollTop;
      }
      return {
        left: l,
        top: t
      };
    };
    __position_op_webkit = function(el, clientAbs) {
      var cs, de, l, t;
      if (el.parentNode === null || this.getStyle(el, 'display') === 'none') {
        return null;
      }
      l = 0;
      t = 0;
      while (el) {
        l += el.offsetLeft || 0;
        t += el.offsetTop || 0;
        if (el.offsetParent === document.body && this.getStyle(el, 'position') === 'absolute') {
          break;
        }
        el = el.offsetParent;
        if (el) {
          cs = document.defaultView.getComputedStyle(el, null);
          l += parseInt(cs.getPropertyValue('border-left-width')) || 0;
          t += parseInt(cs.getPropertyValue('border-top-width')) || 0;
        }
      }
      if (clientAbs) {
        de = document.documentElement;
        l -= de.scrollLeft;
        t -= de.scrollTop;
      }
      return {
        left: l,
        top: t
      };
    };
    __opacity_ie = function(el, value) {
      var filter;
      if (arguments.length === 1) {
        if (el.filters.length === 0) {
          return 1;
        }
        filter = el.filters.item('alpha');
        if (!filter) {
          filter = el.filters.item('DXImageTransform.Microsoft.Alpha');
        }
        if (filter) {
          return filter.opacity / 100;
        } else {
          return 1;
        }
      } else {
        el.style.filter = "alpha(opacity=" + (value * 100) + ")";
        if (!el.currentStyle.hasLayout) {
          el.style.zoom = 1;
        }
      }
    };
    __opacity_other = function(el, value) {
      if (arguments.length === 1) {
        return document.defaultView.getComputedStyle(el, '').getPropertyValue('opacity');
      } else {
        el.style.opacity = value;
        el.style['-moz-opacity'] = value;
        return el.style['-khtml-opacity'] = value;
      }
    };
    __getStyle_ie = function(el, styleName) {
      if (styleName === 'opacity') {
        return this.opacity(el);
      } else {
        return el.currentStyle[styleName];
      }
    };
    __getStyle_other = function(el, styleName) {
      var value;
      if (styleName === 'opacity') {
        return this.opacity(el);
      }
      value = el.style[styleName];
      if (value) {
        return value;
      }
      return document.defaultView.getComputedStyle(el, '').getPropertyValue(j3.hyphenlize(styleName));
    };
    __clientWidth_ie = function(wnd) {
      if (wnd == null) {
        wnd = window;
      }
      return wnd.document.documentElement.clientWidth;
    };
    __clientHeight_ie = function(wnd) {
      if (wnd == null) {
        wnd = window;
      }
      return wnd.document.documentElement.clientHeight;
    };
    __clientWidth_opera = function(wnd) {
      if (wnd == null) {
        wnd = window;
      }
      return wnd.document.body.clientWidth;
    };
    __clientWidth_gecko = function(wnd) {
      if (wnd == null) {
        wnd = window;
      }
      return wnd.innerWidth;
    };
    __clientHeight_gecko = __clientHeight_opera = function(wnd) {
      if (wnd == null) {
        wnd = window;
      }
      return wnd.innerHeight;
    };
    if (UA.ie) {
      j3.ext(Dom, {
        clientWidth: __clientWidth_ie,
        clientHeight: __clientHeight_ie,
        width: __width_ie,
        height: __height_ie,
        position: __position,
        getStyle: __getStyle_ie,
        opacity: __opacity_ie
      });
    } else {
      if (UA.gecko) {
        j3.ext(Dom, {
          clientWidth: __clientWidth_gecko,
          clientHeight: __clientHeight_gecko,
          position: __position
        });
      } else {
        j3.ext(Dom, {
          clientWidth: __clientWidth_opera,
          clientHeight: __clientHeight_opera,
          position: __position_op_webkit
        });
      }
      j3.ext(Dom, {
        width: __width_other,
        height: __height_other,
        getStyle: __getStyle_other,
        opacity: __opacity_other
      });
    }
    if (UA.ie && UA.version >= 8 && Dom.position(document.documentElement).left === 2) {
      UA.version = 7;
    }
    return Dom;
  })();

  (function() {
    var Path;
    return j3.Path = Path = {
      normalize: function(path) {
        if (!path) {
          return '';
        }
        path = path.replace(/\\/gi, '/');
        return path = path.replace(/\/\//gi, '/');
      },
      basename: function(path, ext) {
        var basename, posSlash;
        path = this.normalize(path);
        if (j3.endsWith(path, '/')) {
          path = path.substr(0, path.length - 1);
        }
        posSlash = path.lastIndexOf('/');
        if (posSlash === -1) {
          basename = path;
        } else {
          basename = path.substr(posSlash + 1);
        }
        if (j3.endsWith(basename, ext)) {
          basename = basename.substr(0, basename.length - ext.length);
        }
        return basename;
      },
      extname: function(path) {
        var posDot;
        posDot = path.lastIndexOf('.');
        if (posDot === -1 || posDot === (path.length - 1)) {
          return '';
        }
        return path.substr(posDot);
      }
    };
  })();

  (function(j3) {
    var Event, __detachEvent, _handlerInfoList, _readyHandlerList;
    if (j3.isRunInServer()) {
      return;
    }
    Event = function(event) {
      this.event = event;
    };
    j3.ext(Event.prototype, {
      keyCode: function() {
        return this.event.keyCode;
      }
    });
    if (j3.UA.ie) {
      j3.ext(Event.prototype, {
        src: function() {
          return this.event.srcElement;
        },
        button: function() {
          switch (this.event.button) {
            case 1:
              return 1;
            case 2:
              return 3;
            case 4:
              return 2;
            default:
              return 0;
          }
        },
        leftButton: function() {
          return this.event.button === 1;
        },
        rightButton: function() {
          return this.event.button === 2;
        },
        middleButton: function() {
          return this.event.button === 4;
        },
        pageX: function() {
          return this.event.clientX + document.documentElement.scrollLeft;
        },
        pageY: function() {
          return this.event.clientY + document.documentElement.scrollTop;
        },
        stop: function() {
          this.event.returnValue = false;
          this.event.cancelBubble = true;
          this.event.preventDefault && this.event.preventDefault();
          return this.event.stopPropagation && this.event.stopPropagation();
        }
      });
    } else {
      j3.ext(Event.prototype, {
        src: function() {
          return this.event.target;
        },
        button: function() {
          return this.event.which;
        },
        leftButton: function() {
          return this.event.which === 1;
        },
        rightButton: function() {
          return this.event.which === 3;
        },
        middleButton: function() {
          return this.event.which === 2;
        },
        pageX: function() {
          return this.event.pageX;
        },
        pageY: function() {
          return this.event.pageY;
        },
        stop: function() {
          this.event.preventDefault();
          return this.event.stopPropagation();
        }
      });
    }
    _handlerInfoList = new j3.List;
    _readyHandlerList = new j3.List;
    __detachEvent = function(handlerInfo) {
      var el, eventName;
      el = handlerInfo.e;
      eventName = handlerInfo.n;
      if (el.removeEventListener) {
        el.removeEventListener(eventName, handlerInfo.f, true);
      } else {
        el.detachEvent(eventName, handlerInfo.f);
      }
      delete handlerInfo.e;
      delete handlerInfo.h;
      delete handlerInfo.f;
    };
    j3.on = function(el, eventName, context, handler) {
      var handlerInfo;
      if (el.on === j3.EventManager.on) {
        return el.on(eventName, context, handler);
      }
      if (arguments.length === 3) {
        handler = context;
      }
      handlerInfo = {
        e: el,
        n: eventName,
        h: handler,
        c: context,
        f: function() {
          return handler.call(context, new Event(arguments[0]));
        }
      };
      _handlerInfoList.insert(handlerInfo);
      if (el.addEventListener) {
        el.addEventListener(eventName, handlerInfo.f, true);
      } else {
        el.attachEvent('on' + eventName, handlerInfo.f);
      }
    };
    j3.un = function(el, eventName, context, handler) {
      var info, node;
      if (el.un === j3.EventManager.on) {
        return el.un(eventName, context, handler);
      }
      if (arguments.length === 3) {
        handler = context;
      }
      node = _handlerInfoList.firstNode();
      while (node) {
        info = node.value;
        if (info.e === el && info.n === eventName && info.h === handler && info.c === context) {
          if (el.removeEventListener) {
            el.removeEventListener(eventName, info.h, true);
          } else {
            el.dettachEvent('on' + eventName, info.h);
          }
          break;
        }
        node = node.next;
      }
      if (!node) {
        return;
      }
      __detachEvent(node.value);
      _handlerInfoList.removeNode(node);
    };
    j3.ready = function(context, handler) {
      var f;
      f = arguments.length === 1 ? context : function() {
        return handler.call(context, arguments[0]);
      };
      return _readyHandlerList.insert(f);
    };
    j3.on(window, 'load', function() {
      var node;
      node = _readyHandlerList.firstNode();
      while (node) {
        node.value();
        node = node.next;
      }
    });
    return j3.on(window, 'unload', function() {
      var handlerInfo, node, _results;
      node = _handlerInfoList.firstNode();
      _results = [];
      while (node) {
        handlerInfo = node.value;
        __detachEvent(handlerInfo);
        _results.push(node = node.next);
      }
      return _results;
    });
  })(j3);

  (function(j3) {
    var Drag, __beginDrag, __body_keydown, __body_mousemove, __body_mouseup, __cancelDrag, __cleanupDrag, __trigger_mousedown;
    j3.Drag = Drag = j3.cls({
      ctor: function(options) {
        this._el = j3.$(options.el);
        this._offsetX = options.offsetX || 0;
        this._offsetY = options.offsetY || 0;
        this._direction = options.direction || 3;
        this._invalidTriggerTypes = options.invalidTriggerTypes;
        this.setTrigger(options.trigger || options.el);
      },
      getTrigger: function() {
        return this._elTrigger;
      },
      setTrigger: function(trigger) {
        trigger = j3.$(trigger);
        if (this._elTrigger) {
          j3.un(this._elTrigger, 'mousedown', this, __trigger_mousedown);
        }
        if (trigger) {
          j3.on(trigger, 'mousedown', this, __trigger_mousedown);
        }
        return this._elTrigger = trigger;
      },
      getEl: function() {
        return this._el;
      },
      getIndicator: function() {
        return this._el;
      },
      getStartX: function() {
        return this._startX;
      },
      getStartY: function() {
        return this._startY;
      },
      getCurX: function() {
        return this._curX;
      },
      getCurY: function() {
        return this._curY;
      },
      getStartPosX: function() {
        return this._startPosX;
      },
      getStartPosY: function() {
        return this._startPosY;
      },
      getDragRect: function() {
        var deltaX, deltaY, left, top;
        deltaX = this._curX - this._startX;
        deltaY = this._curY - this._startY;
        if (deltaX < 0) {
          left = this._startX + deltaX;
        } else {
          left = this._startX;
        }
        if (deltaY < 0) {
          top = this._startY + deltaY;
        } else {
          top = this._startY;
        }
        return {
          left: left,
          top: top,
          width: Math.abs(deltaX),
          height: Math.abs(deltaY)
        };
      },
      onDrag: function() {
        return j3.Dom.place(this.getIndicator(), this._curPosX, this._curPosY);
      },
      getDisabled: function() {
        return this._disabled;
      },
      setDisabled: function(value) {
        return this._disabled = !!value;
      }
    });
    j3.ext(Drag.prototype, j3.EventManager);
    __trigger_mousedown = function(evt) {
      var body,
        _this = this;
      if (this._disabled) {
        return;
      }
      this._dragTrigger = evt.src();
      if (j3.include(this._invalidTriggerTypes, this._dragTrigger.tagName, ',')) {
        return;
      }
      this._startX = this._curX = evt.pageX();
      this._startY = this._curY = evt.pageY();
      body = document.body;
      j3.on(body, 'keydown', this, __body_keydown);
      j3.on(body, 'mousemove', this, __body_mousemove);
      j3.on(body, 'mouseup', this, __body_mouseup);
      return this._beginDragTimeout = setTimeout(function() {
        return __beginDrag.call(_this);
      }, 2000);
    };
    __beginDrag = function() {
      var args, body, pos;
      args = {
        trigger: this._dragTrigger,
        result: true
      };
      this.beforeDrag && this.beforeDrag(args);
      if (!args.result) {
        return;
      }
      this.fire('beforeDrag', this, args);
      if (!args.result) {
        return;
      }
      pos = j3.Dom.position(this._el);
      this._curPosX = this._startPosX = pos.left + this._offsetX;
      this._curPosY = this._startPosY = pos.top + this._offsetY;
      body = document.body;
      this._oldSelectStart = body.onselectstart;
      body.onselectstart = j3.fnRetFalse;
      j3.Dom.addCls(body, 'selectDisabled');
      this.onDragStart && this.onDragStart();
      this.fire('dragStart', this);
      return this._draging = true;
    };
    __cancelDrag = function() {
      __cleanupDrag.call(this);
      if (!this._draging) {
        return;
      }
      this.onDragCancel && this.onDragCancel();
      this.fire('dragCancel', this);
      return this._draging = false;
    };
    __body_mousemove = function(evt) {
      var direction;
      this._curX = evt.pageX();
      this._curY = evt.pageY();
      if (!this._draging) {
        if (Math.abs(this._curX - this._startX) > 5 || Math.abs(this._curY - this._startY) > 5) {
          clearTimeout(this._beginDragTimeout);
          __beginDrag.call(this);
        }
        return;
      }
      direction = this._direction;
      if (direction & 1) {
        this._curPosX = this._startPosX + this._curX - this._startX;
      }
      if (direction & 2) {
        this._curPosY = this._startPosY + this._curY - this._startY;
      }
      return this.onDrag();
    };
    __body_mouseup = function(evt) {
      __cleanupDrag.call(this);
      if (!this._draging) {
        return;
      }
      this.onDragEnd && this.onDragEnd();
      this.fire('dragEnd', this);
      return this._draging = false;
    };
    __body_keydown = function(evt) {
      if (evt.event.keyCode === 27) {
        return __cancelDrag.call(this);
      }
    };
    return __cleanupDrag = function() {
      var body;
      body = document.body;
      j3.un(body, 'mousemove', this, __body_mousemove);
      j3.un(body, 'mouseup', this, __body_mouseup);
      clearTimeout(this._beginDragTimeout);
      if (!this._draging) {
        return;
      }
      body.onselectstart = this._oldSelectStart;
      return j3.Dom.removeCls(body, 'selectDisabled');
    };
  })(j3);

  (function(j3) {
    var method, __doRequest, __getXHR, __parseResponse, __serializeBody, __serializeToFormUrlencoded, _contentTypes, _i, _len, _ref, _reqSeed, _results;
    if (j3.isRunInServer()) {
      return;
    }
    _reqSeed = 0;
    _contentTypes = {
      text: 'text/pain',
      json: 'application/json',
      form: 'application/x-www-form-urlencoded'
    };
    if (window.XMLHttpRequest) {
      __getXHR = function() {
        return new XMLHttpRequest;
      };
    } else {
      __getXHR = function() {
        return new ActiveXObject('MSXML2.XmlHttp');
      };
    }
    __serializeToFormUrlencoded = function(data, buffer) {
      var firstItem, name, value;
      if (!data) {
        return;
      }
      firstItem = true;
      for (name in data) {
        value = data[name];
        if (data.hasOwnProperty(name)) {
          if (j3.isNull(value) || j3.isUndefined(value)) {
            continue;
          }
          if (!firstItem) {
            buffer.append('&');
          } else {
            firstItem = false;
          }
          buffer.append(encodeURIComponent(name));
          buffer.append('=');
          buffer.append(encodeURIComponent(value));
        }
      }
    };
    __serializeBody = function(buffer, data, dataType) {
      switch (dataType) {
        case 'text':
          buffer.append(data);
          break;
        case 'json':
          j3.toJson(data, buffer);
          break;
        default:
          __serializeToFormUrlencoded(data, buffer);
      }
    };
    __parseResponse = function(xhr) {
      var contentType;
      contentType = xhr.getResponseHeader('Content-Type');
      if (!contentType) {
        contentType = '';
      }
      if (contentType.indexOf('application/json' === 0)) {
        return j3.fromJson(xhr.responseText);
      }
      return xhr.responseText;
    };
    __doRequest = function(req) {
      var async, buffer, headers, name, querySb, url, xhr;
      xhr = __getXHR();
      url = req.url;
      if (!url) {
        url = location.href;
      }
      async = req.async !== false;
      if (j3.UA.ie && req.method === 'GET') {
        if (url.indexOf('?') === -1) {
          url += '?';
        } else {
          url += '&';
        }
        url += '_j3ts=' + (new Date().getTime()) + (_reqSeed++);
      }
      if (req.method === 'POST') {
        if (!req.headers) {
          req.headers = {};
        }
        req.headers['Cache-Control'] = 'no-cache';
      }
      if (req.method === 'GET' && req.data) {
        querySb = new j3.StringBuilder;
        __serializeToFormUrlencoded(req.data, querySb);
        if (url.indexOf('?') === -1) {
          url += '?' + querySb.toString();
        } else {
          url += '&' + querySb.toString();
        }
      }
      xhr.open(req.method, url, async, req.username, req.password);
      headers = req.headers;
      xhr.setRequestHeader('Content-Type', _contentTypes[req.dataType] || _contentTypes.form);
      if (headers) {
        for (name in headers) {
          if (headers.hasOwnProperty(name)) {
            xhr.setRequestHeader(name, headers[name]);
          }
        }
      }
      if (async) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState !== 4) {
            return;
          }
          return req.callback && req.callback.call(req.context, xhr, __parseResponse(xhr), req.args);
        };
      }
      if (req.method === 'GET' || !req.data) {
        xhr.send('');
      } else {
        buffer = new j3.StringBuilder;
        __serializeBody(buffer, req.data, req.dataType);
        xhr.send(buffer.toString());
      }
      return xhr;
    };
    _ref = ['GET', 'POST', 'PUT', 'DELETE'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      _results.push(j3[method.toLowerCase()] = (function(method) {
        return function() {
          var args, callback, context, data, options, url;
          url = arguments[0];
          if (j3.isObject(url)) {
            options = url;
          } else {
            options = {};
            if (arguments.length === 3) {
              context = arguments[1];
              callback = arguments[2];
              data = null;
            } else if (arguments.length === 4) {
              data = arguments[1];
              context = arguments[2];
              callback = arguments[3];
            } else if (arguments.length === 5) {
              data = arguments[1];
              context = arguments[2];
              args = arguments[3];
              callback = arguments[4];
            }
            options.method = method;
            options.data = data;
            options.dataType = 'json';
            options.url = url;
            options.callback = callback;
            options.context = context;
            options.args = args;
          }
          return __doRequest(options);
        };
      })(method));
    }
    return _results;
  })(j3);

  j3.DataItemsView = {
    getItemsDatasource: function() {
      return this._itemsDatasource;
    },
    setItemsDatasource: function(datasource) {
      if (this._itemsDatasource === datasource) {
        return;
      }
      this._itemsDatasource = datasource;
      if (datasource) {
        return datasource.bind(this, this.updateViewItems);
      }
    },
    updateViewItems: function(datasource, eventName, args) {
      if (this._updatingViewItems) {
        return;
      }
      this._updatingViewItems = true;
      this.onUpdateViewItems && this.onUpdateViewItems(datasource, eventName, args);
      return this._updatingViewItems = false;
    }
  };

  (function(j3) {
    var _MIN_OVERLAY_Z_INDEX, __doResize, __resizeOverlay, _elOverlay, _zIdxOverlay;
    _elOverlay = null;
    _MIN_OVERLAY_Z_INDEX = 2300;
    _zIdxOverlay = _MIN_OVERLAY_Z_INDEX;
    __doResize = function() {
      var Dom, s;
      Dom = j3.Dom;
      s = _elOverlay.style;
      s.width = Dom.pageWidth() + 'px';
      return s.height = Dom.pageHeight() + 'px';
    };
    __resizeOverlay = function() {
      var Dom, s;
      Dom = j3.Dom;
      s = _elOverlay.style;
      s.width = Dom.clientWidth() + 'px';
      s.height = Dom.clientHeight() + 'px';
      return setTimeout(__doResize, 0);
    };
    return j3.Overlay = {
      show: function() {
        var s;
        if (!_elOverlay) {
          _elOverlay = j3.Dom.create('div');
          document.body.appendChild(_elOverlay);
          s = _elOverlay.style;
          s.background = '#000';
          s.position = 'absolute';
          s.top = '0';
          s.left = '0';
          j3.Dom.opacity(_elOverlay, 0.3);
          j3.on(window, 'resize', __resizeOverlay);
        }
        _zIdxOverlay += 2;
        s = _elOverlay.style;
        s.zIndex = _zIdxOverlay;
        if (_zIdxOverlay === _MIN_OVERLAY_Z_INDEX + 2) {
          s.display = 'block';
          __resizeOverlay();
        }
        return _zIdxOverlay;
      },
      hide: function() {
        var s;
        if (!_elOverlay) {
          return;
        }
        if (_zIdxOverlay === _MIN_OVERLAY_Z_INDEX) {
          return;
        }
        _zIdxOverlay -= 2;
        s = _elOverlay.style;
        if (_zIdxOverlay === _MIN_OVERLAY_Z_INDEX) {
          s.width = '0';
          s.height = '0';
          s.display = 'none';
        } else {
          s.zIndex = _zIdxOverlay;
        }
        return _zIdxOverlay;
      }
    };
  })(j3);

  j3.View = (function(j3) {
    var view, __relayout, __resize, __setHeight, __setWidth, __viewCreated, __viewLoad, _creatingStack, _idSeed, _lastClientHeight, _lastClientWidth, _needRelayout, _relayoutTimout, _relayouting, _topViews, _views;
    _idSeed = 0;
    _creatingStack = 0;
    _views = {};
    _topViews = {};
    j3.getView = function(id) {
      return _views[id];
    };
    __viewCreated = function() {
      var node, options;
      if (!this.el) {
        this.el = j3.$(this.id);
      }
      if (this.children) {
        node = this.children.firstNode();
        while (node) {
          __viewCreated.call(node.value);
          node = node.next;
        }
      }
      options = this._options;
      this.onCreated && this.onCreated(options);
      options.on && this.on(options.on);
    };
    __viewLoad = function() {
      var node;
      if (this.children) {
        node = this.children.firstNode();
        while (node) {
          __viewLoad.call(node.value);
          node = node.next;
        }
      }
      this.onLoad && this.onLoad(this._options);
      delete this._options;
    };
    view = j3.cls({
      template: j3.template('<div id="<%=id%>" class="<%=css%>"></div>'),
      ctor: function(options) {
        var buffer, defaultOptions, optName, optValue;
        _creatingStack++;
        if (options == null) {
          options = {};
        }
        this._options = options;
        if (options.id) {
          _views[options.id] = this;
        }
        this.el = options.el;
        this.id = options.id || ('v_' + (++_idSeed));
        if (!j3.isUndefined(options.name)) {
          this.name = options.name;
        }
        this.parent = options.parent;
        this.page = options.page || (this.parent && this.parent.getPage()) || null;
        this.ctnr = j3.$(options.ctnr);
        if (!this.ctnr && this.parent) {
          this.ctnr = this.parent.getBody();
        }
        if (!this.ctnr) {
          this.ctnr = document.body;
        }
        if (this.defaultOptions) {
          defaultOptions = this.defaultOptions();
          for (optName in defaultOptions) {
            optValue = defaultOptions[optName];
            if (!options.hasOwnProperty(optName)) {
              options[optName] = optValue;
            }
          }
        }
        if (!this.baseCss) {
          this.baseCss = '';
        }
        if (options.css) {
          this.css = options.css;
        }
        this.onInit && this.onInit(options);
        if (!j3.isUndefined(options.width)) {
          this._width = parseInt(options.width);
        }
        if (!j3.isUndefined(options.height)) {
          this._height = parseInt(options.height);
        }
        if (!j3.isUndefined(options.minWidth)) {
          this._minWidth = parseInt(options.minWidth);
        }
        if (!j3.isUndefined(options.maxWidth)) {
          this._maxWidth = parseInt(options.maxWidth);
        }
        if (!j3.isUndefined(options.maxHeight)) {
          this._maxHeight = parseInt(options.maxHeight);
        }
        if (!j3.isUndefined(options.minHeight)) {
          this._minHeight = parseInt(options.minHeight);
        }
        this._fill = parseInt(options.fill) || 0;
        this.innerHTML = options.innerHTML;
        this.createChildren && this.createChildren(options);
        _creatingStack--;
        if (!this.parent || _creatingStack === 0) {
          if (!this.el) {
            buffer = new j3.StringBuilder;
            this.render(buffer);
            j3.Dom.append(this.ctnr, buffer.toString());
          }
          __viewCreated.call(this);
          this.layout();
        }
        if (this.parent) {
          this.parent.getChildren().insert(this);
        } else {
          _topViews[this.id] = this;
        }
        if (!this.parent || _creatingStack === 0) {
          __viewLoad.call(this);
        }
      },
      render: function(buffer) {
        var ret;
        ret = !buffer;
        if (ret) {
          buffer = new j3.StringBuilder;
        }
        this.onRender(buffer, this.getTemplateData());
        if (ret) {
          return buffer.toString();
        }
      },
      onRender: function(buffer, data) {
        buffer.append(this.template(data));
      },
      getCss: function() {
        if (this.css) {
          if (this.baseCss) {
            return this.baseCss + ' ' + this.css;
          } else {
            return this.css;
          }
        } else {
          return this.baseCss;
        }
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss(),
          baseCss: this.baseCss,
          view: this
        };
      },
      getChildren: function() {
        if (!this.children) {
          this.children = new j3.List;
        }
        return this.children;
      },
      getChildByName: function(name) {
        if (!this.children) {
          return null;
        }
        return this.children.tryUntil(function(child) {
          return child.name === name;
        });
      },
      addChild: function(child) {
        return this.getChildren().insert(child);
      },
      createChildren: function(options) {
        var args, eachOption, i, lastIndex, _i, _len, _ref;
        if (!options.children) {
          return;
        }
        lastIndex = options.children.length - 1;
        _ref = options.children;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          eachOption = _ref[i];
          args = {
            index: i,
            first: i === 0,
            last: i === lastIndex
          };
          eachOption.parent = this;
          this.createChild(eachOption, args);
        }
      },
      createChild: function(options, args) {
        var child;
        this.onCreateChild && this.onCreateChild(options, args);
        if (!j3.isFunction(options.cls)) {
          return;
        }
        child = new options.cls(options);
        return this.onChildCreated && this.onChildCreated(child, args, options);
      },
      getBody: function() {
        return this.elBody || this.el;
      },
      layout: function() {
        var canLayout, parentNode, rect;
        if (this._layouting) {
          return;
        }
        parentNode = this.el.parentNode;
        if (!parentNode) {
          return;
        }
        canLayout = true;
        this.canLayout && (canLayout = this.canLayout());
        if (!canLayout) {
          return;
        }
        this.beforeLayout && this.beforeLayout();
        this._layouting = true;
        if (parentNode === document.body) {
          rect = {
            width: this._fill & 1 ? j3.Dom.clientWidth() : this._width,
            height: this._fill & 2 ? j3.Dom.clientHeight() : this._height
          };
        } else {
          rect = {
            width: this._fill & 1 ? j3.Dom.width(parentNode) : this._width,
            height: this._fill & 2 ? j3.Dom.height(parentNode) : this._height
          };
        }
        if (typeof this.onMeasure === "function") {
          this.onMeasure(rect);
        }
        this.fire('measure', this, rect);
        __setWidth.call(this, rect.width);
        __setHeight.call(this, rect.height);
        this.onLayout && this.onLayout(rect);
        this.layoutChildren();
        this._layouting = false;
      },
      layoutChildren: function() {
        var node;
        if (!this.children) {
          return;
        }
        node = this.children.firstNode();
        while (node) {
          node.value.layout();
          node = node.next;
        }
      },
      width: function(width, delayLayout) {
        if (arguments.length === 0) {
          return this._width;
        }
        this._width = width;
        if (this._fill & 1) {
          return;
        }
        this.onSetWidth(width);
        if (!delayLayout) {
          return this.layoutChildren();
        }
      },
      height: function(height, delayLayout) {
        if (arguments.length === 0) {
          return this._height;
        }
        this._height = height;
        if (this._fill & 2) {
          return;
        }
        this.onSetHeight(height);
        if (!delayLayout) {
          return this.layoutChildren();
        }
      },
      onSetWidth: function(width) {
        return j3.Dom.offsetWidth(this.el, width);
      },
      onSetHeight: function(height) {
        return j3.Dom.offsetHeight(this.el, height);
      },
      getFill: function() {
        return this._fill;
      },
      show: function() {
        this._hidden = false;
        return j3.Dom.show(this.el);
      },
      hide: function() {
        this._hidden = true;
        return j3.Dom.hide(this.el);
      },
      getVisible: function() {
        return !this._hidden;
      },
      setVisible: function(value) {
        if (value) {
          return this.show();
        } else {
          return this.hide();
        }
      },
      toggleVisible: function() {
        return this.setVisible(!this.getVisible());
      },
      getPage: function() {
        return this.page || (this.parent && this.parent.getPage());
      },
      notifyMessage: function(name, sender, args) {
        var page;
        page = this.getPage();
        if (page) {
          return page(name, sender, args);
        }
      },
      destory: function() {
        this.onDestory && this.onDestory();
        this.destoryChildren();
        if (this.parent) {
          this.parent.getChildren().remove(this);
        }
        if (this.el) {
          return j3.Dom.remove(this.el);
        }
      },
      destoryChildren: function() {
        var node;
        if (!this.children) {
          return;
        }
        node = this.children.firstNode();
        while (node) {
          node.value.destory();
          node = node.next;
        }
      }
    });
    j3.ext(view.prototype, j3.EventManager);
    __setWidth = function(width) {
      if (this._maxWidth && width > this._maxWidth) {
        width = this._maxWidth;
      }
      if (this._minWidth && width < this._minWidth) {
        width = this._minWidth;
      }
      this.onSetWidth(width);
    };
    __setHeight = function(height) {
      if (this._maxHeight && height > this._maxHeight) {
        height = this._maxHeight;
      }
      if (this._minHeight && height < this._minHeight) {
        height = this._minHeight;
      }
      return this.onSetHeight(height);
    };
    _relayouting = false;
    _needRelayout = false;
    _lastClientWidth = 0;
    _lastClientHeight = 0;
    _relayoutTimout = null;
    __resize = function(evt) {
      var Dom, ch, cw;
      if (_relayouting) {
        _needRelayout = true;
        return;
      }
      Dom = j3.Dom;
      cw = Dom.clientWidth();
      ch = Dom.clientHeight();
      if (cw === _lastClientWidth && ch === _lastClientHeight) {
        return;
      }
      _lastClientWidth = cw;
      _lastClientHeight = ch;
      clearTimeout(_relayoutTimout);
      return _relayoutTimout = setTimeout(__relayout, 100);
    };
    __relayout = function() {
      var Dom, ch, cw, id;
      Dom = j3.Dom;
      cw = Dom.clientWidth();
      ch = Dom.clientHeight();
      _relayouting = true;
      for (id in _topViews) {
        view = _topViews[id];
        view.layout();
      }
      _relayouting = false;
      if (_needRelayout) {
        return __resize();
      }
    };
    j3.on(window, 'resize', __resize);
    view.genId = function() {
      return 'v_' + (++_idSeed);
    };
    view.focusChild = function() {
      if (!this.children) {
        return false;
      }
      return this.children.tryUntil(function(child) {
        return child.focus && child.focus();
      });
    };
    return view;
  })(j3);

  (function(j3) {
    var __isChildElement, _curPopups;
    if (j3.isRunInServer()) {
      return;
    }
    _curPopups = {};
    __isChildElement = function(parents, child) {
      if (j3.isArray(parents)) {
        while (child) {
          if (__indexOf.call(parents, child) >= 0) {
            return true;
          }
          child = child.parentNode;
        }
      } else {
        while (child) {
          if (child === parents) {
            return true;
          }
          child = child.parentNode;
        }
      }
      return false;
    };
    j3.regPopup = function(obj, name, trigger) {
      var curPopup;
      if (name == null) {
        name = '';
      }
      curPopup = _curPopups[name];
      if (curPopup) {
        if (curPopup.view === obj) {
          return;
        }
        curPopup.view.close();
      }
      return _curPopups[name] = {
        view: obj,
        trigger: trigger
      };
    };
    j3.unregPopup = function(obj, name) {
      var curPopup;
      if (name == null) {
        name = '';
      }
      curPopup = _curPopups[name];
      if (curPopup && curPopup.view === obj) {
        return delete _curPopups[name];
      }
    };
    return j3.on(document.body, 'mousedown', function(evt) {
      var inside, name, parentEls, popup, src;
      src = evt.src();
      for (name in _curPopups) {
        popup = _curPopups[name];
        if (!popup) {
          continue;
        }
        parentEls = [popup.view.el];
        if (popup.trigger) {
          parentEls = parentEls.concat(popup.trigger);
        }
        inside = __isChildElement(parentEls, src);
        if (!inside) {
          popup.view.close();
          delete _curPopups[name];
        }
      }
    });
  })(j3);

  (function(j3) {
    return j3.HtmlView = j3.cls(j3.View, {
      baseCss: '',
      onInit: function(options) {
        this._tagName = options.tagName || 'div';
        this._selfClosing = !!options.selfClosing;
        this._attributes = options.attributes || {};
        return this._innerHTML = options.innerHTML;
      },
      onRender: function(sb) {
        var attrName, attrValue, css, _ref;
        sb.a('<' + this._tagName);
        sb.a(' id="' + this.id + '"');
        css = this.getCss();
        if (css) {
          sb.a(' class="' + this.css + '"');
        }
        _ref = this._attributes;
        for (attrName in _ref) {
          attrValue = _ref[attrName];
          sb.a(' ' + attrName + '="' + attrValue + '"');
        }
        if (this._selfClosing) {
          sb.a('/>');
          return;
        }
        sb.a('>');
        sb.a(this._innerHTML || '');
        return sb.a('</' + this._tagName + '>');
      }
    });
  })(j3);

  j3.ContainerView = j3.cls(j3.View, {
    templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>">'),
    templateEnd: j3.template('</div>'),
    onRender: function(buffer, data) {
      this.renderBegin(buffer, data);
      if (this.innerHTML) {
        buffer.append(this.innerHTML);
      } else {
        this.renderChildren(buffer);
      }
      return this.renderEnd(buffer, data);
    },
    renderBegin: function(buffer, data) {
      buffer.append(this.templateBegin(data));
    },
    renderEnd: function(buffer, data) {
      buffer.append(this.templateEnd(data));
    },
    renderChildren: function(buffer) {
      var node;
      if (!this.children) {
        return;
      }
      node = this.children.firstNode();
      while (node) {
        node.value.render(buffer);
        node = node.next;
      }
    }
  });

  (function(j3) {
    var __elListItem_click, __el_click, __fireCommand, __getDataItemByIndex, __refreshActiveAndSelectedItemEl, __refreshListItemSelecteStates, __setSelectedIndex, __toggleSelectedIndex, __updateSelectedItems;
    __el_click = function(evt) {
      var cmd, el, elListItem, src;
      el = src = evt.src();
      elListItem = null;
      while (el && el !== this.el) {
        cmd = j3.Dom.data(el, 'cmd');
        if (cmd) {
          evt.stop();
          __fireCommand.call(this, cmd, el);
          return;
        }
        elListItem = el;
        el = el.parentNode;
      }
      if (elListItem && el === this.el) {
        return __elListItem_click.call(this, elListItem, src);
      }
    };
    __elListItem_click = function(el, src) {
      var args, data, indexOfListItem;
      indexOfListItem = j3.Dom.indexOf(el);
      data = __getDataItemByIndex.call(this, indexOfListItem);
      args = {
        data: data,
        src: src,
        index: indexOfListItem
      };
      this.beforeItemClick && this.beforeItemClick(args);
      if (args.stop) {
        return;
      }
      this.fire('beforeItemClick', this, args);
      if (args.stop) {
        return;
      }
      if (this._activeItemOnClick) {
        this.setActiveIndex(indexOfListItem);
      }
      if (this._checkable && this._checkItemOnClick) {
        this.toggleSelectedIndex(indexOfListItem, el);
      }
      if (this._selectItemOnClick) {
        __setSelectedIndex.call(this, indexOfListItem, el);
      }
      this.onItemClick && this.onItemClick(args);
      return this.fire('itemClick', this, args);
    };
    __fireCommand = function(name, src) {
      var args, data, el, elListItem;
      elListItem = null;
      el = src;
      while (el && el !== this.el) {
        elListItem = el;
        el = el.parentNode;
      }
      if (el === this.el) {
        data = __getDataItemByIndex.call(this, j3.Dom.indexOf(elListItem));
        args = {
          name: name,
          data: data,
          src: src
        };
        if (typeof this.onCommand === "function") {
          this.onCommand(args);
        }
        return this.fire('command', this, args);
      }
    };
    __toggleSelectedIndex = function(index, elListItem) {
      var Dom, args, css, dataItem;
      Dom = j3.Dom;
      args = {};
      css = 'list-item-checked';
      dataItem = __getDataItemByIndex.call(this, index);
      if (Dom.hasCls(elListItem, css)) {
        args.unselectedItems = [dataItem];
        Dom.removeCls(elListItem, css);
      } else {
        args.selectedItems = [dataItem];
        Dom.addCls(elListItem, css);
      }
      __updateSelectedItems.call(this, args.selectedItems, args.unselectedItems);
      return this.fire('selectedItemsChange', this, args);
    };
    __setSelectedIndex = function(index, elListItem) {
      var Dom, css;
      Dom = j3.Dom;
      css = 'list-item-checked';
      if (this._selectedItemEl) {
        Dom.removeCls(this._selectedItemEl, css);
      }
      Dom.addCls(elListItem, css);
      return this._selectedItemEl = elListItem;
    };
    __updateSelectedItems = function(selectedItems, unselectedItems) {
      var index, item, _i, _j, _len, _len1, _results;
      if (!this._selectedItems) {
        this._selectedItems = [];
      }
      if (selectedItems) {
        for (_i = 0, _len = selectedItems.length; _i < _len; _i++) {
          item = selectedItems[_i];
          index = j3.indexOf(this._selectedItems, item, this._itemDataEquals);
          if (index === -1) {
            this._selectedItems.push(item);
          }
        }
      }
      if (unselectedItems) {
        _results = [];
        for (_j = 0, _len1 = unselectedItems.length; _j < _len1; _j++) {
          item = unselectedItems[_j];
          index = j3.indexOf(this._selectedItems, item, this._itemDataEquals);
          if (index !== -1) {
            _results.push(this._selectedItems.splice(index, 1));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    __getDataItemByIndex = function(index) {
      var datasource;
      datasource = this.getDatasource();
      return this._itemDataSelector(datasource.getAt(index));
    };
    __refreshListItemSelecteStates = function() {
      var Dom, datasource, elListItem;
      if (!this.el) {
        return;
      }
      Dom = j3.Dom;
      elListItem = this.el.firstChild;
      datasource = this.getDatasource();
      return datasource.forEach(this, function(model) {
        var itemData;
        itemData = this._itemDataSelector(model);
        if (j3.indexOf(this._selectedItems, itemData, this._itemDataEquals) < 0) {
          Dom.removeCls(elListItem, 'list-item-checked');
        } else {
          Dom.addCls(elListItem, 'list-item-checked');
        }
        return elListItem = Dom.next(elListItem);
      });
    };
    __refreshActiveAndSelectedItemEl = function() {
      if (this._activeItemIndex === -1) {
        this._activeItemEl = null;
      } else {
        this._activeItemEl = j3.Dom.byIndex(this.el, this._activeItemIndex);
      }
      if (this._selectedItemIndex === -1) {
        return this._selectedItemEl = null;
      } else {
        return this._selectedItemEl = j3.Dom.byIndex(this.el, this._selectedItemIndex);
      }
    };
    j3.DataList = j3.cls(j3.View, {
      baseCss: 'data-list',
      onInit: function(options) {
        this._listItemRenderer = options.listItemRenderer;
        this._activeItemOnClick = options.activeItemOnClick;
        this._checkable = options.checkable;
        this._checkItemOnClick = !!options.checkItemOnClick;
        this._selectItemOnClick = !!options.selectedItemOnClick;
        this._itemDataSelector = j3.compileSelector(options.itemDataSelector);
        this._itemDataEquals = j3.compileEquals(options.itemDataEquals || ['id']);
        if (j3.isArray(options.selectedItems)) {
          return this._selectedItems = options.selectedItems;
        } else {
          return this._selectedItems = options.selectedItems || [];
        }
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._checkable ? ' data-list-checkable' : '')
        };
      },
      onRender: function(sb, tplData) {
        sb.a('<div id="' + tplData.id + '" class="' + tplData.css + '">');
        this.renderDataListItems(sb, this.getDatasource());
        return sb.a('</div>');
      },
      onCreated: function(options) {
        j3.on(this.el, 'click', this, __el_click);
        this.setDatasource(options.datasource);
        return __refreshActiveAndSelectedItemEl.call(this);
      },
      onUpdateView: function(datasource, eventName, data) {
        var buffer;
        if (!this.el) {
          return;
        }
        buffer = new j3.StringBuilder;
        this.renderDataListItems(buffer, this.getDatasource());
        this.el.innerHTML = buffer.toString();
        return __refreshActiveAndSelectedItemEl.call(this);
      },
      renderDataListItems: function(buffer, datasource) {
        var activeModel, count;
        this._activeItemIndex = -1;
        this._selectedItemIndex = -1;
        if (datasource) {
          activeModel = null;
          if (this._activeItemOnClick) {
            activeModel = datasource.getActive();
          }
          count = datasource.count();
          return datasource.forEach(this, function(model, args, index) {
            var dataListItem, isActive, isChecked;
            isActive = activeModel === model;
            if (isActive) {
              this._activeItemIndex = index;
            }
            isChecked = this.shouldListItemSelected(model);
            if (isChecked) {
              this._selectedItemIndex = index;
            }
            dataListItem = {
              index: index,
              count: count,
              data: model,
              active: isActive,
              checkable: this._checkable,
              checked: isChecked
            };
            return this.renderDataListItem(buffer, dataListItem);
          });
        }
      },
      renderDataListItem: function(buffer, dataListItem) {
        var itemCss;
        itemCss = 'list-item';
        if (dataListItem.index === 0) {
          itemCss += ' list-item-first';
        }
        if (dataListItem.index === (dataListItem.count - 1)) {
          itemCss += ' list-item-last';
        }
        if (dataListItem.index % 2) {
          itemCss += ' list-item-even';
        }
        if (dataListItem.active) {
          itemCss += ' list-item-active';
        }
        if (dataListItem.checked) {
          itemCss += ' list-item-checked';
        }
        if (dataListItem.count === 1) {
          itemCss += ' list-item-single';
        }
        buffer.append('<div class="' + itemCss + '">');
        this.onRenderDataListItem(buffer, dataListItem);
        return buffer.append('</div>');
      },
      onRenderDataListItem: function(buffer, dataListItem) {
        if (this._listItemRenderer) {
          return this._listItemRenderer(buffer, dataListItem, this);
        } else if (!j3.isUndefined(dataListItem.data)) {
          return buffer.e(dataListItem.data.toString());
        }
      },
      getActiveItem: function() {
        if (this._activeItemIndex === -1) {
          return null;
        }
        return __getDataItemByIndex.call(this, this._activeItemIndex);
      },
      getActiveIndex: function() {
        return this._activeItemIndex;
      },
      setActiveIndex: function(index) {
        var args, data, datasource;
        if (this._activeItemIndex === index) {
          return;
        }
        data = __getDataItemByIndex.call(this, index);
        args = {
          data: data,
          index: index
        };
        this.beforeActiveItem && this.beforeActiveItem(args);
        if (args.stop) {
          return;
        }
        this.fire('beforeActiveItem', this, args);
        if (args.stop) {
          return;
        }
        datasource = this.getDatasource();
        if (datasource) {
          datasource.setActive(datasource.getAt(index));
        }
        return this.fire('activeItemChange', this, args);
      },
      toggleSelectedIndex: function(index) {
        var elListItem;
        elListItem = j3.Dom.byIndex(this.el, index);
        return __toggleSelectedIndex.call(this, index, elListItem);
      },
      getSelectedItems: function() {
        return this._selectedItems;
      },
      getSelectedItem: function() {
        if (!this._selectedItems || this._selectedItems.length === 0) {
          return null;
        }
        return this._selectedItems[0];
      },
      setSelectedItems: function(value) {
        if (value && !j3.isArray(value)) {
          value = [value];
        }
        this._selectedItems = value;
        return __refreshListItemSelecteStates.call(this);
      },
      setSelectedItem: function(value) {
        if (value) {
          return this.setSelectedItems([value]);
        } else {
          return this.setSelectedItems(null);
        }
      },
      shouldListItemSelected: function(model) {
        var itemData;
        if (!this._selectedItems) {
          return;
        }
        itemData = this._itemDataSelector(model);
        return j3.indexOf(this._selectedItems, itemData, this._itemDataEquals) >= 0;
      },
      getActiveItemEl: function() {
        return this._activeItemEl;
      }
    });
    j3.ext(j3.DataList.prototype, j3.DataView);
    j3.DataList.render = function(sb, options) {
      var css;
      css = 'data-list';
      if (options.checkable) {
        css += ' data-list-checkable';
      }
      if (options.css) {
        css += ' ' + options.css;
      }
      sb.a('<div');
      if (options.id) {
        sb.a(' id="');
        sb.e(options.id);
        sb.a('"');
      }
      sb.a(' class="');
      sb.e(css);
      sb.a('">');
      j3.DataList.renderDataListItems(sb, options);
      return sb.a('</div>');
    };
    j3.DataList.renderDataListItems = function(sb, options) {
      var checkable, count, items;
      items = options.items;
      if (!items) {
        return;
      }
      count = j3.count(items);
      checkable = options.checkable;
      return j3.forEach(items, this, function(item, args, index) {
        var dataListItem;
        dataListItem = {
          index: index,
          count: count,
          data: item,
          checkable: checkable,
          contextData: options.contextData
        };
        return j3.DataList.renderDataListItem(sb, dataListItem, options);
      });
    };
    return j3.DataList.renderDataListItem = function(sb, dataListItem, options) {
      var itemCss;
      itemCss = 'list-item';
      if (dataListItem.index === 0) {
        itemCss += ' list-item-first';
      }
      if (dataListItem.index === (dataListItem.count - 1)) {
        itemCss += ' list-item-last';
      }
      if (dataListItem.index % 2) {
        itemCss += ' list-item-even';
      }
      if (dataListItem.active) {
        itemCss += ' list-item-active';
      }
      if (dataListItem.checked) {
        itemCss += ' list-item-checked';
      }
      if (dataListItem.count === 1) {
        itemCss += ' list-item-single';
      }
      sb.a('<div class="' + itemCss + '">');
      options.itemRenderer.call(options.context, sb, dataListItem);
      return sb.a('</div>');
    };
  })(j3);

  (function(j3) {
    var __commandArgs_getGroupData, __commandEl_click, __elListGroupChk_click, __elListGroupHeader_click, __elListItemChk_click, __elListItem_click, __el_click, __getGroupDataByListGroupEl, __getItemDataByListItemEl, __refreshList, __refreshListItemSelecteStates, __toggleSelectListGroup, __toggleSelectListItem, __updateSelectedGroups, __updateSelectedItems;
    __el_click = function(evt) {
      var Dom, cmd, el, elListItem;
      Dom = j3.Dom;
      el = evt.src();
      elListItem = null;
      while (el && el !== this.el) {
        cmd = Dom.data(el, 'cmd');
        if (cmd) {
          evt.stop();
          __commandEl_click.call(this, cmd, el);
          return;
        }
        if (el.className === 'list-item-chk') {
          __elListItemChk_click.call(this, el);
          return;
        }
        if (Dom.hasCls(el, 'list-item')) {
          __elListItem_click.call(this, el);
          return;
        }
        if (el.className === 'list-group-chk') {
          __elListGroupChk_click.call(this, el);
          return;
        }
        if (el.className === 'list-group-header') {
          __elListGroupHeader_click.call(this, el);
          return;
        }
        el = el.parentNode;
      }
    };
    __commandArgs_getGroupData = function() {
      var elGroup;
      elGroup = j3.Dom.parent(this.src, '.list-group');
      if (!elGroup) {
        return null;
      }
      return __getGroupDataByListGroupEl.call(this.sender, elGroup);
    };
    __commandEl_click = function(name, elCommand) {
      var Dom, args, data, el, elListItem;
      Dom = j3.Dom;
      elListItem = null;
      el = elCommand;
      while (el && el !== this.el) {
        if (Dom.hasCls(el, 'list-item')) {
          data = __getItemDataByListItemEl.call(this, el);
          break;
        }
        if (Dom.hasCls(el, 'list-group')) {
          data = __getGroupDataByListGroupEl.call(this, el);
          break;
        }
        el = el.parentNode;
      }
      args = {
        sender: this,
        name: name,
        data: data,
        src: elCommand,
        getGroupData: __commandArgs_getGroupData
      };
      if (typeof this.onCommand === "function") {
        this.onCommand(args);
      }
      return this.fire('command', this, args);
    };
    __elListItemChk_click = function(elListItemChk) {
      var elListItem;
      elListItem = j3.Dom.parent(elListItemChk, '.list-item');
      return __toggleSelectListItem.call(this, elListItem);
    };
    __elListItem_click = function(elListItem) {
      if (!this._itemCheckable || !this._checkItemOnClick) {
        return;
      }
      return __toggleSelectListItem.call(this, elListItem);
    };
    __elListGroupChk_click = function(elListGroupChk) {
      var elListGroup;
      elListGroup = j3.Dom.parent(elListGroupChk, '.list-group');
      return __toggleSelectListGroup.call(this, elListGroup);
    };
    __elListGroupHeader_click = function(elListGroupHeader) {
      var elListGroup;
      if (!this._groupCheckable || !this._checkGroupOnClick) {
        return;
      }
      elListGroup = j3.Dom.parent(elListGroupHeader, '.list-group');
      return __toggleSelectListGroup.call(this, elListGroup);
    };
    __toggleSelectListItem = function(elListItem) {
      var Dom, args, css, itemData;
      Dom = j3.Dom;
      args = {};
      css = 'list-item-checked';
      itemData = __getItemDataByListItemEl.call(this, elListItem);
      if (Dom.hasCls(elListItem, css)) {
        args.unselectedItems = [itemData];
        Dom.removeCls(elListItem, css);
      } else {
        args.selectedItems = [itemData];
        Dom.addCls(elListItem, css);
      }
      __updateSelectedItems.call(this, args.selectedItems, args.unselectedItems);
      __refreshListItemSelecteStates.call(this);
      return this.fire('selectedItemsChange', this, args);
    };
    __updateSelectedItems = function(selectedItems, unselectedItems) {
      var index, item, _i, _j, _len, _len1;
      if (!this._selectedItems) {
        this._selectedItems = [];
      }
      if (selectedItems) {
        for (_i = 0, _len = selectedItems.length; _i < _len; _i++) {
          item = selectedItems[_i];
          index = j3.indexOf(this._selectedItems, item, this._itemDataEquals);
          if (index === -1) {
            this._selectedItems.push(item);
          }
        }
      }
      if (unselectedItems) {
        for (_j = 0, _len1 = unselectedItems.length; _j < _len1; _j++) {
          item = unselectedItems[_j];
          index = j3.indexOf(this._selectedItems, item, this._itemDataEquals);
          if (index !== -1) {
            this._selectedItems.splice(index, 1);
          }
        }
      }
    };
    __refreshListItemSelecteStates = function() {
      var Dom, elList, elListGroup, elListItem, itemData, _results;
      if (!this.el) {
        return;
      }
      Dom = j3.Dom;
      elListGroup = this.el.firstChild;
      _results = [];
      while (elListGroup) {
        elList = elListGroup.lastChild;
        elListItem = elList.firstChild;
        while (elListItem) {
          itemData = __getItemDataByListItemEl.call(this, elListItem);
          if (j3.indexOf(this._selectedItems, itemData, this._itemDataEquals) < 0) {
            Dom.removeCls(elListItem, 'list-item-checked');
          } else {
            Dom.addCls(elListItem, 'list-item-checked');
          }
          elListItem = Dom.next(elListItem);
        }
        _results.push(elListGroup = Dom.next(elListGroup));
      }
      return _results;
    };
    __toggleSelectListGroup = function(elListGroup) {
      var Dom, args, css, groupData;
      Dom = j3.Dom;
      args = {};
      css = 'list-group-checked';
      groupData = __getGroupDataByListGroupEl.call(this, elListGroup);
      if (Dom.hasCls(elListGroup, css)) {
        args.unselectedGroups = [groupData];
        Dom.removeCls(elListGroup, css);
      } else {
        args.selectedGroups = [groupData];
        Dom.addCls(elListGroup, css);
      }
      __updateSelectedGroups.call(this, args.selectedGroups, args.unselectedGroups);
      return this.fire('selectedGroupsChange', this, args);
    };
    __updateSelectedGroups = function(selectedGroups, unselectedGroups) {
      var group, index, _i, _j, _len, _len1;
      if (!this._selectedGroups) {
        this._selectedGroups = [];
      }
      if (selectedGroups) {
        for (_i = 0, _len = selectedGroups.length; _i < _len; _i++) {
          group = selectedGroups[_i];
          index = j3.indexOf(this._selectedGroups, group, this._groupDataEquals);
          if (index === -1) {
            this._selectedGroups.push(group);
          }
        }
      }
      if (unselectedGroups) {
        for (_j = 0, _len1 = unselectedGroups.length; _j < _len1; _j++) {
          group = unselectedGroups[_j];
          index = j3.indexOf(this._selectedGroups, group, this._groupDataEquals);
          if (index !== -1) {
            this._selectedGroups.splice(index, 1);
          }
        }
      }
    };
    __getItemDataByListItemEl = function(elListItem) {
      return this._itemDataSelector(this.getDatasource().getById(j3.Dom.data(elListItem, 'id')));
    };
    __getGroupDataByListGroupEl = function(elListGroup) {
      return this._groupDataSelector(this.getDatasource().getGroupById(j3.Dom.data(elListGroup, 'id')));
    };
    __refreshList = function() {
      var buffer;
      if (!this.el) {
        return;
      }
      buffer = new j3.StringBuilder;
      this.renderDataListGroups(buffer, this.getDatasource());
      return this.el.innerHTML = buffer.toString();
    };
    j3.GroupedDataList = j3.cls(j3.View, {
      baseCss: 'data-list-groups',
      onInit: function(options) {
        this._listCss = options.listCss;
        this._itemRenderer = options.itemRenderer;
        this._activeItemOnClick = options.activeItemOnClick;
        this._itemCheckable = options.itemCheckable;
        this._checkItemOnClick = !!options.checkItemOnClick;
        this._itemIdName = options.itemIdName || 'id';
        this._itemDataSelector = j3.compileSelector(options.itemDataSelector || this._itemIdName);
        this._itemDataEquals = j3.compileEquals(options.itemDataEquals || [this._itemIdName]);
        this._shouldListItemSelected = options.shouldListItemSelected;
        this._selectedItemsEx = options.selectedItemsEx;
        this._groupRenderer = options.groupRenderer;
        this._groupCheckable = options.groupCheckable;
        this._checkGroupOnClick = !!options.checkGroupOnClick;
        this._groupIdName = options.groupIdName || 'id';
        this._groupDataSelector = j3.compileSelector(options.groupDataSelector || this._groupIdName);
        this._groupDataEquals = j3.compileSelector(options.groupDataEquals || [this._groupIdName]);
        this._shouldListGroupSelected = options.shouldListGroupSelected;
        return this._selectedGroupsEx = options.selectedGroupsEx;
      },
      onRender: function(sb, tplData) {
        sb.a('<div id="' + tplData.id + '" class="' + tplData.css + '">');
        this.renderDataListGroups(sb, this.getDatasource());
        return sb.a('</div>');
      },
      onCreated: function(options) {
        j3.on(this.el, 'click', this, __el_click);
        return this.setDatasource(options.datasource);
      },
      onUpdateView: function(datasource, eventName, data) {
        return __refreshList.call(this);
      },
      renderDataListGroups: function(sb, datasource) {
        if (!datasource) {
          return;
        }
        return datasource.forEachGroup(this, function(groupData, args, index) {
          var listGroupInfo;
          listGroupInfo = {
            data: groupData,
            checkable: this._groupCheckable,
            checked: this.shouldListGroupSelected(groupData),
            index: index
          };
          return this.renderDataListGroup(sb, listGroupInfo);
        });
      },
      renderDataListGroup: function(sb, listGroupInfo) {
        var groupCss, groupId;
        groupCss = 'list-group';
        if (listGroupInfo.index === 0) {
          groupCss += ' list-group-first';
        }
        if (listGroupInfo.checked) {
          groupCss += ' list-group-checked';
        }
        groupId = j3.getVal(listGroupInfo.data, this._groupIdName);
        sb.a('<div class="' + groupCss + '" data-id="' + groupId + '">');
        sb.a('<div class="list-group-header">');
        this.onRenderDataListGroup(sb, listGroupInfo);
        sb.a('</div>');
        this.renderDataList(sb, listGroupInfo.data.items);
        return sb.a('</div>');
      },
      onRenderDataListGroup: function(sb, listGroupInfo) {
        if (this._groupRenderer) {
          return this._groupRenderer.call(this, sb, listGroupInfo);
        } else if (!j3.isUndefined(listGroupInfo.data)) {
          return sb.e(listGroupInfo.data.toString());
        }
      },
      renderDataList: function(sb, dataItems) {
        var args, listCss;
        listCss = 'data-list';
        if (this._itemCheckable) {
          listCss += ' data-list-checkable';
        }
        if (this._listCss) {
          listCss += ' ' + this._listCss;
        }
        args = {
          buffer: sb
        };
        this.beforeRenderDataList && this.beforeRenderDataList(args);
        this.fire('beforeRenderDataList', this, args);
        sb.a('<div class="' + listCss + '">');
        this.renderDataListItems(sb, dataItems, null);
        sb.a('</div>');
        this.afterRenderDataList && this.afterRenderDataList(args);
        return this.fire('afterRenderDataList', this, args);
      },
      renderDataListItems: function(buffer, datasource, activeModel) {
        var count;
        this._activeItemIndex = -1;
        if (datasource) {
          count = j3.count(datasource);
          return j3.forEach(datasource, this, function(model, args, index) {
            var dataListItem, isActive;
            isActive = activeModel === model;
            if (isActive) {
              this._activeItemIndex = index;
            }
            dataListItem = {
              index: index,
              count: count,
              data: model,
              active: isActive,
              checkable: this._itemCheckable,
              checked: this.shouldListItemSelected(model)
            };
            return this.renderDataListItem(buffer, dataListItem);
          });
        }
      },
      renderDataListItem: function(buffer, dataListItem) {
        var itemCss, itemId;
        itemCss = 'list-item';
        if (dataListItem.index === 0) {
          itemCss += ' list-item-first';
        } else if (dataListItem.index === (dataListItem.count - 1)) {
          itemCss += ' list-item-last';
        }
        if (dataListItem.index % 2) {
          itemCss += ' list-item-even';
        }
        if (dataListItem.active) {
          itemCss += ' list-item-active';
        }
        if (dataListItem.checked) {
          itemCss += ' list-item-checked';
        }
        itemId = j3.getVal(dataListItem.data, this._itemIdName);
        buffer.append('<div class="' + itemCss + '" data-id="' + itemId + '">');
        this.onRenderDataListItem(buffer, dataListItem);
        return buffer.append('</div>');
      },
      onRenderDataListItem: function(buffer, dataListItem) {
        if (this._itemRenderer) {
          return this._itemRenderer.call(this, buffer, dataListItem);
        } else if (!j3.isUndefined(dataListItem.data)) {
          return buffer.append(dataListItem.data.toString());
        }
      },
      getSelectedGroups: function() {
        return this._selectedGroups;
      },
      getSelectedItems: function() {
        return this._selectedItems;
      },
      setSelectedItems: function(value) {
        this._selectedItems = value;
        return __refreshListItemSelecteStates.call(this);
      },
      shouldListGroupSelected: function(model) {
        var groupData;
        if (this._shouldListGroupSelected) {
          return this._shouldListGroupSelected(model);
        }
        if (!this._selectedGroupsEx) {
          return;
        }
        groupData = this._groupDataEquals(model);
        return !!j3.tryUntil(this._selectedGroupsEx, function(group) {
          if (this._groupDataEquals(group, groupData)) {
            return true;
          }
        });
      },
      shouldListItemSelected: function(model) {
        var itemData;
        if (this._shouldListItemSelected) {
          return this._shouldListItemSelected(model);
        }
        if (!this._selectedItems) {
          return;
        }
        itemData = this._itemDataSelector(model);
        return !!j3.tryUntil(this._selectedItems, this, function(item) {
          if (this._itemDataEquals(item, itemData)) {
            return true;
          }
        });
      },
      getItemCheckable: function() {
        return this._itemCheckable;
      },
      setItemCheckable: function(value) {
        return this._itemCheckable = !!value;
      },
      getGroupCheckable: function() {
        return this._groupCheckable;
      },
      setGroupCheckable: function(value) {
        return this._groupCheckable = !!value;
      },
      setSelectedItemsEx: function(value) {
        return this._selectedItemsEx = value;
      }
    });
    return j3.ext(j3.GroupedDataList.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    var Pagination, __el_click, __renderPagination;
    j3.Pagination = Pagination = j3.cls(j3.ContainerView, {
      baseCss: 'pgn',
      onInit: function(options) {
        this._pageSize = options.pageSize || 50;
        this._pageNum = options.pageNum || 1;
        this._entryCount = options.entryCount || 0;
        this._align = options.align;
        this._hidePrevNextButtons = options.hidePrevNextButtons;
        this._hidePageButtons = options.hidePageButtons;
        return this._autoHide = options.autoHide;
      },
      render: function(sb) {
        var pageCount;
        sb.a('<div id="' + this.id + '" class="' + this.getCss() + '"');
        if (this._autoHide) {
          pageCount = this.getPageCount();
          if (pageCount === 1) {
            sb.a(' style="display:none"');
          }
        }
        sb.a('>');
        __renderPagination.call(this, sb);
        return sb.a('</div>');
      },
      onCreated: function() {
        return j3.on(this.el, 'click', this, __el_click);
      },
      refresh: function() {
        var pageCount, sb;
        sb = new j3.StringBuilder;
        __renderPagination.call(this, sb);
        this.el.innerHTML = sb.toString();
        if (this._autoHide) {
          pageCount = this.getPageCount();
          if (pageCount === 1) {
            return this.hide();
          } else {
            return this.show();
          }
        }
      },
      getPageNum: function() {
        return this._pageNum;
      },
      setPageNum: function(value, noRefresh) {
        value = value || 1;
        if (this._pageNum === value) {
          return;
        }
        this._pageNum = value;
        if (!noRefresh) {
          this.refresh();
        }
        return this.fire('pageNumChange', this);
      },
      getPageSize: function() {
        return this._pageSize;
      },
      setPageSize: function(value, noRefresh) {
        this._pageSize = value || 50;
        return this.setPageNum(1);
      },
      getEntryCount: function() {
        return this._entryCount;
      },
      setEntryCount: function(value, noRefresh) {
        this._entryCount = value || 0;
        if (!noRefresh) {
          return this.refresh();
        }
      },
      getPageCount: function() {
        if (this._entryCount === 0) {
          return 1;
        }
        return Math.floor((this._entryCount - 1) / this._pageSize) + 1;
      }
    });
    __renderPagination = function(sb) {
      var i, pageCount, _i;
      pageCount = this.getPageCount();
      if (!this._hidePrevNextButtons) {
        if (this._pageNum !== 1) {
          sb.a('<a class="pgn-prev" href="javascript:;" data-cmd="prev">&lt;</a>');
        }
        if (this._pageNum !== pageCount) {
          sb.a('<a class="pgn-next" href="javascript:;" data-cmd="next">&gt;</a>');
        }
      }
      sb.a('<ul class="');
      if (this._align === 'left') {
        sb.a('pull-left');
      } else if (this._align === 'right') {
        sb.a('pull-right');
      }
      sb.a('">');
      for (i = _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; i = 1 <= pageCount ? ++_i : --_i) {
        if (this._pageNum === i) {
          sb.a('<li class="active">');
          sb.a('<a>' + i + '</a>');
        } else {
          sb.a('<li>');
          sb.a('<a href="javascript:;" data-cmd="page" data-page="' + i + '">' + i + '</a>');
        }
        sb.a('</li>');
      }
      return sb.a('</ul>');
    };
    return __el_click = function(evt) {
      var cmd, src;
      src = evt.src();
      cmd = j3.Dom.data(src, 'cmd');
      if (!cmd) {
        return;
      }
      switch (cmd) {
        case 'prev':
          return this.setPageNum(this.getPageNum() - 1);
        case 'next':
          return this.setPageNum(this.getPageNum() + 1);
        case 'page':
          return this.setPageNum(parseInt(j3.Dom.data(src, 'page')));
      }
    };
  })(j3);

  (function(j3) {
    return j3.BoxWithArrow = j3.cls(j3.ContainerView, {
      baseCss: 'box-with-arrow',
      templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>"><div class="box-arrow"></div><div class="box">'),
      templateEnd: j3.template('</div></div>'),
      onInit: function(options) {
        return this._placement = options.placement || 'top';
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + ' ' + this.baseCss + '-' + this._placement
        };
      },
      onCreated: function(options) {
        return this.elBody = j3.Dom.byIndex(this.el, 1);
      }
    });
  })(j3);

  (function(j3) {
    var Tooltip, __getPool, _pool;
    j3.Tooltip = Tooltip = j3.cls(j3.BoxWithArrow, {
      css: 'tooltip',
      onInit: function(options) {
        this._content = options.content || '';
        this._encodeContent = !!options.encodeContent;
        return Tooltip.base().onInit.call(this, options);
      },
      renderChildren: function(sb) {
        if (this._encodeContent) {
          return sb.e(this._content);
        } else {
          return sb.a(this._content);
        }
      },
      getContent: function() {
        return this._content;
      },
      setContent: function(content, encodeContent) {
        this._content = content;
        this._encodeContent = !!encodeContent;
        return this.getBody().innerHTML = this._encodeContent ? j3.htmlEncode(this._content) : this._content;
      },
      show: function(pointAt) {
        var Dom;
        Dom = j3.Dom;
        Dom.show(this.el);
        return Dom.place(this.el, pointAt.x - (this.el.offsetWidth / 2), pointAt.y);
      },
      hide: function() {
        j3.Dom.hide(this.el);
        return this.fire('hide', this);
      }
    });
    _pool = null;
    __getPool = function() {
      if (_pool) {
        return _pool;
      }
      return _pool = new j3.Pool({
        onCreate: function(options) {
          var bar;
          bar = new Tooltip(options);
          bar.on('hide', function(sender, args) {
            return _pool.release(sender);
          });
          return bar;
        },
        onInit: function(bar, options) {
          bar.setContent(options.content, options.encodeContent);
          return bar.show(options.pointAt);
        }
      });
    };
    return j3.Tooltip.show = function(options) {
      var tooltip, _ref;
      if ((_ref = options.placement) == null) {
        options.placement = 'top';
      }
      return tooltip = __getPool().gain(options);
    };
  })(j3);

  (function(j3) {
    var __btn_click, __btn_mouseout, __btn_mouseover, __hideTooltip, __showTooltip;
    __btn_click = function(evt) {
      this.click();
      if (this._linkButton && this._commandMode) {
        return evt.stop();
      }
    };
    __btn_mouseover = function(evt) {
      return __showTooltip.call(this);
    };
    __btn_mouseout = function(evt) {
      return __hideTooltip.call(this);
    };
    __showTooltip = function() {
      var Dom, height, pos, width;
      if (!this._tip) {
        return;
      }
      Dom = j3.Dom;
      pos = Dom.position(this.el);
      width = Dom.offsetWidth(this.el);
      height = Dom.offsetHeight(this.el);
      return this._tooltip = j3.Tooltip.show({
        content: this._tip,
        encodeContent: true,
        pointAt: {
          x: pos.left + (width / 2),
          y: pos.top + height
        }
      });
    };
    __hideTooltip = function() {
      if (!this._tooltip) {
        return;
      }
      this._tooltip.hide();
      return this._tooltip = null;
    };
    return j3.Button = j3.cls(j3.View, {
      baseCss: 'btn',
      template: j3.template('<<%=linkButton?"a":"button"%> <%if(linkButton){%>href="<%=url%>"<%}else{%>type="<%=primary ? "submit" : "button"%>"<%}%> id="<%=id%>" class="<%=css%>"<%if(disabled){%> disabled="disabled"<%}%>><%if(icon){%><i class="<%=icon%>"></i><%}%><%if(icon && text){%><%=" "%><%}%><%=text%></<%=linkButton?"a":"button"%>>'),
      onInit: function(options) {
        this._text = options.text || '';
        this._tip = options.tip;
        this._icon = options.icon;
        this._primary = !!options.primary;
        this._disabled = !!options.disabled;
        this._active = !!options.active;
        this._toggle = options.toggle;
        this._linkButton = !!options.linkButton;
        this._url = options.url;
        return this._commandMode = options.commandMode;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._primary ? ' btn-primary' : '') + (this._disabled ? ' disabled' : '') + (this._active ? ' active' : ''),
          text: this._text,
          icon: this._icon,
          primary: this._primary,
          disabled: this._disabled,
          linkButton: this._linkButton,
          url: this._url
        };
      },
      onCreated: function(options) {
        if (this._icon) {
          this._elIcon = this.el.firstChild;
        }
        j3.on(this.el, 'click', this, __btn_click);
        if (!j3.UA.supportTouch) {
          j3.on(this.el, 'mouseover', this, __btn_mouseover);
          return j3.on(this.el, 'mouseout', this, __btn_mouseout);
        }
      },
      getPrimary: function() {
        return this._primary;
      },
      getText: function() {
        return this._text;
      },
      setText: function(text) {
        this._text = text || '';
        return this.el.innerHTML = j3.htmlEncode(this._text);
      },
      getUrl: function() {
        return this._url;
      },
      setUrl: function(value) {
        if (this._linkButton) {
          this._url = value;
          this.el.href = value;
        }
      },
      getDisabled: function() {
        return this._disabled;
      },
      setDisabled: function(value) {
        this._disabled = !!value;
        this.el.disabled = this._disabled;
        if (this._disabled) {
          j3.Dom.addCls(this.el, 'disabled');
        } else {
          j3.Dom.removeCls(this.el, 'disabled');
        }
      },
      getActive: function() {
        return this._active;
      },
      setActive: function(value) {
        value = !!value;
        if (this._active === value) {
          return;
        }
        this._active = value;
        if (this._active) {
          j3.Dom.addCls(this.el, 'active');
        } else {
          j3.Dom.removeCls(this.el, 'active');
        }
        this.fire((this._active ? 'active' : 'inactive'), this, {
          active: this._active
        });
      },
      click: function() {
        var isActive;
        if (this._disabled) {
          return;
        }
        isActive = this.getActive();
        if (this._toggle === 'exclusive') {
          this.setActive(!isActive);
        } else if (this._toggle === 'radio' && !isActive) {
          this.setActive(true);
        }
        this.fire('click', this);
      },
      focus: function() {
        return this.el.focus();
      },
      blur: function() {
        return this.el.blur();
      },
      setIcon: function(value) {
        this._icon = value;
        return this._elIcon.className = value;
      },
      getTip: function() {
        return this._tip;
      },
      setTip: function(value) {
        return this._tip = value;
      },
      showTip: function() {
        __showTooltip.call(this);
      },
      hideTip: function() {
        __hideTooltip.call(this);
      }
    });
  })(j3);

  (function(j3) {
    var ButtonGroup, __childButton_active, __childButton_click;
    __childButton_active = function(sender, args) {
      if (this._toggle === 'radio' || this._toggle === 'exclusive') {
        if (this._activeButton) {
          this._activeButton.setActive(false);
        }
        this._activeButton = sender;
      }
      return this.fire('active', this, {
        button: sender
      });
    };
    __childButton_click = function(sender, args) {
      if (this._toggle === 'exclusive') {
        this._activeButton = sender.getActive() ? sender : null;
      }
      return this.fire('click', sender, args);
    };
    return j3.ButtonGroup = ButtonGroup = j3.cls(j3.ContainerView, {
      baseCss: 'btn-grp',
      onInit: function(options) {
        this._toggle = options.toggle;
        return this._label = options.label;
      },
      onCreateChild: function(options, args) {
        options.cls = j3.Button;
        if (args.first) {
          options.css = 'first';
        }
        if (args.last) {
          options.css = 'last';
        }
        if (this._toggle) {
          options.toggle = this._toggle;
        }
      },
      renderChildren: function(sb) {
        if (this._label) {
          sb.a('<div class="btn-grp-lbl">');
          sb.e(this._label);
          sb.a('</div>');
        }
        return ButtonGroup.base().renderChildren.apply(this, arguments);
      },
      onChildCreated: function(child) {
        child.on('click', this, __childButton_click);
        child.on('active', this, __childButton_active);
        if (child.getActive()) {
          return this._activeButton = child;
        }
      },
      setActiveButtonByName: function(name) {
        return this.getChildren().forEach(function(btn) {
          var active;
          active = btn.name === name;
          btn.setActive(active);
          if (active) {
            return this._activeButton = btn;
          }
        });
      }
    });
  })(j3);

  (function(j3) {
    var __el_keypress;
    __el_keypress = function(evt) {
      if (evt.keyCode() === 32) {
        this.click();
        return evt.stop();
      }
    };
    j3.Checkbox = j3.cls(j3.View, {
      baseCss: 'chk',
      template: j3.template('<a id="<%=id%>" class="<%=css%>" href="javascript:;"><i></i><span><%-text%></span></a>'),
      onInit: function(options) {
        this._text = options.text || '';
        this._disabled = !!options.disabled;
        this._checked = !!options.checked;
        this._value = options.value;
        return this._bindingMode = options.bindingMode || 'checked';
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._disabled ? ' ' + this.baseCss + '-disabled' : '') + (this._checked ? ' ' + this.baseCss + '-checked' : ''),
          text: this._text
        };
      },
      onCreated: function(options) {
        j3.on(this.el, 'click', this, this.click);
        j3.on(this.el, 'keypress', this, __el_keypress);
        this._elText = j3.Dom.byIndex(this.el, 1);
        return this.setDatasource(options.datasource);
      },
      getText: function() {
        return this._text;
      },
      setText: function(text) {
        this._text = text || '';
        return this._elText.innerHTML = j3.htmlEncode(this._text);
      },
      getValue: function() {
        return this._value;
      },
      setValue: function(value) {
        this._value = value;
        if (this._checked && this._bindingMode === 'value') {
          return this.updateData();
        }
      },
      getDisabled: function() {
        return this._disabled;
      },
      setDisabled: function(value) {
        var css;
        this._disabled = !!value;
        css = this.baseCss + '-disabled';
        if (this._disabled) {
          return j3.Dom.addCls(this.el, css);
        } else {
          return j3.Dom.removeCls(this.el, css);
        }
      },
      getChecked: function() {
        return this._checked;
      },
      setChecked: function(value) {
        var css;
        value = !!value;
        if (this._checked === value) {
          return;
        }
        this._checked = value;
        css = this.baseCss + '-checked';
        if (this._checked) {
          j3.Dom.addCls(this.el, css);
        } else {
          j3.Dom.removeCls(this.el, css);
        }
        this.fire('change', this, {
          checked: this._checked
        });
        return this.updateData();
      },
      click: function() {
        if (!this.getDisabled()) {
          return this.setChecked(!this.getChecked());
        }
      },
      focus: function() {
        return this.el.focus();
      },
      blur: function() {
        return this.el.blur();
      },
      onUpdateData: function(datasource) {
        var value;
        if (this._bindingMode === 'value') {
          value = this.getChecked() ? this.getValue() : null;
        } else {
          value = this.getChecked();
        }
        if (this.name) {
          return datasource.set(this.name, value);
        }
      },
      onUpdateView: function(datasource, eventName, args) {
        var value;
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        value = datasource.get(this.name);
        if (this._bindingMode === 'value') {
          return this.setChecked(this.getValue() === value);
        } else {
          return this.setChecked(value);
        }
      }
    });
    return j3.ext(j3.Checkbox.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    var __chk_change, __shouldChecked;
    j3.CheckboxList = j3.cls(j3.ContainerView, {
      baseCss: 'chk-list',
      onInit: function(options) {
        this._itemInline = !!options.itemInline;
        this._itemWidth = options.itemWidth;
        this._items = options.items;
        this._itemsDatasource = options.itemsDatasource;
        this._bindingMode = options.bindingMode || 'array';
        this.setSelectedValue(options.selectedValue);
        return this.setDatasource(options.datasource);
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._itemInline ? ' ' + this.baseCss + '-inline' : ''),
          text: this._text
        };
      },
      createChildren: function(options) {
        var bindingMode, items, selectedValue;
        items = this._items || this._itemsDatasource;
        if (!items) {
          return;
        }
        bindingMode = this._bindingMode;
        selectedValue = this._selectedValue;
        return j3.forEach(items, this, function(item) {
          var itemOptions, value;
          value = j3.getVal(item, 'value');
          itemOptions = {
            parent: this,
            text: j3.getVal(item, 'text'),
            value: value,
            inline: this._itemInline,
            checked: __shouldChecked(selectedValue, value, bindingMode),
            on: {
              change: {
                c: this,
                h: __chk_change
              }
            }
          };
          if (this._itemInline && this._itemWidth) {
            itemOptions.width = this._itemWidth;
          }
          return new j3.Checkbox(itemOptions);
        });
      },
      onUpdateData: function() {
        var datasource;
        datasource = this.getDatasource();
        return datasource.set(this.name, j3.clone(this._selectedValue));
      },
      onUpdateView: function(datasource, eventName, args) {
        var bindingMode;
        this.setSelectedValue(datasource.get(this.name));
        if (!this.el) {
          return;
        }
        this._updatingSubComponent = true;
        bindingMode = this._bindingMode;
        j3.forEach(this.children, this, function(chk) {
          return chk.setChecked(__shouldChecked(this._selectedValue, chk.getValue(), bindingMode));
        });
        return this._updatingSubComponent = false;
      },
      getSelectedValue: function() {
        return this._selectedValue;
      },
      setSelectedValue: function(value) {
        if (value) {
          return this._selectedValue = j3.clone(value);
        } else {
          if (this._bindingMode === 'array') {
            return this._selectedValue = [];
          } else {
            return this._selectedValue = 0;
          }
        }
      }
    });
    j3.ext(j3.CheckboxList.prototype, j3.DataView);
    __shouldChecked = function(selectedValue, value, bindingMode) {
      if (bindingMode === 'bit') {
        return !!(selectedValue & value);
      } else if (bindingMode === 'array') {
        return -1 !== j3.indexOf(selectedValue, value);
      }
    };
    return __chk_change = function(sender, args) {
      var bindingMode, indexOfValue, value;
      if (this._updatingSubComponent) {
        return;
      }
      bindingMode = this._bindingMode;
      value = sender.getValue();
      if (bindingMode === 'bit') {
        if (sender.getChecked()) {
          this._selectedValue |= value;
        } else {
          this._selectedValue &= ~value;
        }
      } else if (bindingMode === 'array') {
        if (sender.getChecked()) {
          this._selectedValue.push(value);
        } else {
          indexOfValue = j3.indexOf(this._selectedValue, value);
          if (indexOfValue !== -1) {
            this._selectedValue.splice(indexOfValue, 1);
          }
        }
      }
      return this.updateData();
    };
  })(j3);

  (function(j3) {
    var __adjustHeight, __refreshPlaceholder, __textbox_blur, __textbox_change, __textbox_focus, __textbox_keyup;
    __textbox_focus = function() {
      this._updatingView = true;
      this._elInput.value = this._text;
      j3.Dom.removeCls(this._elInput, this.baseCss + '-empty');
      this._updatingView = false;
      return this.fire('focus', this);
    };
    __textbox_blur = function() {
      this._updatingView = true;
      if (!this._text) {
        j3.Dom.addCls(this._elInput, this.baseCss + '-empty');
      }
      this._updatingView = false;
      return this.fire('blur', this);
    };
    __textbox_keyup = function(evt) {
      __textbox_change.call(this);
      return this.fire('keyup', this, {
        keyCode: evt.keyCode()
      });
    };
    __textbox_change = function() {
      var text;
      if (this._updatingView) {
        return;
      }
      text = this._elInput.value;
      if (this._text === text) {
        return;
      }
      this._text = text;
      j3.Dom.removeCls(this._elInput, this.baseCss + '-empty');
      if (j3.UA.ie) {
        __refreshPlaceholder.call(this);
      }
      if (this._multiline && this._autoHeight) {
        __adjustHeight.call(this);
      }
      this.updateData();
      return this.fire('change', this);
    };
    __refreshPlaceholder = function() {
      this._elInput.placeholder = '';
      if (this._text && this._placeholder && this._elPlaceholder) {
        j3.Dom.hide(this._elPlaceholder);
        return;
      }
      if (!this._placeholder) {
        if (this._elPlaceholder) {
          return j3.Dom.hide(this._elPlaceholder);
        }
      } else {
        if (!this._elPlaceholder) {
          this._elPlaceholder = document.createElement('span');
          this._elPlaceholder.className = 'input-placeholder';
          this.el.appendChild(this._elPlaceholder);
          j3.on(this._elPlaceholder, 'click', this, function(evt) {
            return this._elInput.focus();
          });
        } else {
          j3.Dom.show(this._elPlaceholder);
        }
        return this._elPlaceholder.innerHTML = j3.htmlEncode(this._placeholder);
      }
    };
    __adjustHeight = function() {
      var elInput, height;
      elInput = this._elInput;
      if (elInput.scrollHeight > elInput.offsetHeight - 2) {
        if (!this._originalHeight) {
          this._originalHeight = j3.Dom.height(elInput);
        }
        return j3.Dom.height(elInput, elInput.scrollHeight + 2);
      } else if (this._originalHeight) {
        height = j3.Dom.height(elInput);
        if (height > this._originalHeight) {
          j3.Dom.height(elInput, height - 20);
          return __adjustHeight.call(this);
        }
      }
    };
    j3.Textbox = j3.cls(j3.View, {
      baseCss: 'input',
      templateInput: j3.template('<div id="<%=id%>" class="input-ctnr <%=css%>"><input type="<%=type%>" class="<%=inputCss%>" name="<%=name%>"<%if(disabled){%> disabled="disabled"<%}%><%if(readOnly){%> readonly="readonly"<%}%><%if(placeholder){%> placeholder="<%-placeholder%>"<%}%> value="<%-text%>" /></div>'),
      templateTextarea: j3.template('<div id="<%=id%>" class="input-ctnr <%=css%>"><textarea class="<%=inputCss%>" name="<%=name%>"<%if(disabled){%> disabled="disabled"<%}%><%if(readOnly){%> readonly="readonly"<%}%><%if(placeholder){%> placeholder="<%-placeholder%>"<%}%> row="<%=row%>"><%-text%></textarea></div>'),
      onInit: function(options) {
        this._text = options.text || '';
        this._primary = !!options.primary;
        this._disabled = !!options.disabled;
        this._readOnly = !!options.readOnly;
        this._type = options.type || 'text';
        this._multiline = this._type === 'text' && !!options.multiline;
        if (this._multiline) {
          this._row = options.row || 3;
        }
        this._autoHeight = !!options.autoHeight;
        return this._placeholder = options.placeholder || '';
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.css,
          inputCss: 'input' + (this._disabled ? ' disabled' : '') + (this._multiline ? ' input-multiline' : '') + (!this._text ? ' ' + this.baseCss + '-empty' : void 0),
          text: this._text,
          disabled: this._disabled,
          readOnly: this._readOnly,
          type: this._type,
          name: this.name,
          row: this._row,
          placeholder: this._placeholder
        };
      },
      onRender: function(buffer) {
        var template;
        if (this._multiline) {
          template = this.templateTextarea;
        } else {
          template = this.templateInput;
        }
        buffer.append(template(this.getTemplateData()));
      },
      onCreated: function(options) {
        this._elInput = this.el.firstChild;
        j3.on(this._elInput, 'focus', this, __textbox_focus);
        j3.on(this._elInput, 'blur', this, __textbox_blur);
        j3.on(this._elInput, 'keyup', this, __textbox_keyup);
        j3.on(this._elInput, 'change', this, __textbox_change);
        this.setDatasource(options.datasource);
        if (j3.UA.ie && this._placeholder) {
          __refreshPlaceholder.call(this);
        }
      },
      getText: function() {
        return this._text || '';
      },
      setText: function(text) {
        text = text || '';
        if (this._text === text) {
          return;
        }
        this._text = text;
        this._updatingView = true;
        if (!this._text) {
          this._elInput.value = '';
          j3.Dom.addCls(this._elInput, this.baseCss + '-empty');
        } else {
          this._elInput.value = this._text;
          j3.Dom.removeCls(this._elInput, this.baseCss + '-empty');
        }
        if (j3.UA.ie) {
          __refreshPlaceholder.call(this);
        }
        if (this._multiline && this._autoHeight) {
          __adjustHeight.call(this);
        }
        this._updatingView = false;
        this.updateData();
        return this.fire('change', this);
      },
      getDisabled: function() {
        return this._disabled;
      },
      setDisabled: function(value) {
        this._disabled = !!value;
        this._elInput.disabled = this._disabled;
        return j3.Dom.toggleCls(this._elInput, 'disabled');
      },
      getReadOnly: function() {
        return this._elInput.readOnly;
      },
      setReadOnly: function(value) {
        return this._elInput.readOnly = !!value;
      },
      focus: function() {
        if (this.getDisabled() || this.getReadOnly()) {
          return false;
        }
        this._elInput.focus();
        this._elInput.select(-1, -1);
        return true;
      },
      blur: function() {
        return this._elInput.blur();
      },
      getPlaceholder: function() {
        return this._placeholder;
      },
      setPlaceholder: function(value) {
        this._placeholder = value || '';
        if (j3.UA.ie) {
          return __refreshPlaceholder.call(this);
        } else {
          return this._elInput.placeholder = this._placeholder;
        }
      },
      onUpdateData: function() {
        return this._datasource.set(this.name, this._text);
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        return this.setText(datasource.get(this.name));
      },
      onSetWidth: function(width) {
        return j3.Dom.offsetWidth(this._elInput, width);
      },
      onSetHeight: function(height) {
        return j3.Dom.offsetHeight(this._elInput, height);
      }
    });
    return j3.ext(j3.Textbox.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    var ProgressBar, __getIndicateText, __getPercentage, __refresh;
    __getPercentage = function(options) {
      var delta;
      delta = options.max - options.min;
      if (delta) {
        return Math.floor(options.value * 100 / delta);
      } else {
        return 0;
      }
    };
    __getIndicateText = function(options) {
      var text;
      switch (options.indicator) {
        case 'none':
          return '';
        case 'percentage':
          return options.percentage + '%';
        case 'progress':
          return options.value + ' / ' + options.max;
        case 'text':
          if (options.percentage === 0) {
            text = options.preparingText;
          } else if (options.percentage === 100) {
            text = options.completedText;
          } else {
            text = options.processingtext;
          }
          return j3.htmlEncode(text);
      }
    };
    __refresh = function() {
      var options, text, undonePercentage;
      options = {
        min: this._min,
        max: this._max,
        value: this._value,
        preparingText: this._preparingText,
        processingtext: this._processingtext,
        completedText: this._completedText,
        indicator: this._indicator
      };
      options.percentage = __getPercentage(options);
      text = __getIndicateText(options);
      this._elBg.innerHTML = text;
      this._elText.innerHTML = text;
      undonePercentage = 100 - options.percentage;
      this._elInner.style.marginLeft = '-' + undonePercentage + '%';
      this._elDone.style.marginLeft = undonePercentage + '%';
      return this._elText.style.marginLeft = undonePercentage + '%';
    };
    j3.ProgressBar = ProgressBar = j3.cls(j3.View, {
      baseCss: 'prg-bar',
      onInit: function(options) {
        this._min = options.min || 0;
        this._max = options.max || 100;
        this._value = options.value || 0;
        this._indicator = options.indicator || 'percentage';
        this._preparingText = options.preparingText;
        this._processingtext = options.processingText;
        this._completedText = options.completedText;
        this._inline = options.inline;
        this._gray = options.gray;
        this._warning = options.warning;
        return this._danger = options.danger;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.css
        };
      },
      onRender: function(sb, data) {
        return ProgressBar.render(sb, {
          id: data.id,
          css: this.getCss(),
          min: this._min,
          max: this._max,
          value: this._value,
          preparingText: this._preparingText,
          processingtext: this._processingtext,
          completedText: this._completedText,
          indicator: this._indicator,
          inline: this._inline,
          gray: this._gray,
          warning: this._warning,
          danger: this._danger
        });
      },
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this._elBg = Dom.firstChild(this.el);
        this._elInner = Dom.next(this._elBg);
        this._elDone = Dom.firstChild(this._elInner);
        return this._elText = Dom.next(this._elDone);
      },
      getMin: function() {
        return this._min;
      },
      setMin: function(value) {
        this._min = value;
        return __refresh.call(this);
      },
      getMax: function() {
        return this._max;
      },
      setMax: function(value) {
        this._max = value;
        return __refresh.call(this);
      },
      getValue: function() {
        return this._value;
      },
      setValue: function(value) {
        this._value = value;
        return __refresh.call(this);
      },
      getPercentage: function() {
        return __getPercentage({
          min: this._min,
          max: this._max,
          value: this._value
        });
      }
    });
    return ProgressBar.render = function(sb, options) {
      var css, text, undonePercentage;
      if (j3.isUndefined(options.indicator)) {
        options.indicator = 'percentage';
      }
      if (j3.isUndefined(options.min)) {
        options.min = 0;
      }
      if (j3.isUndefined(options.max)) {
        options.max = 100;
      }
      if (j3.isUndefined(options.value)) {
        options.value = 0;
      }
      options.percentage = __getPercentage(options);
      text = __getIndicateText(options);
      css = 'prg-bar';
      if (options.inline) {
        css += ' prg-bar-inline';
      }
      if (options.gray) {
        css += ' prg-bar-gray';
      }
      if (options.warning) {
        css += ' prg-bar-warning';
      }
      if (options.danger) {
        css += ' prg-bar-danger';
      }
      if (options.css) {
        css += ' ' + options.css;
      }
      sb.a('<div class="' + css + '"');
      if (options.id) {
        sb.a(' id="' + options.id + '"');
      }
      sb.a('>');
      sb.a('<div class="prg-bar-bg">');
      sb.a(text);
      sb.a('</div>');
      undonePercentage = 100 - options.percentage;
      sb.a('<div class="prg-bar-inner" style="margin-left:-');
      sb.a(undonePercentage);
      sb.a('%">');
      sb.a('<div class="prg-bar-done" style="margin-left:');
      sb.a(undonePercentage);
      sb.a('%"></div>');
      sb.a('<div class="prg-bar-text" style="margin-left:');
      sb.a(undonePercentage);
      sb.a('%">');
      sb.a(text);
      sb.a('</div>');
      sb.a('</div>');
      return sb.a('</div>');
    };
  })(j3);

  (function(j3) {
    j3.Bookmark = {};
    return j3.Bookmark.render = function(sb, options) {
      var baseCss, css;
      baseCss = 'bookmark';
      css = baseCss;
      if (options.gray) {
        css += ' ' + baseCss + '-gray';
      }
      if (options.warning) {
        css += ' ' + baseCss + '-warning';
      }
      if (options.danger) {
        css += ' ' + baseCss + '-danger';
      }
      if (options.icon) {
        css += ' ' + baseCss + '-with-icon';
      }
      if (options.iconGray) {
        css += ' ' + baseCss + '-with-icon-gray';
      }
      if (options.iconWarning) {
        css += ' ' + baseCss + '-with-icon-warning';
      }
      if (options.iconDanger) {
        css += ' ' + baseCss + '-with-icon-danger';
      }
      if (options.css) {
        css += ' ' + css;
      }
      sb.a('<div');
      if (options.id) {
        sb.a(' id="' + options.id + '"');
      }
      sb.a(' class="' + css + '">');
      if (options.icon) {
        sb.a('<span class="bookmark-icon"><i class="');
        sb.a(options.icon);
        sb.a('"></i></span>');
      }
      sb.a('<span class="bookmark-label">');
      sb.e(options.text);
      sb.a('</span>');
      sb.a('<span class="bookmark-shadow"></span>');
      return sb.a('</div>');
    };
  })(j3);

  j3.Calendar = (function() {
    var Calendar, __getFirstDateOfMonthView, __monthViewClick, __refreshCalendarHeader;
    __getFirstDateOfMonthView = function(year, month, firstDayOfWeek) {
      var startDate;
      startDate = new j3.DateTime(year, month, 1);
      startDate = startDate.addDay(0 - startDate.getDayOfWeek() + firstDayOfWeek);
      if (startDate.getMonth() === month && startDate.getDay() > 1) {
        startDate = startDate.addDay(-7);
      }
      return startDate;
    };
    __monthViewClick = function(evt) {
      var cellIndex, clickedCell, clickedDate, el, rowIndex;
      el = evt.src();
      if (el.tagName !== 'A') {
        return;
      }
      clickedCell = el.parentNode;
      rowIndex = clickedCell.parentNode.rowIndex;
      cellIndex = clickedCell.cellIndex;
      clickedDate = this._firstDateOfMonthView.addDay((rowIndex - 1) * 7 + cellIndex);
      return this.setCurrentDate(clickedDate);
    };
    __refreshCalendarHeader = function() {
      return this._elCurYearMonth.innerHTML = this._year + ' - ' + this._month;
    };
    Calendar = j3.cls(j3.View, {
      baseCss: 'cld',
      onInit: function(options) {
        var today, _ref;
        if ((_ref = options.firstDayOfWeek) == null) {
          options.firstDayOfWeek = 1;
        }
        this._firstDayOfWeek = options.firstDayOfWeek % 7;
        this._date = options.date;
        today = j3.DateTime.today();
        if (options.year) {
          this._year = options.year;
        } else if (this._date) {
          this._year = this._date.getYear();
        } else {
          this._year = today.getYear();
        }
        if (options.month) {
          this._month = options.month;
        } else if (this._date) {
          this._month = this._date.getMonth();
        } else {
          this._month = today.getMonth();
        }
      },
      render: function(buffer) {
        buffer.append('<div id="' + this.id + '" class="' + this.getCss() + '">');
        buffer.append('<div class="' + this.baseCss + '-top">');
        buffer.append('<a class="' + this.baseCss + '-next-month"></a>');
        buffer.append('<a class="' + this.baseCss + '-prev-month"></a>');
        buffer.append('<div class="' + this.baseCss + '-cur-year-month"></div>');
        buffer.append('</div>');
        buffer.append('<div class="' + this.baseCss + '-month-view">');
        this.renderMonthView(buffer);
        buffer.append('</div>');
        buffer.append('</div>');
      },
      renderMonthView: function(buffer) {
        var dayOfWeek, i, isCurDate, j, renderingDate, today, _i, _j, _k;
        buffer.append('<table><tr>');
        for (i = _i = 0; _i < 7; i = ++_i) {
          dayOfWeek = (this._firstDayOfWeek + i) % 7;
          buffer.append('<th class="' + this.baseCss + '-weekday-"' + dayOfWeek + '>' + j3.Lang.dayNameAbb[dayOfWeek] + '</th>');
        }
        buffer.append('</tr>');
        today = j3.DateTime.today();
        this._firstDateOfMonthView = __getFirstDateOfMonthView(this._year, this._month, this._firstDayOfWeek);
        this._lastDateOfMonthView = this._firstDateOfMonthView.addDay(42);
        renderingDate = this._firstDateOfMonthView;
        for (i = _j = 0; _j < 6; i = ++_j) {
          buffer.append('<tr>');
          for (j = _k = 0; _k < 7; j = ++_k) {
            isCurDate = renderingDate.equals(this._date);
            buffer.append('<td class="');
            buffer.append(this.baseCss + '-weekday-' + renderingDate.getDayOfWeek());
            if (renderingDate.equals(today)) {
              buffer.append(' ' + this.baseCss + '-today');
            }
            if (isCurDate) {
              buffer.append(' active');
            }
            buffer.append('"><a>' + renderingDate.getDay() + '</a></td>');
            renderingDate = renderingDate.addDay(1);
          }
          buffer.append('</tr>');
        }
        buffer.append('</table>');
      },
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this._elCldTop = Dom.firstChild(this.el);
        this._elNextMonth = Dom.firstChild(this._elCldTop);
        this._elPrevMonth = Dom.next(this._elNextMonth);
        this._elCurYearMonth = Dom.next(this._elPrevMonth);
        this._elMonthView = Dom.next(this._elCldTop);
        j3.on(this._elMonthView, 'click', this, __monthViewClick);
        j3.on(this._elPrevMonth, 'click', this, function() {
          this._month--;
          if (this._month === 0) {
            this._year--;
            this._month = 12;
          }
          return this.refreshMonthView();
        });
        j3.on(this._elNextMonth, 'click', this, function() {
          this._month++;
          if (this._month === 13) {
            this._year++;
            this._month = 1;
          }
          return this.refreshMonthView();
        });
        return __refreshCalendarHeader.call(this);
      },
      refreshMonthView: function() {
        var buffer;
        buffer = new j3.StringBuilder;
        this.renderMonthView(buffer);
        this._elMonthView.innerHTML = buffer.toString();
        return __refreshCalendarHeader.call(this);
      },
      getCurrentDate: function() {
        return this._date;
      },
      setCurrentDate: function(date) {
        var curMonthDay, oldDate;
        if (j3.DateTime.equals(this._date, date)) {
          return;
        }
        oldDate = this._date;
        this._date = date;
        curMonthDay = this._date || j3.DateTime.today();
        this._year = curMonthDay.getYear();
        this._month = curMonthDay.getMonth();
        this.refreshMonthView();
        return this.fire('change', this, {
          oldDate: oldDate,
          curDate: date
        });
      }
    });
    return Calendar;
  })();

  (function(j3) {
    var __elBar_click, __el_keydown, __refreshSelectedLabels;
    __refreshSelectedLabels = function() {
      var emptyCss, isEmpty, item, items, sb, _i, _len;
      sb = new j3.StringBuilder;
      isEmpty = true;
      if (this._multiple) {
        items = this.getSelectedItems();
        if (items && items.length) {
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (!item) {
              continue;
            }
            isEmpty = false;
            sb.a('<div class="sel-lbl">');
            sb.e(item.text || item.name || item.value);
            sb.a('<i data-cmd="unselect" class="sel-icon-unselect"></i>');
            sb.a('</div>');
          }
        } else {
          sb.e(this._placeholder);
        }
      } else {
        item = this.getSelectedItem();
        if (item) {
          isEmpty = false;
          sb.e(item.text || item.name || item.value);
        } else {
          sb.e(this._placeholder);
        }
      }
      this._elLbls.innerHTML = sb.toString();
      emptyCss = this.baseCss + '-empty';
      if (isEmpty) {
        return j3.Dom.addCls(this.el, emptyCss);
      } else {
        return j3.Dom.removeCls(this.el, emptyCss);
      }
    };
    __elBar_click = function(evt) {
      return this.onTriggerClick && this.onTriggerClick();
    };
    __el_keydown = function(evt) {
      var keyCode;
      keyCode = evt.keyCode();
      if (keyCode === 13 || keyCode === 40) {
        this.onTriggerClick && this.onTriggerClick();
        return evt.stop();
      }
    };
    return j3.Selector = j3.cls(j3.View, {
      baseCss: 'sel',
      template: j3.template('<div id="<%=id%>" class="<%=css%>"<%if(disabled){%> disabled="disabled"<%}%> tabindex="0"><div class="sel-inner"><%if(icon){%><div class="sel-icon"><i class="<%=icon%>"></i></div><%}%><div class="sel-bar"><div class="sel-lbls"></div></div><a class="sel-trigger"><i class="<%=cssTrigger%>"></i></a></div></div>'),
      onInit: function(options) {
        this._disabled = !!options.disabled;
        this._multiple = !!options.multiple;
        this._placeholder = options.placeholder || '';
        this._mini = options.mini;
        return this._icon = options.icon;
      },
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this.elInner = Dom.firstChild(this.el);
        this._elIcon = Dom.byCls(this.elInner, 'sel-icon');
        this._elBar = Dom.byCls(this.elInner, 'sel-bar');
        this._elTrigger = Dom.next(this._elBar);
        this._elLbls = Dom.firstChild(this._elBar);
        j3.on(this._elTrigger, 'click', this, function() {
          return this.onTriggerClick && this.onTriggerClick();
        });
        j3.on(this._elBar, 'click', this, __elBar_click);
        if (this._elIcon) {
          j3.on(this._elIcon, 'click', this, __elBar_click);
        }
        return j3.on(this.el, 'keydown', this, __el_keydown);
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._mini ? ' sel-mini' : '') + (this._disabled ? ' disabled' : ''),
          cssTrigger: this.cssTrigger,
          disabled: this._disabled,
          icon: this._icon
        };
      },
      getDisabled: function() {
        return this._disabled;
      },
      setDisabled: function(value) {
        this._disabled = !!value;
        if (this._disabled) {
          return j3.Dom.addCls(this.el, 'disabled');
        } else {
          return j3.Dom.removeCls(this.el, 'disabled');
        }
      },
      getMultiple: function() {
        return this._multiple;
      },
      setMultiple: function(value) {
        return this._multiple = value;
      },
      getSelectedItem: function() {
        if (this._selectedItems && this._selectedItems.length) {
          return this._selectedItems[0];
        } else {
          return null;
        }
      },
      getSelectedItems: function() {
        return this._selectedItems || [];
      },
      setSelectedItem: function(item) {
        return this.setSelectedItems(item);
      },
      setSelectedItems: function(items) {
        this.doSetSelectedItems(items);
        return typeof this.onSetSelectedItems === "function" ? this.onSetSelectedItems() : void 0;
      },
      doSetSelectedItems: function(items) {
        if (items && !j3.isArray(items)) {
          items = [items];
        }
        this._selectedItems = items || [];
        return __refreshSelectedLabels.call(this);
      },
      updateSubcomponent: function() {
        this._updatingSubcomponent = true;
        if (typeof this.onUpdateSubcomponent === "function") {
          this.onUpdateSubcomponent();
        }
        return this._updatingSubcomponent = false;
      },
      isUpdatingSubcomponent: function() {
        return this._updatingSubcomponent;
      },
      getPlaceholder: function() {
        return this._placeholder;
      },
      setPlaceholder: function(value) {
        this._placeholder = value || '';
        if (j3.Dom.hasCls(this.el, this.baseCss + '-empty')) {
          return this._elLbls.innerHTML = j3.htmlEncode(this._placeholder);
        }
      },
      onSetWidth: function(width) {
        var Dom, widthLabel;
        Dom = j3.Dom;
        Dom.offsetWidth(this.el, width);
        widthLabel = Dom.width(this.elInner) - Dom.offsetWidth(this._elTrigger);
        if (this._elIcon) {
          widthLabel -= Dom.offsetWidth(this._elIcon);
        }
        return Dom.offsetWidth(this._elBar, widthLabel);
      }
    });
  })(j3);

  (function(j3) {
    return j3.SelectorGroup = j3.cls(j3.ContainerView, {
      baseCss: 'sel-grp'
    });
  })(j3);

  j3.Dropdown = j3.cls(j3.Selector, {
    cssTrigger: 'icon-drp-down',
    onInit: function(options) {
      j3.Dropdown.base().onInit.call(this, options);
      if (!j3.isUndefined(options.boxWidth)) {
        return this._boxWidth = parseInt(options.boxWidth);
      }
    },
    onTriggerClick: function() {
      if (this._isDropdown) {
        this.close();
      } else {
        this.dropdown();
      }
    },
    isDropdown: function() {
      return this._isDropdown;
    },
    dropdown: function() {
      var Dom, args, elBox, firstTime;
      if (this.getDisabled()) {
        return;
      }
      Dom = j3.Dom;
      firstTime = !this._elDropdownBox;
      args = {
        firstTime: firstTime
      };
      if (firstTime) {
        elBox = document.createElement('div');
        elBox.className = 'drp-box';
        this._elDropdownBox = elBox;
        Dom.append(this.elInner, elBox);
        this.onCreateDropdownBox(this._elDropdownBox);
      }
      if (typeof this.beforeDropdown === "function") {
        this.beforeDropdown(args);
      }
      if (args.stop) {
        return;
      }
      this.fire('beforeDropdown', this, args);
      if (args.stop) {
        return;
      }
      j3.regPopup(this, 'dropdown');
      Dom.addCls(this.el, 'sel-active');
      Dom.show(this._elDropdownBox);
      this.resizeDropdownBox();
      if (typeof this.onDropdown === "function") {
        this.onDropdown(args);
      }
      this.fire('dropdown', this, args);
      this._isDropdown = true;
    },
    resizeDropdownBox: function() {
      var Dom, boxHeight, heightEl, maxHeight, minHeight, needAdjustHeight, posEl, scrollTop, showOnTop, spaceBottom, spaceTop, topBox, widthBox, widthEl, wndHeight;
      Dom = j3.Dom;
      posEl = Dom.position(this.el);
      heightEl = Dom.offsetHeight(this.el);
      Dom.place(this._elDropdownBox, posEl.left, posEl.top + heightEl + 2);
      if (this._boxWidth > 0) {
        Dom.offsetWidth(this._elDropdownBox, this._boxWidth);
      } else {
        this._elDropdownBox.style.width = "";
        widthEl = Dom.offsetWidth(this.el);
        widthBox = Dom.offsetWidth(this._elDropdownBox);
        if (widthBox < widthEl) {
          Dom.offsetWidth(this._elDropdownBox, widthEl);
        }
      }
      maxHeight = 28 * 10;
      minHeight = 28 * 5;
      if (Dom.height(this._elDropdownBox) === maxHeight) {
        return;
      }
      this._elDropdownBox.style.height = '';
      wndHeight = Dom.clientHeight();
      scrollTop = document.body.scrollTop;
      spaceTop = posEl.top - 2 - scrollTop;
      spaceBottom = wndHeight - posEl.top - heightEl - 2 + scrollTop;
      showOnTop = false;
      boxHeight = Dom.height(this._elDropdownBox);
      if (boxHeight > maxHeight) {
        boxHeight = maxHeight;
        needAdjustHeight = true;
      }
      if (spaceBottom < boxHeight) {
        showOnTop = spaceTop > spaceBottom;
        if (needAdjustHeight) {
          boxHeight = showOnTop ? spaceTop : spaceBottom;
          if (boxHeight > maxHeight) {
            boxHeight = maxHeight;
          }
          if (boxHeight < minHeight) {
            boxHeight = minHeight;
          }
        } else if (spaceTop < boxHeight) {
          showOnTop = false;
        }
      }
      if (Dom.height(this._elDropdownBox) > boxHeight) {
        Dom.height(this._elDropdownBox, boxHeight);
      }
      if (showOnTop) {
        topBox = posEl.top - boxHeight - 2;
      } else {
        topBox = posEl.top + heightEl + 2;
      }
      return Dom.place(this._elDropdownBox, posEl.left, topBox);
    },
    close: function() {
      j3.Dom.removeCls(this.el, 'sel-active');
      j3.Dom.hide(this._elDropdownBox);
      this.fire('close', this);
      this._isDropdown = false;
    }
  });

  (function(j3) {
    var DropdownDataList, __convertItemsToCollection, __createDataList, __dataList_beforeItemClick, __dataList_itemClick, __doSetSelectedValue, __getSelectedItemFromDatasourceBySelectedValue, __itemsDatasource_onChange, __refreshControlViaSelectedValue, _defaultItemDataSelector;
    __dataList_beforeItemClick = function(sender, args) {
      var commandArgs, selectedItem;
      selectedItem = args.data;
      if (selectedItem.divider || selectedItem.disabled) {
        args.stop = true;
      } else if (selectedItem.cmd) {
        args.stop = true;
        this.close();
        commandArgs = {
          name: selectedItem.cmd,
          data: selectedItem
        };
        if (this.onCommand) {
          this.onCommand(commandArgs);
        }
        this.fire('command', this, commandArgs);
      }
    };
    __dataList_itemClick = function(sender, args) {
      var selectedItem, theOtherDataList, triggerDataList;
      if (this.isUpdatingSubcomponent()) {
        return;
      }
      triggerDataList = sender;
      if (triggerDataList === this._dataList) {
        theOtherDataList = this._fixedDataList;
      } else {
        theOtherDataList = this._dataList;
      }
      theOtherDataList && theOtherDataList.setSelectedItems(null);
      selectedItem = args.data;
      if (!j3.equals(this._selectedValue, selectedItem.value)) {
        this._selectedValue = selectedItem.value;
        this.doSetSelectedItems(selectedItem);
        this.updateData();
        this.onChange && this.onChange();
        this.fire('change', this);
      }
      return this.close();
    };
    _defaultItemDataSelector = j3.compileSelector(['text', 'value', 'disabled', 'cmd', 'divider']);
    __convertItemsToCollection = function(items, datasource) {
      if (datasource) {
        return datasource;
      }
      if (!items) {
        return null;
      }
      datasource = new j3.Collection;
      j3.forEach(items, function(item) {
        var _ref;
        if ((_ref = item.value) == null) {
          item.value = item.text;
        }
        return datasource.insert(item);
      });
      return datasource;
    };
    __createDataList = function(ctnr, datasource, itemDataSelector, handlerItemClick) {
      var dataList;
      if (!datasource) {
        return null;
      }
      dataList = new DropdownDataList({
        parent: this,
        ctnr: ctnr,
        datasource: datasource,
        selectedItemOnClick: true,
        selectedItems: this._selectedItems,
        itemDataSelector: itemDataSelector,
        itemDataEquals: ['value'],
        on: {
          beforeItemClick: {
            c: this,
            h: __dataList_beforeItemClick
          },
          itemClick: {
            c: this,
            h: handlerItemClick
          }
        }
      });
      return dataList;
    };
    __doSetSelectedValue = function(value) {
      if (j3.equals(this._selectedValue, value)) {
        return false;
      }
      this._selectedValue = value;
      __refreshControlViaSelectedValue.call(this);
      return true;
    };
    __itemsDatasource_onChange = function() {
      return __refreshControlViaSelectedValue.call(this);
    };
    __refreshControlViaSelectedValue = function() {
      this.updateSubcomponent();
      this.doSetSelectedItems(__getSelectedItemFromDatasourceBySelectedValue.call(this, this._selectedValue));
      return this.updateData();
    };
    __getSelectedItemFromDatasourceBySelectedValue = function(selectedValue) {
      var fixedItemDataSelector, itemDataSelector, selectedItem;
      if (selectedValue === null) {
        return null;
      }
      selectedItem = null;
      if (this._fixedItemsDatasource) {
        fixedItemDataSelector = this._fixedItemDataSelector;
        this._fixedItemsDatasource.tryUntil(function(item) {
          var itemData;
          itemData = fixedItemDataSelector(item);
          if (itemData.cmd || itemData.divider) {
            return false;
          }
          if (itemData.value === selectedValue) {
            selectedItem = itemData;
            return true;
          }
        });
      }
      if (!selectedItem) {
        itemDataSelector = this._itemDataSelector;
        this._itemsDatasource.tryUntil(function(item) {
          var itemData;
          itemData = itemDataSelector(item);
          if (itemData.cmd || itemData.divider) {
            return false;
          }
          if (itemData.value === selectedValue) {
            selectedItem = itemData;
            return true;
          }
        });
      }
      return selectedItem;
    };
    j3.DropdownList = j3.cls(j3.Dropdown, {
      _selectedIndex: null,
      onInit: function(options) {
        j3.DropdownList.base().onInit.call(this, options);
        this._itemsDatasource = __convertItemsToCollection(options.items, options.itemsDatasource) || new j3.Collection;
        this._fixedItemsDatasource = __convertItemsToCollection(options.fixedItems, options.fixedItemsDatasource);
        this._itemDataSelector = j3.compileSelector(options.itemDataSelector || _defaultItemDataSelector);
        return this._fixedItemDataSelector = j3.compileSelector(options.fixedItemDataSelector || _defaultItemDataSelector);
      },
      onCreated: function(options) {
        j3.DropdownList.base().onCreated.call(this);
        if (j3.isUndefined(options.value)) {
          this.doSetSelectedItems(null);
        } else {
          __doSetSelectedValue.call(this, options.value);
        }
        this.setDatasource(options.datasource);
        this._itemsDatasource.on('refresh', this, __itemsDatasource_onChange);
        this._itemsDatasource.on('addModel', this, __itemsDatasource_onChange);
        return this._itemsDatasource.on('removeModel', this, __itemsDatasource_onChange);
      },
      onCreateDropdownBox: function(elBox) {
        if (this._fixedItemsDatasource) {
          this._fixedDataList = __createDataList.call(this, elBox, this._fixedItemsDatasource, this._fixedItemDataSelector, __dataList_itemClick);
        }
        return this._dataList = __createDataList.call(this, elBox, this._itemsDatasource, this._itemDataSelector, __dataList_itemClick);
      },
      getItemsDatasource: function() {
        return this._itemsDatasource;
      },
      getItems: function() {
        return this._items;
      },
      setItems: function(items) {
        var datasource;
        datasource = new j3.Collection;
        if (items) {
          j3.forEach(items, function(item) {
            var _ref;
            if ((_ref = item.value) == null) {
              item.value = item.text;
            }
            return datasource.insert(item);
          });
        }
        this._itemsDatasource = datasource;
        if (this._dataList) {
          return this._dataList.setDatasource(this._itemsDatasource);
        }
      },
      getSelectedValue: function() {
        return this._selectedValue;
      },
      setSelectedValue: function(value) {
        if (!__doSetSelectedValue.call(this, value)) {
          return;
        }
        this.onChange && this.onChange();
        return this.fire('change', this);
      },
      onSetSelectedItems: function() {
        var selectedItem;
        if (this.getMultiple()) {

        } else {
          selectedItem = this.getSelectedItem();
          this._selectedValue = selectedItem ? selectedItem.value : null;
          this.updateSubcomponent();
          return this.updateData();
        }
      },
      onUpdateData: function() {
        return this._datasource.set(this.name, this._selectedValue);
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        return this.setSelectedValue(datasource.get(this.name));
      },
      onUpdateSubcomponent: function() {
        var fixedItemDataSelector, itemDataSelector, selectedItem, selectedValue;
        if (!this._dataList) {
          return;
        }
        selectedValue = this._selectedValue;
        if (selectedValue === null) {
          if (this._fixedDataList) {
            this._fixedDataList.setSelectedItems(null);
          }
          this._dataList.setSelectedItems(null);
        } else {
          selectedItem = null;
          if (this._fixedDataList) {
            fixedItemDataSelector = this._fixedItemDataSelector;
            this._fixedItemsDatasource.tryUntil(function(item) {
              var itemData;
              itemData = fixedItemDataSelector(item);
              if (itemData.cmd || itemData.divider) {
                return;
              }
              if (itemData.value === selectedValue) {
                selectedItem = itemData;
                return true;
              }
            });
            this._fixedDataList.setSelectedItem(selectedItem);
          }
          if (!selectedItem) {
            itemDataSelector = this._itemDataSelector;
            this._itemsDatasource.tryUntil(function(item) {
              var itemData;
              itemData = itemDataSelector(item);
              if (itemData.cmd || itemData.divider) {
                return;
              }
              if (itemData.value === selectedValue) {
                selectedItem = itemData;
                return true;
              }
            });
            this._dataList.setSelectedItem(selectedItem);
          }
        }
      }
    });
    j3.ext(j3.DropdownList.prototype, j3.DataView);
    return DropdownDataList = j3.cls(j3.DataList, {
      css: 'drp-list',
      onRenderDataListItem: function(sb, dataListItem) {
        var itemData, textDisplay;
        itemData = this._itemDataSelector(dataListItem.data);
        if (j3.getVal(itemData, 'divider')) {
          return sb.a('<div class="drp-list-divider"></div>');
        } else {
          textDisplay = j3.getVal(itemData, 'text') || j3.getVal(itemData, 'name') || j3.getVal(itemData, 'value');
          sb.a('<a');
          if (j3.getVal(itemData, 'disabled')) {
            sb.a(' class="list-item-disabled"');
          }
          sb.a('>');
          sb.a(textDisplay);
          return sb.a('</a>');
        }
      }
    });
  })(j3);

  (function(j3) {
    var __getDataItemByValue, __setSelectedItemInternal, __tree_nodeClick, __tree_nodeExpand;
    __tree_nodeClick = function(sender, args) {
      var node, nodeData, selectedItem;
      node = args.node;
      if (node.getUnselectable()) {
        return;
      }
      this.close();
      selectedItem = null;
      if (node) {
        nodeData = node.getData();
        selectedItem = {
          text: j3.getVal(nodeData, this._itemsTextName),
          value: j3.getVal(nodeData, this._itemsValName)
        };
      }
      return __setSelectedItemInternal.call(this, selectedItem);
    };
    __tree_nodeExpand = function(sender, args) {
      return this.resizeDropdownBox();
    };
    __getDataItemByValue = function(value, callback) {
      var datasource;
      if (!value) {
        return callback(null);
      }
      datasource = this.getItemsDatasource();
      if (!datasource) {
        return;
      }
      return datasource.getById(value, callback);
    };
    __setSelectedItemInternal = function(selectedItem) {
      var selectedValue;
      selectedValue = (selectedItem && selectedItem.value) || null;
      if (this._selectedValue === selectedValue) {
        return;
      }
      this._selectedValue = selectedValue;
      this.updateData();
      this.doSetSelectedItems(selectedItem);
      return this.fire('change', this, {
        value: selectedValue
      });
    };
    j3.DropdownTree = j3.cls(j3.Dropdown, {
      onInit: function(options) {
        j3.DropdownTree.base().onInit.apply(this, arguments);
        this._treeOptions = options.treeOptions || {};
        this._textName = options.textName;
        this._itemsValName = options.itemsValName || this.name;
        return this._itemsTextName = options.itemsTextName || this._itemsValName;
      },
      onCreateDropdownBox: function(elBox) {
        var treeCls;
        treeCls = this._treeOptions.cls || j3.Tree;
        this._treeOptions.parent = this;
        this._treeOptions.ctnr = elBox;
        this._tree = new treeCls(this._treeOptions);
        this._tree.on('nodeClick', this, __tree_nodeClick);
        this._tree.on('nodeExpand', this, __tree_nodeExpand);
        return this.fire('treeLoad', this, {
          tree: this._tree
        });
      },
      onCreated: function(options) {
        j3.DropdownTree.base().onCreated.call(this);
        this._selectedValue = options.selectedValue;
        this.setDatasource(options.datasource);
        return this.setItemsDatasource(options.itemsDatasource);
      },
      onDropdown: function() {
        var topNode;
        topNode = this._tree.getTopNode();
        topNode.expand();
        return this._tree.setActiveNode(null);
      },
      getTree: function() {
        return this._tree;
      },
      getSelectedValue: function() {
        return this._selectedValue;
      },
      setSelectedValue: function(value) {
        var _this = this;
        if (this._selectedValue === value) {
          return;
        }
        return __getDataItemByValue.call(this, value, function(dataItem) {
          var selectedItem;
          if (dataItem) {
            selectedItem = {
              text: j3.getVal(dataItem, _this._itemsTextName),
              value: j3.getVal(dataItem, _this._itemsValName)
            };
          }
          return __setSelectedItemInternal.call(_this, selectedItem);
        });
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        return this.setSelectedValue(datasource.get(this.name));
      },
      onUpdateData: function() {
        var data, datasource;
        datasource = this.getDatasource();
        data = {};
        data[this.name] = this._selectedValue;
        if (this._textName) {
          data[this._textName] = this._selectedText;
        }
        return datasource.set(data, {
          append: true
        });
      },
      onUpdateViewItems: function(datasource, eventName, args) {}
    });
    return j3.ext(j3.DropdownTree.prototype, j3.DataView, j3.DataItemsView);
  })(j3);

  (function(j3) {
    var __calendar_change;
    __calendar_change = function(sender, args) {
      if (this.isUpdatingSubcomponent()) {
        return;
      }
      this.close();
      return this.setDate(args.curDate);
    };
    j3.DateSelector = j3.cls(j3.Dropdown, {
      cssTrigger: 'icon-calendar',
      onCreated: function(options) {
        j3.DateSelector.base().onCreated.call(this);
        this.setDate(options.date);
        return this.setDatasource(options.datasource);
      },
      onCreateDropdownBox: function(elBox) {
        this._calendar = new j3.Calendar({
          ctnr: elBox,
          date: this._date
        });
        return this._calendar.on('change', this, __calendar_change);
      },
      getDate: function() {
        return this._calendar.getCurrentDate();
      },
      setDate: function(date, internal) {
        var oldDate, selectedItem;
        if (j3.equals(this._date, date)) {
          return;
        }
        oldDate = this._date;
        this._date = date;
        if (!internal) {
          if (this._date) {
            selectedItem = {
              text: this._date.toString('yyyy-MM-dd'),
              value: this._date
            };
          }
          this.doSetSelectedItems(selectedItem);
        }
        this.updateData();
        return this.fire('change', this, {
          oldDate: oldDate,
          curDate: this._date
        });
      },
      onSetSelectedItems: function() {
        var selectedItem;
        selectedItem = this.getSelectedItem();
        this.setDate((selectedItem && selectedItem.value) || null, true);
        return this.updateSubcomponent();
      },
      onUpdateData: function() {
        return this._datasource.set(this.name, this._date);
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        this.setDate(datasource.get(this.name));
        return this.updateSubcomponent();
      },
      onUpdateSubcomponent: function() {
        if (this._calendar) {
          return this._calendar.setCurrentDate(this._date);
        }
      }
    });
    return j3.ext(j3.DateSelector.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    var __el_keypress;
    __el_keypress = function(evt) {
      if (evt.keyCode() === 32) {
        this.click();
        return evt.stop();
      }
    };
    j3.Switch = j3.cls(j3.View, {
      baseCss: 'swt',
      template: j3.template('<div id="<%=id%>" class="<%=css%>"><a href="javascript:;"><span class="swt-on">YES</span><span class="swt-btn"></span><span class="swt-off">NO</span></a></div>'),
      onInit: function(options) {
        return this._checked = !!options.checked;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._checked ? ' ' + this.baseCss + '-checked' : '')
        };
      },
      onCreated: function(options) {
        j3.on(this.el, 'click', this, this.click);
        j3.on(this.el, 'keypress', this, __el_keypress);
        return this.setDatasource(options.datasource);
      },
      getChecked: function() {
        return this._checked;
      },
      setChecked: function(checked) {
        if (this._checked === !!checked) {
          return;
        }
        j3.Dom.toggleCls(this.el, this.baseCss + '-checked');
        this._checked = !!checked;
        this.updateData();
        return this.fire('change', this);
      },
      click: function() {
        return this.setChecked(!this.getChecked());
      },
      onUpdateData: function() {
        return this._datasource.set(this.name, this._checked);
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        return this.setChecked(datasource.get(this.name));
      }
    });
    return j3.ext(j3.Switch.prototype, j3.DataView);
  })(j3);

  j3.UploadStatus = {
    waiting: 1,
    uploading: 2,
    succeeded: 4,
    failed: 8,
    cancelling: 16,
    cancelled: 32
  };

  (function(j3) {
    var UploadQueue, UploadStatus, __getActionUrl, __getNextUpload, __getUploadFileById, __tryUpload, __tryUploadByFormData, __tryUploadByFormSubmit, __upload_callback;
    UploadStatus = j3.UploadStatus;
    j3.UploadQueue = UploadQueue = j3.cls({
      ctor: function(options) {
        this.id = j3.View.genId();
        this._autoUpload = options.autoUpload;
        this._formsMap = {};
        this._filesMap = {};
        this._uploadFileCollection = new j3.Collection;
        options.on && this.on(options.on);
      },
      upload: function() {
        return __tryUpload.call(this);
      },
      getUploading: function() {
        return this._uploading;
      },
      addUpload: function(uploadInfo) {
        var uploadModel;
        uploadModel = this._uploadFileCollection.insert(j3.clone(uploadInfo, ['id', 'name', 'contextData', 'status', 'uploadUrl', 'passFileNameInActionUrl'], true));
        if (uploadInfo.file) {
          this._filesMap[uploadInfo.id] = uploadInfo.file;
        } else if (uploadInfo.form) {
          this._formsMap[uploadInfo.id] = uploadInfo.form;
        }
        this.fire('uploadAdd', this, {
          data: uploadModel
        });
        if (this._autoUpload) {
          return __tryUpload.call(this);
        }
      }
    });
    j3.ext(UploadQueue.prototype, j3.EventManager);
    __tryUpload = function() {
      if (window.FormData) {
        return __tryUploadByFormData.call(this);
      } else {
        return __tryUploadByFormSubmit.call(this);
      }
    };
    __getNextUpload = function(map) {
      var nextDoc, uploadId;
      if (this._uploading === true) {
        return null;
      }
      nextDoc = this._uploadFileCollection.tryUntil(function(model) {
        return model.get('status') === UploadStatus.waiting;
      });
      if (!nextDoc) {
        return null;
      }
      uploadId = nextDoc.get('id');
      return {
        id: uploadId,
        data: map[uploadId]
      };
    };
    __getActionUrl = function(uploadInfo) {
      var action, callbackName, contextData, key, uploadId, val;
      callbackName = '__j3UploadCallback' + this.id;
      action = j3.getVal(uploadInfo, 'uploadUrl') || '';
      uploadId = j3.getVal(uploadInfo, 'id');
      if (j3.indexOf('?') === -1) {
        action += '?uploadId=' + uploadId;
      } else {
        action += '&uploadId=' + uploadId;
      }
      if (j3.getVal(uploadInfo, 'passFileNameInActionUrl')) {
        action += "&fileName=" + (encodeURIComponent(j3.getVal(uploadInfo, 'name', '')));
      }
      contextData = j3.getVal(uploadInfo, 'contextData');
      if (contextData) {
        for (key in contextData) {
          val = contextData[key];
          action += "&" + key + "=" + (encodeURIComponent(val));
        }
      }
      action += '&callback=parent.' + callbackName;
      return action;
    };
    __tryUploadByFormData = function() {
      var action, doc, formData, upload, uploadFile, uploadId, xhr,
        _this = this;
      upload = __getNextUpload.call(this, this._filesMap);
      if (!upload) {
        return;
      }
      uploadId = upload.id;
      uploadFile = upload.data;
      if (!uploadFile) {
        return;
      }
      doc = __getUploadFileById.call(this, uploadId);
      doc.set('status', UploadStatus.uploading);
      this._uploading = true;
      this.fire('uploadStatusChange', this, {
        data: doc
      });
      formData = new FormData;
      formData.append('file', uploadFile);
      xhr = new XMLHttpRequest;
      action = __getActionUrl.call(this, doc);
      xhr.open('POST', action);
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.onload = function() {
        if (xhr.status === 200) {
          return __upload_callback.call(_this, j3.fromJson(xhr.responseText));
        } else {
          return __upload_callback.call(_this, {
            err: 'Error',
            msg: 'UploadError'
          });
        }
      };
      xhr.upload.onprogress = function(evt) {
        var progress;
        if (!event.lengthComputable) {
          return;
        }
        progress = event.loaded / event.total * 100 | 0;
        doc = __getUploadFileById.call(_this, uploadId);
        doc.set('progress', progress);
        return _this.fire('uploadProgressChange', _this, {
          data: doc
        });
      };
      return xhr.send(formData);
    };
    __tryUploadByFormSubmit = function() {
      var action, callbackName, doc, upload, uploadForm, uploadId,
        _this = this;
      upload = __getNextUpload.call(this, this._formsMap);
      if (!upload) {
        return;
      }
      uploadId = upload.id;
      uploadForm = upload.data;
      if (!uploadForm) {
        return;
      }
      doc = __getUploadFileById.call(this, uploadId);
      doc.set('status', UploadStatus.uploading);
      this._uploading = true;
      this.fire('uploadStatusChange', this, {
        data: doc
      });
      callbackName = '__j3UploadCallback' + this.id;
      window[callbackName] = function(result) {
        return __upload_callback.call(_this, result);
      };
      action = __getActionUrl.call(this, doc);
      uploadForm.action = action;
      return uploadForm.submit();
    };
    __getUploadFileById = function(id) {
      return this._uploadFileCollection.tryUntil(function(model) {
        return model.get('id') === id;
      });
    };
    return __upload_callback = function(data) {
      var doc, updateData;
      this._uploading = false;
      doc = __getUploadFileById.call(this, data.uploadId);
      if (!doc) {
        return;
      }
      if (data.err) {
        j3.MessageBar.error(data.msg);
        doc.set('status', UploadStatus.failed);
      } else {
        updateData = {
          status: UploadStatus.succeeded
        };
        if (data.document) {
          updateData.docId = data.document._id || data.document.id;
        }
        doc.set(updateData, {
          append: true
        });
      }
      this.fire('uploadStatusChange', this, {
        data: doc
      });
      return __tryUpload.call(this);
    };
  })(j3);

  (function(j3) {
    var UploadSelector, UploadStatus, __createUploadForm, __createUploadIFrame, __elFileInput_change, __elSelectLocal_click, __elSelectLocal_mouseover;
    UploadStatus = j3.UploadStatus;
    j3.UploadSelector = UploadSelector = j3.cls(j3.ContainerView, {
      baseCss: "upload-selector",
      onInit: function(options) {
        this._multiple = options.multiple;
        this._uploadUrl = options.uploadUrl;
        this._passFileNameInActionUrl = options.passFileNameInActionUrl;
        this._uploadQueue = options.uploadQueue;
        this._autoUpload = options.autoUpload;
        this._contextData = options.contextData;
        this._formsMap = {};
        this._filesMap = {};
        return this._triggers = [];
      },
      createChildren: function(options) {
        return this._uploadFileCollection = new j3.Collection;
      },
      renderChildren: function(sb) {},
      onCreated: function(options) {
        if (options.trigger) {
          return this.registerTrigger(options.trigger);
        }
      },
      reset: function() {
        this._formsMap = {};
        this._filesMap = {};
        this._lastFileInput = null;
        return this._uploadFileCollection.clear();
      },
      upload: function() {
        return __tryUpload.call(this);
      },
      getUploading: function() {
        return this._uploading;
      },
      getLastFileInput: function() {
        return this._lastFileInput;
      },
      registerTrigger: function(trigger) {
        if (j3["in"](this._triggers, trigger)) {
          return;
        }
        if (j3.UA.ie) {
          j3.on(trigger, 'mouseover', this, __elSelectLocal_mouseover);
        } else {
          j3.on(trigger, 'click', this, __elSelectLocal_click);
        }
        return this._triggers.push(trigger);
      },
      unregisterTrigger: function(trigger) {
        if (!j3["in"](this._triggers, trigger)) {
          return;
        }
        if (j3.UA.ie) {
          j3.on(trigger, 'mouseover', this, __elSelectLocal_mouseover);
        } else {
          j3.on(trigger, 'click', this, __elSelectLocal_click);
        }
        return j3.remove(this._triggers, trigger);
      },
      getUploadUrl: function() {
        return this._uploadUrl;
      },
      setUploadUrl: function(value) {
        return this._uploadUrl = value;
      },
      setContextData: function(value) {
        return this._contextData = value;
      },
      canTriggerFileSelect: function() {
        return !!window.FormData;
      },
      triggerFileSelect: function() {
        if (!this._lastFileInput || this._lastFileInput.value) {
          __createUploadForm.call(this);
        }
        return this._lastFileInput.click();
      }
    });
    __createUploadIFrame = function() {
      var sb;
      if (this._elUplaodIFrameCtnr) {
        return;
      }
      sb = new j3.StringBuilder;
      sb.a("<div style='width:0px;height:0px;overflow:hidden;'>");
      sb.a("<iframe class='uploader-iframe' name='" + this.id + "-iframe'></iframe>");
      sb.a("</div>");
      j3.Dom.append(this.el, sb.toString());
      return this._elUplaodIFrameCtnr = j3.Dom.lastChild(this.el);
    };
    __createUploadForm = function() {
      var elFileInput, form, sb;
      __createUploadIFrame.call(this);
      sb = new j3.StringBuilder;
      sb.a("<form class='uploader-form' target='" + this.id + "-iframe' method='POST' enctype='multipart/form-data'>");
      sb.a("<input type='file' class='uploader-file-input' name='file'");
      if (this._multiple) {
        sb.a(" multiple='true'");
      }
      sb.a(" title='" + this._tip + "' />");
      sb.a("</form>");
      j3.Dom.append(this._elUplaodIFrameCtnr, sb.toString());
      form = j3.Dom.lastChild(this._elUplaodIFrameCtnr);
      elFileInput = j3.Dom.byIndex(form, 0);
      j3.on(elFileInput, 'change', this, __elFileInput_change);
      this._lastFileInput = elFileInput;
      return form;
    };
    __elSelectLocal_mouseover = function(evt) {
      var Dom, pos, src;
      if (!this._lastFileInput || this._lastFileInput.value) {
        __createUploadForm.call(this);
      }
      Dom = j3.Dom;
      Dom.opacity(this._lastFileInput, 0.01);
      src = evt.src();
      pos = Dom.position(src);
      this._lastFileInput.style.position = 'absolute';
      this._lastFileInput.style.width = src.offsetWidth + 'px';
      this._lastFileInput.style.height = src.offsetHeight + 'px';
      return Dom.place(this._lastFileInput, pos.left, pos.top);
    };
    __elSelectLocal_click = function(evt) {
      return this.triggerFileSelect();
    };
    return __elFileInput_change = function(evt) {
      var basename, eachFile, form, input, uploadId, uploadInfo, uploadModel, _i, _len, _ref;
      input = evt.src();
      if (!input.value) {
        return;
      }
      input.style.position = '';
      if (window.FormData) {
        _ref = input.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eachFile = _ref[_i];
          basename = eachFile.name;
          uploadId = j3.guid();
          uploadInfo = {
            id: uploadId,
            name: basename,
            contextData: this._contextData,
            status: j3.UploadStatus.waiting,
            uploadUrl: this._uploadUrl,
            passFileNameInActionUrl: this._passFileNameInActionUrl,
            file: eachFile
          };
          this._uploadQueue.addUpload(uploadInfo);
        }
      } else {
        basename = j3.Path.basename(input.value);
        form = input.parentNode;
        uploadId = j3.guid();
        uploadModel = this._uploadFileCollection.insert({
          id: uploadId,
          name: basename,
          contextData: this._contextData,
          status: j3.UploadStatus.waiting,
          uploadUrl: this._uploadUrl,
          passFileNameInActionUrl: this._passFileNameInActionUrl,
          form: form
        });
        this._uploadQueue.addUpload(uploadInfo);
      }
    };
  })(j3);

  (function(j3) {
    var UploadStatus, Uploader, __createUploadForm, __createUploadIFrame, __elFileInput_change, __elIndicator_click, __elIndicator_drop, __elSelectLocal_click, __elSelectLocal_mouseover, __getActionUrl, __getNextUpload, __getUploadFileById, __tryUpload, __tryUploadByFormData, __tryUploadByFormSubmit, __uploadFileCollection_change, __uploadFileList_command, __uploadFileList_itemRenderer, __upload_callback;
    UploadStatus = j3.UploadStatus;
    j3.Uploader = Uploader = j3.cls(j3.ContainerView, {
      baseCss: "uploader",
      onInit: function(options) {
        this._enableDrop = options.enableDrop;
        this._actionUrl = options.actionUrl;
        this._dropIndicatorText = options.dragIndicatorText;
        this._selectLocalIndicatorText = options.selectLocalIndicatorText;
        this._removeConfirmText = options.removeConfirmText;
        this._autoUpload = options.autoUpload;
        this._formsMap = {};
        return this._filesMap = {};
      },
      createChildren: function(options) {
        this._uploadFileCollection = new j3.Collection({
          on: {
            addModel: {
              c: this,
              h: __uploadFileCollection_change
            },
            removeModel: {
              c: this,
              h: __uploadFileCollection_change
            },
            modelDataChange: {
              c: this,
              h: __uploadFileCollection_change
            }
          }
        });
        return this._uploadFileList = new j3.DataList({
          parent: this,
          css: 'uploader-file-list',
          datasource: this._uploadFileCollection,
          listItemRenderer: options.fileItemRenderer || __uploadFileList_itemRenderer,
          on: {
            command: {
              c: this,
              h: __uploadFileList_command
            }
          }
        });
      },
      renderChildren: function(sb) {
        sb.a("<div class='uploader-inner'>");
        this._uploadFileList.render(sb);
        sb.a("<div class='uploader-indicator'>");
        sb.a("<i class='uploader-icon'></i>");
        if (this._enableDrop) {
          sb.a("<span class='uploader-indicator-drop'>");
          sb.a(this._dropIndicatorText);
          sb.a("</span>");
        }
        sb.a("<a class='uploader-indicator-select uploader-indicator-select-local' href='javascript:;'>");
        sb.a(this._selectLocalIndicatorText);
        sb.a("</a>");
        sb.a("</div>");
        return sb.a("</div>");
      },
      onCreated: function(options) {
        var _this = this;
        this._elInner = j3.Dom.firstChild(this.el);
        this._elIndicator = j3.Dom.byIndex(this._elInner, 1);
        this._elSelectLocal = j3.Dom.byCls(this._elIndicator, 'uploader-indicator-select-local');
        j3.on(this._elIndicator, 'click', this, __elIndicator_click);
        if (true || __indexOf.call(this.el, 'draggable') >= 0) {
          this.el.ondragover = function() {
            return false;
          };
          this.el.ondragend = function() {
            return false;
          };
          this.el.ondrop = function(evt) {
            return __elIndicator_drop.call(_this, evt);
          };
        }
        if (j3.UA.ie) {
          j3.on(this._elSelectLocal, 'mouseover', this, __elSelectLocal_mouseover);
        } else {
          j3.on(this._elSelectLocal, 'click', this, __elSelectLocal_click);
        }
        return this.setDatasource(options.datasource);
      },
      onUpdateView: function(datasource, eventName, args) {
        var docs, eachDoc, list, _i, _len;
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        docs = datasource.get(this.name);
        list = [];
        if (docs) {
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            eachDoc = docs[_i];
            list.push({
              id: eachDoc.id,
              name: eachDoc.name,
              docId: eachDoc.docId || eachDoc.id,
              status: eachDoc.status || UploadStatus.succeeded,
              progress: eachDoc.progress
            });
          }
        }
        return this._uploadFileCollection.loadData(list);
      },
      reset: function() {
        this._formsMap = {};
        this._filesMap = {};
        this._lastFileInput = null;
        return this._uploadFileCollection.clear();
      },
      upload: function() {
        return __tryUpload.call(this);
      }
    });
    j3.ext(Uploader.prototype, j3.DataView);
    __uploadFileList_itemRenderer = function(sb, dataListItem) {
      var data, extname, filename, links, linksOptions, progress, status;
      data = dataListItem.data;
      filename = data.get('name');
      extname = j3.Path.extname(filename);
      if (extname) {
        extname = extname.substr(1);
      }
      links = [
        {
          cmd: 'remove',
          icon: 'icon-remove-doc',
          text: 'remove'
        }
      ];
      linksOptions = {
        css: 'action-links pull-right',
        commandMode: true
      };
      j3.LinkList.render(links, linksOptions, sb);
      sb.a('<div class="pull-right">');
      status = data.get('status');
      if (status === UploadStatus.uploading) {
        progress = data.get('progress');
        if (!j3.isUndefined(progress)) {
          sb.a("" + progress + "%");
        }
      }
      sb.a('</div>');
      sb.a('<div class="list-item-title">');
      sb.a('<i class="icon-files-small');
      if (extname) {
        sb.a(' icon-files-small-type-' + extname);
      }
      sb.a('"></i>');
      sb.e(data.get('name'));
      return sb.a('</div>');
    };
    __createUploadIFrame = function() {
      var sb;
      if (this._elUplaodIFrameCtnr) {
        return;
      }
      sb = new j3.StringBuilder;
      sb.a("<div style='width:0px;height:0px;overflow:hidden;'>");
      sb.a("<iframe class='uploader-iframe' name='" + this.id + "-iframe'></iframe>");
      sb.a("</div>");
      j3.Dom.append(this._elIndicator, sb.toString());
      return this._elUplaodIFrameCtnr = j3.Dom.lastChild(this._elIndicator);
    };
    __createUploadForm = function() {
      var elFileInput, form, sb;
      __createUploadIFrame.call(this);
      sb = new j3.StringBuilder;
      sb.a("<form class='uploader-form' target='" + this.id + "-iframe' method='POST' enctype='multipart/form-data'>");
      sb.a("<input type='file' class='uploader-file-input' name='file' multiple='true' title='" + this._selectLocalIndicatorText + "' />");
      sb.a("</form>");
      j3.Dom.append(this._elUplaodIFrameCtnr, sb.toString());
      form = j3.Dom.lastChild(this._elUplaodIFrameCtnr);
      elFileInput = j3.Dom.byIndex(form, 0);
      j3.on(elFileInput, 'change', this, __elFileInput_change);
      this._lastFileInput = elFileInput;
      return form;
    };
    __elIndicator_click = function(evt) {
      var cmd, el;
      el = evt.src();
      cmd = j3.Dom.data(el, 'cmd');
      return this.fire('command', this, {
        name: cmd
      });
    };
    __elSelectLocal_mouseover = function(evt) {
      var Dom, pos, src;
      if (!this._lastFileInput || this._lastFileInput.value) {
        __createUploadForm.call(this);
      }
      Dom = j3.Dom;
      Dom.opacity(this._lastFileInput, 0.01);
      src = evt.src();
      pos = Dom.position(src);
      this._lastFileInput.style.position = 'absolute';
      this._lastFileInput.style.width = src.offsetWidth + 'px';
      this._lastFileInput.style.height = src.offsetHeight + 'px';
      return Dom.place(this._lastFileInput, pos.left, pos.top);
    };
    __elSelectLocal_click = function(evt) {
      if (!this._lastFileInput || this._lastFileInput.value) {
        __createUploadForm.call(this);
      }
      return this._lastFileInput.click();
    };
    __elIndicator_drop = function(evt) {
      var basename, eachFile, files, uploadId, _i, _len;
      evt.preventDefault();
      files = event.dataTransfer.files;
      if (!files) {
        return;
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        eachFile = files[_i];
        basename = eachFile.name;
        uploadId = j3.guid();
        this._uploadFileCollection.insert({
          id: uploadId,
          name: basename,
          status: j3.UploadStatus.waiting
        });
        this._filesMap[uploadId] = eachFile;
      }
      if (this._autoUpload) {
        return __tryUpload.call(this);
      }
    };
    __elFileInput_change = function(evt) {
      var basename, eachFile, form, input, uploadId, _i, _len, _ref;
      input = evt.src();
      if (!input.value) {
        return;
      }
      input.style.position = '';
      if (window.FormData) {
        _ref = input.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eachFile = _ref[_i];
          basename = eachFile.name;
          uploadId = j3.guid();
          this._uploadFileCollection.insert({
            id: uploadId,
            name: basename,
            status: j3.UploadStatus.waiting
          });
          this._filesMap[uploadId] = eachFile;
        }
      } else {
        basename = j3.Path.basename(input.value);
        form = input.parentNode;
        uploadId = j3.guid();
        this._uploadFileCollection.insert({
          id: uploadId,
          name: basename,
          status: j3.UploadStatus.waiting
        });
        this._formsMap[uploadId] = form;
      }
      if (this._autoUpload) {
        return __tryUpload.call(this);
      }
    };
    __tryUpload = function() {
      if (window.FormData) {
        return __tryUploadByFormData.call(this);
      } else {
        return __tryUploadByFormSubmit.call(this);
      }
    };
    __getNextUpload = function(map) {
      var nextDoc, uploadId;
      if (this._uploading === true) {
        return null;
      }
      nextDoc = this._uploadFileCollection.tryUntil(function(model) {
        return model.get('status') === UploadStatus.waiting;
      });
      if (!nextDoc) {
        return null;
      }
      uploadId = nextDoc.get('id');
      return {
        id: uploadId,
        data: map[uploadId]
      };
    };
    __getActionUrl = function(uploadId) {
      var action, callbackName;
      callbackName = '__j3UploadCallback' + this.id;
      action = this._actionUrl || '';
      if (j3.indexOf('?') === -1) {
        action += '?uploadId=' + uploadId;
      } else {
        action += '&uploadId=' + uploadId;
      }
      action += '&callback=parent.' + callbackName;
      return action;
    };
    __tryUploadByFormData = function() {
      var action, doc, formData, upload, uploadFile, uploadId, xhr,
        _this = this;
      upload = __getNextUpload.call(this, this._filesMap);
      if (!upload) {
        return;
      }
      uploadId = upload.id;
      uploadFile = upload.data;
      if (!uploadFile) {
        return;
      }
      doc = __getUploadFileById.call(this, uploadId);
      doc.set('status', UploadStatus.uploading);
      this._uploading = true;
      formData = new FormData;
      formData.append('file', uploadFile);
      xhr = new XMLHttpRequest;
      action = __getActionUrl.call(this, uploadId);
      xhr.open('POST', action);
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.onload = function() {
        if (xhr.status === 200) {
          return __upload_callback.call(_this, j3.fromJson(xhr.responseText));
        } else {
          return __upload_callback.call(_this, {
            err: 'Error',
            msg: 'UploadError'
          });
        }
      };
      xhr.upload.onprogress = function(evt) {
        var progress;
        if (!event.lengthComputable) {
          return;
        }
        progress = event.loaded / event.total * 100 | 0;
        doc = __getUploadFileById.call(_this, uploadId);
        return doc.set('progress', progress);
      };
      return xhr.send(formData);
    };
    __tryUploadByFormSubmit = function() {
      var action, callbackName, doc, upload, uploadForm, uploadId,
        _this = this;
      upload = __getNextUpload.call(this, this._formsMap);
      if (!upload) {
        return;
      }
      uploadId = upload.id;
      uploadForm = upload.data;
      if (!uploadForm) {
        return;
      }
      doc = __getUploadFileById.call(this, uploadId);
      doc.set('status', UploadStatus.uploading);
      this._uploading = true;
      callbackName = '__j3UploadCallback' + this.id;
      window[callbackName] = function(result) {
        return __upload_callback.call(_this, result);
      };
      action = __getActionUrl.call(this, uploadId);
      uploadForm.action = action;
      return uploadForm.submit();
    };
    __getUploadFileById = function(id) {
      return this._uploadFileCollection.tryUntil(function(model) {
        return model.get('id') === id;
      });
    };
    __upload_callback = function(data) {
      var doc;
      this._uploading = false;
      doc = __getUploadFileById.call(this, data.uploadId);
      if (!doc) {
        return;
      }
      if (data.err) {
        j3.MessageBar.error(data.msg);
        doc.set('status', UploadStatus.failed);
      } else {
        doc.set({
          status: UploadStatus.succeeded,
          docId: data.document._id || data.document.id
        }, {
          append: true
        });
      }
      return __tryUpload.call(this);
    };
    __uploadFileCollection_change = function(sender, args) {
      var docs;
      if (this.isUpdatingView()) {
        return;
      }
      docs = [];
      sender.forEach(function(eachDoc) {
        var doc;
        doc = eachDoc.getData();
        if (doc.status === UploadStatus.succeeded) {
          doc.id = doc.docId;
        }
        return docs.push(doc);
      });
      return this.getDatasource().set(this.name, docs);
    };
    return __uploadFileList_command = function(sender, args) {
      var fileData;
      fileData = args.data;
      return j3.MessageBox.confirm(null, this._removeConfirmText, this, function() {
        return this._uploadFileCollection.removeById(fileData.get('id'));
      });
    };
  })(j3);

  (function(j3) {
    return j3.Toolbar = j3.cls(j3.ContainerView, {
      baseCss: 'toolbar',
      onCreateChild: function(options, args) {
        var _ref, _ref1;
        if ((_ref = options.cls) == null) {
          options.cls = j3.Button;
        }
        if ((_ref1 = options.css) == null) {
          options.css = '';
        }
        if (args.first) {
          options.css += ' first';
        }
        if (args.last) {
          return options.css += ' last';
        }
      }
    });
  })(j3);

  (function(j3) {
    var __form_submit;
    __form_submit = function(evt) {
      try {
        this.action('ok');
      } catch (ex) {
        window['console'] && window['console'].log("" + ex.name + ": " + ex.message);
      }
      if (this._target === 'ajax') {
        evt.stop();
      }
    };
    j3.Form = j3.cls(j3.ContainerView, {
      baseCss: 'form',
      templateBegin: j3.template('<form id="<%=id%>" class="<%=css%>" method="<%=method%>" target="<%=target%>"><%if(title){%><div class="form-title"><%-title%></div><%}%>'),
      templateEnd: j3.template('</form>'),
      onInit: function(options) {
        this._method = options.method || 'POST';
        this._target = options.target || 'ajax';
        this._narrowLabel = !!options.narrowLabel;
        this._stackedLabel = !!options.stackedLabel;
        this._datasource = options.datasource;
        return this._title = options.title;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._narrowLabel ? ' form-narrow-label' : '') + (this._stackedLabel ? ' form-stacked-label' : ''),
          method: this._method,
          target: this._target,
          title: this._title
        };
      },
      onCreated: function() {
        return j3.on(this.el, 'submit', this, __form_submit);
      },
      onCreateChild: function(options) {
        options.form = this;
        if (this._datasource && !options.datasource) {
          return options.datasource = this._datasource;
        }
      },
      getDatasource: function() {
        return this._datasource;
      },
      getFormItemByName: function(name) {
        var node;
        if (!this.children) {
          return null;
        }
        node = this.children.firstNode();
        while (node) {
          if (node.value.name === name) {
            return node.value;
          }
          node = node.next;
        }
        return null;
      },
      getActionButtonByName: function(name) {
        var node;
        if (!this.children) {
          return null;
        }
        node = this.children.firstNode();
        while (node) {
          if (node.value.getActionButtonByName) {
            return node.value.getActionButtonByName(name);
          }
          node = node.next;
        }
        return null;
      },
      action: function(name, src) {
        var args;
        args = {
          name: name,
          src: src
        };
        if (typeof this.onAction === "function") {
          this.onAction(args);
        }
        return this.fire('action', this, args);
      },
      getTarget: function() {
        return this._target;
      },
      focus: function() {
        if (!this.children) {
          return false;
        }
        this.children.tryUntil(function(child) {
          return child.focus && child.focus();
        });
        return true;
      }
    });
    return j3.ext(j3.Form.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    return j3.FormDivider = j3.cls(j3.View, {
      baseCss: 'form-divider',
      template: j3.template('<div id=<%=id%> class=<%=css%>></div>')
    });
  })(j3);

  (function(j3) {
    var FormItem, TextFormItem, __getDefaultFormControlOption;
    __getDefaultFormControlOption = function(formItem, formItemOptions) {
      return {
        parent: formItem,
        datasource: formItemOptions.datasource,
        id: formItemOptions.id,
        name: formItemOptions.name,
        width: formItemOptions.controlWidth,
        height: formItemOptions.controlHeight,
        fill: formItemOptions.controlFill,
        on: formItemOptions.on
      };
    };
    j3.FormItem = FormItem = j3.cls(j3.ContainerView, {
      baseCss: 'form-item',
      onInit: function(options) {
        var _ref;
        this._label = options.label;
        this._inline = options.inline;
        this._stacked = options.stacked;
        this._compact = options.compact;
        this._nolabel = options.nolabel;
        this._isFirst = options.isFirst;
        this._helpText = options.helpText;
        if (!options.controlId) {
          options.controlId = j3.View.genId();
        }
        this._controlId = options.controlId;
        if ((_ref = options.datasource) == null) {
          options.datasource = this.parent.getDatasource();
        }
        return this._formItemDatasource = options.datasource;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          label: this._label,
          css: this.getCss() + (this._inline ? ' ' + this.baseCss + '-inline' : '') + (this._stacked ? ' ' + this.baseCss + '-stacked' : '') + (this._compact ? ' ' + this.baseCss + '-compact' : '') + (this._nolabel ? ' ' + this.baseCss + '-nolabel' : '') + (this._isFirst ? ' ' + this.baseCss + '-first' : ''),
          controlId: this._controlId,
          helpText: this._helpText
        };
      },
      renderBegin: function(sb, templateData) {
        sb.a('<div id="' + templateData.id + '" class="' + templateData.css + '">');
        sb.a('<label class="form-label" for="' + this._controlId + '">');
        this.renderLabelContent(sb);
        sb.a('</label>');
        sb.a('<div class="form-controls">');
      },
      renderEnd: function(sb, templateData) {
        if (this._helpText) {
          sb.a('<div class="form-help">');
          sb.a(this._helpText);
          sb.a('</div>');
        }
        sb.a('</div>');
        sb.a('</div>');
      },
      renderLabelContent: function(sb) {
        sb.e(this._label);
      },
      onCreated: function() {
        return this.elBody = j3.Dom.byIndex(this.el, 1);
      },
      getDatasource: function() {
        return this._formItemDatasource;
      },
      createFormControl: function(formItemOptions, formControlOptions) {
        return new formControlOptions.cls(j3.ext(__getDefaultFormControlOption(this, formItemOptions), formControlOptions));
      },
      setDisabled: function() {},
      getControlId: function() {
        return this._controlId;
      }
    });
    j3.TextFormItem = TextFormItem = j3.cls(j3.FormItem, {
      onInit: function(options) {
        TextFormItem.base().onInit.call(this, options);
        return this.name = options.name;
      },
      createChildren: function(options) {
        var text;
        text = '';
        if (options.datasource) {
          text = options.datasource.get(this.name);
        }
        return this._text = this.createFormControl(options, {
          cls: j3.HtmlView,
          id: this.getControlId(),
          tagName: 'div',
          css: 'form-item-text',
          innerHTML: j3.htmlEncode(text)
        });
      },
      onCreated: function(options) {
        TextFormItem.base().onCreated.call(this, options);
        this._elText = this._text.el;
        if (options.datasource) {
          return this.setDatasource(options.datasource);
        }
      },
      val: function() {
        var datasource;
        datasource = this.getDatasource();
        if (!datasource) {
          return null;
        } else {
          return datasource.get(this.name);
        }
      },
      setDisabled: function(value) {
        if (value) {
          return j3.Dom.addCls(this._elText, 'form-item-text-disabled');
        } else {
          return j3.Dom.removeCls(this._elText, 'form-item-text-disabled');
        }
      },
      onUpdateView: function(datasource, eventName, args) {
        if (args && args.changedData && !args.changedData.hasOwnProperty(this.name)) {
          return;
        }
        this._elText.innerHTML = j3.htmlEncode(datasource.get(this.name));
      }
    });
    j3.ext(j3.TextFormItem.prototype, j3.DataView);
    j3.TextboxFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._textbox = this.createFormControl(options, {
          cls: j3.Textbox,
          id: this.getControlId(),
          text: options.value,
          multiline: options.multiline,
          type: options.type,
          placeholder: options.placeholder,
          disabled: options.disabled,
          autoHeight: options.controlAutoHeight
        });
      },
      textbox: function() {
        return this._textbox;
      },
      val: function() {
        return this._textbox.getText();
      },
      focus: function() {
        return this._textbox.focus();
      },
      setDisabled: function(value) {
        return this._textbox.setDisabled(value);
      }
    });
    j3.CheckboxFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._checkbox = this.createFormControl(options, {
          cls: j3.Checkbox,
          id: this.getControlId(),
          text: options.text,
          value: options.value,
          bindingMode: options.bindingMode,
          disabled: options.disabled
        });
      },
      checkbox: function() {
        return this._checkbox;
      },
      val: function() {
        return this._checkbox.getValue();
      },
      setDisabled: function(value) {
        return this._checkbox.setDisabled(value);
      }
    });
    j3.CheckboxListFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._checkboxList = this.createFormControl(options, {
          cls: j3.CheckboxList,
          id: this.getControlId(),
          items: options.items,
          itemsDatasource: options.itemsDatasource,
          itemInline: options.listItemInline,
          itemWidth: options.listItemWidth,
          bindingMode: options.bindingMode,
          disabled: options.disabled
        });
      },
      checkboxList: function() {
        return this._checkboxList;
      },
      val: function() {
        return this._checkboxList.getSelectedValue();
      },
      setDisabled: function(value) {
        return this._checkboxList.setDisabled(value);
      }
    });
    j3.DropdownListFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._dropdownList = this.createFormControl(options, {
          cls: j3.DropdownList,
          id: this.getControlId(),
          items: options.items,
          itemsDatasource: options.itemsDatasource,
          fixedItemsDatasource: options.fixedItemsDatasource,
          itemDataSelector: options.itemDataSelector,
          fixedItemDataSelector: options.fixedItemDataSelector,
          value: options.value,
          placeholder: options.placeholder,
          icon: options.controlIcon,
          disabled: options.disabled
        });
      },
      dropdownList: function() {
        return this._dropdownList;
      },
      val: function() {
        return this._dropdownList.getSelectedValue();
      },
      setDisabled: function(value) {
        return this._dropdownList.setDisabled(value);
      }
    });
    j3.DropdownTreeFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._dropdownTree = this.createFormControl(options, {
          cls: j3.DropdownTree,
          id: this.getControlId(),
          placeholder: options.placeholder,
          treeOptions: options.treeOptions,
          textName: options.textName,
          itemsValName: options.itemsValName,
          itemsTextName: options.itemsTextName,
          itemsDatasource: options.itemsDatasource,
          icon: options.controlIcon,
          disabled: options.disabled
        });
      },
      dropdownTree: function() {
        return this._dropdownTree;
      },
      val: function() {
        return this._dropdownTree.getSelectedValue();
      },
      setDisabled: function(value) {
        return this._dropdownTree.setDisabled(value);
      }
    });
    j3.DateSelectorFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._dateSelector = this.createFormControl(options, {
          cls: j3.DateSelector,
          id: this.getControlId(),
          date: options.value,
          placeholder: options.placeholder,
          icon: options.controlIcon,
          disabled: options.disabled
        });
      },
      dateSelector: function() {
        return this._dateSelector;
      },
      val: function() {
        return this._dateSelector.getDate();
      },
      setDisabled: function(value) {
        return this._dateSelector.setDisabled(value);
      }
    });
    j3.DateDurationFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        this._beginDateSelector = this.createFormControl(options, {
          cls: j3.DateSelector,
          id: this.getControlId(),
          date: options.beginValue,
          placeholder: options.beginPlaceholder,
          name: options.beginName,
          mini: true,
          icon: options.beginControlIcon,
          disabled: options.disabled
        });
        return this._endDateSelector = this.createFormControl(options, {
          cls: j3.DateSelector,
          date: options.endValue,
          placeholder: options.endPlaceholder,
          name: options.endName,
          mini: true,
          icon: options.endControlIcon,
          disabled: options.disabled
        });
      },
      renderChildren: function(sb) {
        this._beginDateSelector.render(sb);
        sb.a('<span class="form-controls-connector">-</span>');
        return this._endDateSelector.render(sb);
      },
      setDisabled: function(value) {
        this._beginDateSelector.setDisabled(value);
        return this._endDateSelector.setDisabled(value);
      }
    });
    return j3.SwitchFormItem = j3.cls(j3.FormItem, {
      createChildren: function(options) {
        return this._switch = this.createFormControl(options, {
          cls: j3.Switch,
          id: this.getControlId(),
          checked: options.value
        });
      },
      "switch": function() {
        return this._switch;
      },
      val: function() {
        return this._switch.getChecked();
      }
    });
  })(j3);

  (function(j3) {
    var FormItemGroup, __defaultFormToItemModelConvertor, __defaultItemToFormModelConvertor, __subItemModel_change, __subItemsDatasource_change;
    __subItemsDatasource_change = function(sender, args) {
      return this.updateData();
    };
    __subItemModel_change = function(sender, args) {
      return this.updateData();
    };
    __defaultFormToItemModelConvertor = function(formModelData) {
      return formModelData;
    };
    __defaultItemToFormModelConvertor = function(itemModel) {
      return itemModel.getData();
    };
    j3.FormItemGroup = FormItemGroup = j3.cls(j3.ContainerView, {
      baseCss: 'form-item-group',
      onInit: function(options) {
        this._bindingMode = options.bindingMode || 'individual';
        this._childOptionsProvider = options.childOptionsProvider;
        this._formToItemModelConvertor = options.formToItemModelConvertor || __defaultFormToItemModelConvertor;
        this._itemToFormModelConvertor = options.itemToFormModelConvertor || __defaultItemToFormModelConvertor;
        this.setDatasource(options.datasource);
      },
      createChildren: function(options) {
        if (this._bindingMode === 'map') {
          this._subItemsDatasource = new j3.Model;
          this._subItemsDatasource.on('change', this, __subItemsDatasource_change);
        }
        if (options.itemsDatasource) {
          options.itemsDatasource.bind(this, this.onUpdateItems);
        } else {
          FormItemGroup.base().createChildren.call(this, options);
        }
      },
      createChildFormItem: function(item, args) {
        var childOptions;
        childOptions = this._childOptionsProvider(item);
        this.createChild(childOptions, args);
      },
      onCreateChild: function(options) {
        var itemModel;
        if (this._bindingMode === 'map') {
          options.datasource = this._subItemsDatasource;
        }
        if (this._bindingMode === 'array') {
          itemModel = new j3.Model;
          itemModel.on('change', this, __subItemModel_change);
          itemModel.on('refresh', this, __subItemModel_change);
          options.datasource = itemModel;
        }
      },
      onUpdateData: function() {
        var subItemsValue;
        if (this._bindingMode === 'individual') {
          return;
        }
        if (this._bindingMode === 'map') {
          this.getDatasource().set(this.name, this._subItemsDatasource.getData());
          return;
        }
        if (this._bindingMode === 'array') {
          subItemsValue = this.getDatasource().get(this.name);
          if (!subItemsValue) {
            subItemsValue = [];
          }
          j3.forEach(this.getChildren(), this, function(child, args, index) {
            var formModelData, originFormModelData;
            originFormModelData = null;
            if (index < subItemsValue.length) {
              originFormModelData = subItemsValue[index];
            }
            formModelData = this._itemToFormModelConvertor(child.getDatasource(), child, originFormModelData);
            if (index < subItemsValue.length) {
              return subItemsValue[index] = formModelData;
            } else {
              return subItemsValue.push(formModelData);
            }
          });
          this.getDatasource().set(this.name, subItemsValue);
        }
      },
      onUpdateView: function(datasource, eventName, args) {
        var subItemsValue;
        if (this._bindingMode === 'individual') {
          return;
        }
        subItemsValue = this.getDatasource().get(this.name);
        if (this._bindingMode === 'map') {
          this._subItemsDatasource.set(subItemsValue || {});
          return;
        }
        if (this._bindingMode === 'array') {
          if (!subItemsValue) {
            subItemsValue = [];
          }
          j3.forEach(this.getChildren(), this, function(child, args, index) {
            var itemModelData;
            itemModelData = this._formToItemModelConvertor(subItemsValue[index], child);
            return child.getDatasource().set(itemModelData || {});
          });
        }
      },
      onUpdateItems: function(datasource, eventName, args) {
        var childArgs, lastIndex;
        if (this._updatingItems) {
          return;
        }
        this._updatingItems = true;
        if (this.el) {
          this.getChildren().clear();
          this.el.innerHTML = '';
        }
        childArgs = {};
        lastIndex = datasource.count() - 1;
        datasource.forEach(this, function(item, args, index) {
          var childOptions;
          childArgs.index = index;
          childArgs.first = index === 0;
          childArgs.last = index === lastIndex;
          childOptions = this._childOptionsProvider(item, childArgs);
          childOptions.parent = this;
          return this.createChild(childOptions, childArgs);
        });
        this._updatingItems = false;
      }
    });
    return j3.ext(FormItemGroup.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    var __actionButton_click;
    __actionButton_click = function(sender, args) {
      if (!sender.getPrimary()) {
        return this._form.action(sender.name, sender);
      }
    };
    return j3.FormActions = j3.cls(j3.ContainerView, {
      baseCss: 'form-actions',
      templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>">'),
      templateEnd: j3.template('</div>'),
      onInit: function(options) {
        var _ref;
        this._form = options.form;
        if ((_ref = this._form) == null) {
          this._form = options.parent;
        }
        return this._align = options.align;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._align === 'right' ? ' ' + this.baseCss + '-right' : '') + (this._align === 'left' ? ' ' + this.baseCss + '-left' : '') + (this._align === 'center' ? ' ' + this.baseCss + '-center' : '')
        };
      },
      onCreateChild: function(options) {
        if (!options.cls) {
          return options.cls = j3.Button;
        }
      },
      onChildCreated: function(child) {
        return child.on('click', this, __actionButton_click);
      },
      getActionButtonByName: function(name) {
        var node;
        if (!this.children) {
          return null;
        }
        node = this.children.firstNode();
        while (node) {
          if (node.value.name === name) {
            return node.value;
          }
          node = node.next;
        }
        return null;
      }
    });
  })(j3);

  (function(j3) {
    var MenuItem;
    j3.MenuItem = MenuItem = j3.cls(j3.View, {
      baseCss: 'menu-item',
      onInit: function(options) {
        this._text = options.text || '';
        this._url = options.url;
        this._divider = options.divider;
        return this._items = options.items || [];
      },
      getText: function() {
        return this._text;
      },
      getUrl: function() {
        return this._url;
      },
      getDivider: function() {
        return this._divider;
      }
    });
    return MenuItem.render = function(sb, options) {
      var css;
      css = 'menu-item';
      if (options.divider) {
        css += ' menu-divider';
      }
      sb.a('<li class="' + css + '">');
      if (options.divider) {
        sb.a('</li>');
        return;
      }
      sb.a('<a');
      if (options.url) {
        sb.a(' href="' + options.url + '"');
      }
      sb.a(' data-cmd="');
      sb.a(options.name || '');
      sb.a('">');
      sb.a('<i');
      if (options.icon) {
        sb.a('class="' + options.icon + '"');
      }
      sb.a('></i>');
      sb.e(options.text || '');
      return sb.a('</li>');
    };
  })(j3);

  (function(j3) {
    var __genMenuItems, __hMenuClick, __hideDividers, __renderMenuItems, __updateItemsUI;
    j3.Menu = j3.cls(j3.View, {
      baseCss: 'menu',
      template: j3.template('<div id="<%=id%>" class="<%=css%>"></div>'),
      onInit: function(options) {
        return this._items = options.items || [];
      },
      onCreated: function(options) {
        this._hidden = true;
        return j3.on(this.el, 'click', this, __hMenuClick);
      },
      popup: function(options) {
        var Dom, posX, posY, position, trigger, triggerHeight;
        Dom = j3.Dom;
        __genMenuItems.call(this);
        if (options.contextData) {
          this._contextData = options.contextData;
        }
        trigger = options.trigger;
        if (trigger) {
          position = Dom.position(trigger);
          triggerHeight = trigger.offsetHeight;
          options.x = position.left;
          if (options.alignRight) {
            options.x += trigger.offsetWidth;
          }
          options.y = position.top + triggerHeight;
        }
        __updateItemsUI.call(this);
        __hideDividers.call(this);
        this.show();
        if (options.width) {
          this.width(options.width);
        } else {
          this.width(-1);
        }
        posX = options.x;
        posY = options.y;
        if (options.alignRight) {
          posX -= this.el.offsetWidth;
        }
        Dom.place(this.el, posX, posY);
        return j3.regPopup(this, 'menu', trigger);
      },
      close: function() {
        this.hide();
        j3.unregPopup(this, 'menu');
        return this.fire('close', this);
      },
      getContextData: function() {
        return this._contextData;
      },
      setContextData: function(value) {
        if (this._contextData === value) {
          return;
        }
        return this._contextData = value;
      }
    });
    __renderMenuItems = function(sb, items) {
      var item, _i, _len;
      sb.a('<ul class="menu-items">');
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        j3.MenuItem.render(sb, item);
      }
      return sb.a('</ul>');
    };
    __genMenuItems = function() {
      var buffer, elMenuItem, i, item, _results;
      if (this._elMenuItems) {
        return;
      }
      buffer = new j3.StringBuilder;
      __renderMenuItems.call(this, buffer, this._items);
      this.el.innerHTML = buffer.toString();
      this._elMenuItems = this.el.firstChild;
      this._menuItems = [];
      elMenuItem = this._elMenuItems.firstChild;
      i = 0;
      _results = [];
      while (elMenuItem) {
        item = this._items[i];
        this._menuItems.push(new j3.MenuItem({
          parent: this,
          el: elMenuItem,
          divider: item.divider,
          text: item.text,
          name: item.name,
          icon: item.icon
        }));
        elMenuItem = elMenuItem.nextSibling;
        _results.push(i++);
      }
      return _results;
    };
    __hMenuClick = function(evt) {
      var cmd, cmdArgs, el;
      el = evt.src();
      while (el && el !== this.el) {
        if (el.tagName === 'A') {
          cmd = el.attributes['data-cmd'];
          if (cmd && cmd.nodeValue) {
            evt.stop();
            this.close();
            cmdArgs = {
              name: cmd.nodeValue,
              contextData: this._contextData
            };
            this.onCommand && this.onCommand(cmdArgs);
            this.fire('command', this, cmdArgs);
            return;
          }
        }
        el = el.parentNode;
      }
    };
    __updateItemsUI = function() {
      var menuItem, _i, _len, _ref, _results;
      if (!this._menuItems) {
        return;
      }
      _ref = this._menuItems;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        menuItem = _ref[_i];
        _results.push(this.fire('updateItemUI', this, {
          name: menuItem.name,
          item: menuItem,
          contextData: this._contextData
        }));
      }
      return _results;
    };
    return __hideDividers = function() {
      var isFirst, menuItem, prevVisibleDividerItem, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this._menuItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        menuItem = _ref[_i];
        if (menuItem.getDivider()) {
          menuItem.setVisible(true);
        }
      }
      isFirst = true;
      prevVisibleDividerItem = null;
      _ref1 = this._menuItems;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        menuItem = _ref1[_j];
        if (menuItem.getDivider()) {
          if (isFirst || prevVisibleDividerItem) {
            menuItem.setVisible(false);
          } else {
            menuItem.setVisible(true);
            prevVisibleDividerItem = menuItem;
          }
        } else if (menuItem.getVisible()) {
          isFirst = false;
          prevVisibleDividerItem = null;
        }
      }
      if (prevVisibleDividerItem) {
        return prevVisibleDividerItem.setVisible(false);
      }
    };
  })(j3);

  (function(j3) {
    return j3.Navbar = j3.cls(j3.ContainerView, {
      baseCss: 'navbar',
      onInit: function(options) {
        return this.fixedTop = !!options.fixedTop;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this.fixedTop ? ' ' + this.baseCss + '-fixed-top' : '')
        };
      }
    });
  })(j3);

  (function(j3) {
    var LinkList, __hElClick, __isLinkEnabled, __refreshLinks;
    __hElClick = function(evt) {
      var Dom, cmd, data, el;
      if (!this._commandMode) {
        return;
      }
      Dom = j3.Dom;
      el = evt.src();
      while (el && el !== this.el) {
        if (el.tagName === 'A') {
          cmd = Dom.data(el, 'cmd');
          if (!cmd) {
            continue;
          }
          data = Dom.data(el, 'data');
          evt.stop();
          if (__isLinkEnabled(el)) {
            this.fire('command', this, {
              src: el,
              name: cmd,
              data: data
            });
          }
          return;
        }
        el = el.parentNode;
      }
    };
    __isLinkEnabled = function(el) {
      return !!el.href;
    };
    __refreshLinks = function() {
      var list, options, sb;
      sb = new j3.StringBuilder;
      list = this.getDatasource() || this._items || [];
      options = {
        target: this._linkTarget,
        commandMode: this._commandMode
      };
      LinkList.renderList(sb, list, options);
      return this.el.innerHTML = sb.toString();
    };
    j3.LinkList = LinkList = j3.cls(j3.View, {
      baseCss: 'link-list',
      onInit: function(options) {
        this._linkTarget = options.linkTarget;
        this._commandMode = options.commandMode;
        if (options.items) {
          this._items = options.items;
        }
        return this.setDatasource(options.datasource);
      },
      onCreated: function(options) {
        if (this._commandMode) {
          return j3.on(this.el, 'click', this, __hElClick);
        }
      },
      onRender: function(buffer) {
        var datasource, options;
        datasource = this.getDatasource() || this._items || [];
        options = {
          id: this.id,
          css: this.getCss(),
          target: this._linkTarget,
          commandMode: this._commandMode
        };
        return LinkList.render(datasource, options, buffer);
      },
      onUpdateView: function(datasource) {
        if (!this.el) {
          return;
        }
        return __refreshLinks.call(this);
      },
      setItems: function(value) {
        this._items = value;
        return __refreshLinks.call(this);
      }
    });
    j3.ext(LinkList.prototype, j3.DataView);
    return j3.ext(LinkList, {
      render: function(list, options, buffer) {
        var sb;
        sb = buffer ? buffer : new j3.StringBuilder;
        sb.a('<ul');
        if (options.id) {
          sb.a(' id="' + options.id + '"');
        }
        if (options.css) {
          sb.a(' class="' + options.css + '"');
        }
        sb.a('>');
        LinkList.renderList(sb, list, options);
        sb.a('</ul>');
        if (!buffer) {
          return sb.toString();
        }
      },
      renderList: function(sb, list, options) {
        var activeItem, listItemOptions,
          _this = this;
        if (list.getActive) {
          activeItem = list.getActive();
        }
        listItemOptions = {
          target: options.target,
          commandMode: options.commandMode
        };
        return j3.forEach(list, function(item, args, index) {
          if (item.hasOwnProperty('isActive')) {
            listItemOptions.isActive = item.isActive;
          } else {
            listItemOptions.isActive = activeItem === item;
          }
          listItemOptions.isFirst = index === 0;
          return LinkList.renderLinkListItem(sb, item, listItemOptions);
        });
      },
      renderLinkListItem: function(sb, model, options) {
        var cmd, data, icon, itemCss, target, title, url;
        sb.a('<li class="');
        if (options.isActive) {
          sb.a(' active');
        }
        if (options.isFirst) {
          sb.a(' first');
        }
        if (j3.getVal(model, 'isHighlight')) {
          sb.a(' highlight');
        }
        itemCss = j3.getVal(model, 'css');
        if (itemCss) {
          sb.a(' ' + itemCss);
        }
        sb.a('">');
        sb.a('<a');
        url = j3.getVal(model, 'url');
        if (!url && options.commandMode && j3.getVal(model, 'cmd')) {
          url = 'javascript:;';
        }
        if (url) {
          sb.a(' href="' + url + '"');
        }
        title = j3.getVal(model, 'title');
        if (title) {
          sb.a(' title="' + j3.htmlEncode(title) + '"');
        }
        target = j3.getVal(model, 'target');
        if (!target) {
          target = options.target;
        }
        if (target) {
          sb.a(' target="' + target + '"');
        }
        if (options.commandMode) {
          cmd = j3.getVal(model, 'cmd');
          if (cmd) {
            sb.a(' data-cmd="' + cmd + '"');
          }
          data = j3.getVal(model, 'data');
          if (data) {
            sb.a(' data-data="' + data + '"');
          }
        }
        sb.a('>');
        icon = j3.getVal(model, 'icon');
        if (icon) {
          sb.a('<i class="' + icon + '"></i>');
        }
        sb.a(j3.htmlEncode(j3.getVal(model, 'text')));
        sb.a('</a>');
        return sb.a('</li>');
      }
    });
  })(j3);

  (function(j3) {
    var __renderGroup, __renderGroupItem, __renderList;
    __renderGroup = function(buffer, datasource) {
      return datasource.forEachGroup(this, function(group) {
        return __renderGroupItem.call(this, buffer, group, datasource.getActive());
      });
    };
    __renderGroupItem = function(buffer, group, activeLink) {
      buffer.append('<div class="nav-group-item">');
      buffer.append('<div class="nav-list-title">');
      if (group.icon) {
        buffer.append('<i class="' + group.icon + '"></i>');
      }
      buffer.append(j3.htmlEncode(group.text));
      buffer.append('</div>');
      __renderList.call(this, buffer, group.items, activeLink);
      return buffer.append('</div>');
    };
    __renderList = function(buffer, links, activeLink) {
      var renderOptions;
      buffer.append('<ul class="nav-list">');
      renderOptions = {
        commandMode: true
      };
      j3.forEach(links, this, function(link, args, index) {
        renderOptions.isActive = activeLink === link;
        renderOptions.isFirst = index === 0;
        return j3.LinkList.renderLinkListItem(buffer, link, renderOptions);
      });
      return buffer.append('</ul>');
    };
    j3.NavGroup = j3.cls(j3.View, {
      baseCss: 'nav-group',
      onCreated: function(options) {
        if (options.datasource) {
          return this.setDatasource(options.datasource);
        }
      },
      onUpdateView: function(datasource, eventName, args) {
        var buffer;
        buffer = new j3.StringBuilder;
        __renderGroup.call(this, buffer, this.getDatasource());
        return this.el.innerHTML = buffer.toString();
      }
    });
    return j3.ext(j3.NavGroup.prototype, j3.DataView);
  })(j3);

  (function(j3) {
    return j3.Panel = j3.cls(j3.ContainerView, {
      baseCss: 'pnl',
      templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>"><div class="pnl-header"><%if(icon){%><i class="<%=icon%>"></i><%}%><%=title%></div><div class="pnl-body">'),
      templateEnd: j3.template('</div></div>'),
      onInit: function(options) {
        this._icon = options.icon;
        return this._title = options.title;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss(),
          icon: this._icon,
          title: this._title
        };
      }
    });
  })(j3);

  (function(j3) {
    var __hElTabsTriggers_Click, __renderTabsNav, __tabPanelActive;
    __renderTabsNav = function(buffer) {
      var node, panel;
      buffer.append('<ul class="tabs-triggers">');
      if (this.children) {
        node = this.children.firstNode();
        while (node) {
          panel = node.value;
          buffer.append('<li');
          buffer.append(' id="' + panel.id + '-trigger"');
          if (panel === this.getActive()) {
            buffer.append(' class="active"');
          }
          buffer.append('><a>');
          buffer.append(j3.htmlEncode(panel.getTitle()));
          buffer.append('</a></li>');
          node = node.next;
        }
      }
      return buffer.append('</ul>');
    };
    __hElTabsTriggers_Click = function(evt) {
      var el, index;
      el = evt.src();
      while (el && el !== this._elTabsTriggers) {
        if (el.tagName === 'LI') {
          index = j3.Dom.indexOf(el);
          this.setActive(this.children.getAt(index));
          return;
        }
        el = el.parentNode;
      }
    };
    __tabPanelActive = function() {
      if (typeof this.onActive === "function") {
        this.onActive();
      }
      return this.fire('active', this);
    };
    return j3.Tabset = j3.cls(j3.ContainerView, {
      baseCss: 'tabs',
      onInit: function(options) {},
      renderBegin: function(buffer, data) {
        buffer.append('<div id="' + data.id + '" class="' + data.css + '">');
        buffer.append('<div class="tabs-header">');
        __renderTabsNav.call(this, buffer);
        buffer.append('</div>');
        buffer.append('<div class="tabs-body">');
      },
      renderEnd: function(buffer) {
        return buffer.append('</div></div>');
      },
      onCreateChild: function(options, args) {
        var _ref;
        return (_ref = options.cls) != null ? _ref : options.cls = j3.TabPanel;
      },
      onChildCreated: function(child, args, options) {
        if (options.active || args.index === 0) {
          return this._activePanel = child;
        }
      },
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this._elTabsTriggers = Dom.firstChild(Dom.firstChild(this.el));
        j3.on(this._elTabsTriggers, 'click', this, __hElTabsTriggers_Click);
        return __tabPanelActive.call(this._activePanel);
      },
      getActive: function() {
        return this._activePanel;
      },
      setActive: function(panel) {
        var Dom, old;
        if (this._activePanel === panel) {
          return;
        }
        if (!panel) {
          return;
        }
        old = this._activePanel;
        Dom = j3.Dom;
        if (this._activePanel) {
          Dom.removeCls(this._activePanel.elTrigger, 'active');
          Dom.removeCls(this._activePanel.el, 'tab-pnl-active');
        }
        this._activePanel = panel;
        Dom.addCls(this._activePanel.elTrigger, 'active');
        Dom.addCls(this._activePanel.el, 'tab-pnl-active');
        __tabPanelActive.call(this._activePanel);
        return this.fire('activePanelChange', this, {
          old: old,
          panel: this._activePanel
        });
      }
    });
  })(j3);

  (function(j3) {
    return j3.TabPanel = j3.cls(j3.ContainerView, {
      baseCss: 'tab-pnl',
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this.getActive() ? ' tab-pnl-active' : '')
        };
      },
      onInit: function(options) {
        this._title = options.title;
        return this._name = options.name;
      },
      onCreated: function() {
        return this.elTrigger = j3.$(this.id + '-trigger');
      },
      setActive: function() {
        return this.parent.setActive(this);
      },
      getActive: function() {
        return this.parent.getActive() === this;
      },
      getTitle: function() {
        return this._title;
      },
      getName: function() {
        return this._name;
      }
    });
  })(j3);

  (function(j3) {
    var __refreshNode, __renderIndents, __uncheckChildNodesToBeRemoved;
    __renderIndents = function(buffer) {
      var i, _i, _ref, _results;
      if (this._level) {
        _results = [];
        for (i = _i = 0, _ref = this._level - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(buffer.append('<div class="tree-node-indent"></div>'));
        }
        return _results;
      }
    };
    __refreshNode = function() {
      var Dom, el;
      el = this._elNodeBody;
      if (!el) {
        return;
      }
      Dom = j3.Dom;
      if (this._childrenLoaded && (!this.children || !this.children.count())) {
        this.collapse();
        return Dom.addCls(el, 'tree-node-leaf');
      } else {
        Dom.removeCls(el, 'tree-node-leaf');
        if (this._expanded) {
          return Dom.addCls(el, 'tree-node-expanded');
        } else {
          return Dom.removeCls(el, 'tree-node-expanded');
        }
      }
    };
    __uncheckChildNodesToBeRemoved = function(node, includeSelf, uncheckedNodes) {
      if (!uncheckedNodes) {
        uncheckedNodes = [];
      }
      if (includeSelf && node.getChecked()) {
        uncheckedNodes.push(node);
        node._tree._checkedNodes.remove(node);
      }
      if (!this.children) {
        return;
      }
      this.children.forEach(function(node) {
        return __uncheckChildNodesToBeRemoved(node, true, uncheckedNodes);
      });
      return uncheckedNodes;
    };
    return j3.TreeNode = j3.cls(j3.ContainerView, {
      baseCss: 'tree-node',
      onInit: function(options) {
        this._level = this.parent.getLevel() + 1;
        this._tree = this.parent.getTree();
        this._data = options.data;
        if (options.text) {
          this._text = options.text;
        } else if (this._data) {
          this._text = this._data[this._tree._dataTextName];
        }
        this._icon = options.icon;
        this._expanded = !!options.expanded;
        this._childrenLoaded = !!options.childrenLoaded || options.children;
        this._checkable = this.parent.getCheckable();
        if (options.hasOwnProperty('checkable')) {
          this._checkable = !!options.checkable;
        }
        this._checked = !!options.checked;
        this._unselectable = !!options.unselectable;
        this._expandOnClick = options.expandOnClick;
        if (j3.isUndefined(options.checkOnClick)) {
          this._checkOnClick = this._tree._checkOnClick;
        } else {
          this._checkOnClick = options.checkOnClick;
        }
        this._itemDataSelector = j3.compileSelector(options.itemDataSelector || this._tree._itemDataSelector || 'id');
        return this._itemDataEquals = j3.compileEquals(options.itemDataEquals || this._tree._itemDataEquals || ['id']);
      },
      onCreateChild: function(options) {
        options.cls = options.cls || j3.TreeNode;
        return options.parent = this;
      },
      renderBegin: function(buffer, data) {
        buffer.append('<div id="' + data.id + '" class="' + data.css + '">');
        buffer.append('<div class="tree-node-body');
        if (this._level === 0) {
          buffer.append(' tree-node-top');
        }
        if (this._childrenLoaded && (!this.children || !this.children.count())) {
          buffer.append(' tree-node-leaf');
        } else if (this._expanded) {
          buffer.append(' tree-node-expanded');
        }
        if (this._checked) {
          buffer.append(' tree-node-checked');
        }
        buffer.append('">');
        buffer.append('<div class="tree-node-indents">');
        __renderIndents.call(this, buffer);
        buffer.append('</div>');
        if (this._level) {
          buffer.append('<div class="tree-node-expander"></div>');
        }
        buffer.append('<div class="tree-node-content">');
        this.renderNodeContent(buffer);
        buffer.append('</div>');
        buffer.append('</div>');
        buffer.append('<div class="tree-node-children');
        if (!this._expanded) {
          buffer.append(' hide');
        }
        return buffer.append('">');
      },
      renderEnd: function(buffer) {
        return buffer.append('</div></div>');
      },
      renderNodeContent: function(buffer) {
        if (this._checkable) {
          buffer.append('<a class="tree-node-chk" javascript:;><i></i></a>');
        }
        if (this._icon) {
          buffer.append('<i class="tree-node-icon ' + this._icon + '"></i>');
        }
        buffer.append('<span id="' + this.id + '-label" class="tree-node-label">');
        buffer.append(j3.htmlEncode(this._text));
        return buffer.append('</span>');
      },
      onCreated: function(options) {
        this._elNodeBody = j3.Dom.firstChild(this.el);
        this._elIndent = j3.Dom.firstChild(this._elNodeBody);
        this.elBody = j3.Dom.lastChild(this.el);
        this._elLabel = j3.$(this.id + '-label');
        return this.el._j3TreeNode = this;
      },
      onLoad: function() {
        if (this.parent && this.parent !== this._tree) {
          return __refreshNode.apply(this.parent);
        }
      },
      getLevel: function() {
        return this._level;
      },
      setLevel: function(value) {
        var buffer, node, _results;
        if (this._level === value) {
          return;
        }
        this._level = value;
        buffer = new j3.StringBuilder;
        __renderIndents.call(this, buffer);
        this._elIndent.innerHTML = buffer.toString();
        if (!this.children) {
          return;
        }
        node = this.children.firstNode();
        _results = [];
        while (node) {
          node.value.setLevel(this._level + 1);
          _results.push(node = node.next);
        }
        return _results;
      },
      getTree: function() {
        return this._tree;
      },
      getCheckable: function() {
        return this._checkable;
      },
      getChecked: function() {
        return this._checked;
      },
      setChecked: function(value, recursive) {
        var args, tree;
        value = !!value;
        if (this._checked === value) {
          return;
        }
        this._checked = value;
        j3.Dom.toggleCls(this._elNodeBody, 'tree-node-checked');
        tree = this._tree;
        args = {
          node: this,
          checked: value
        };
        this.fire('check', this, args);
        tree.notifyNodeCheck(this, value);
        if (recursive && this.children) {
          return this.children.forEach(function(child) {
            return child.setChecked(value, true);
          });
        }
      },
      getUnselectable: function() {
        return this._unselectable;
      },
      setUnselectable: function(value) {
        return this._unselectable = value;
      },
      getExpanded: function() {
        return this._expanded;
      },
      setExpanded: function(value) {
        var args, tree;
        value = !!value;
        if (value === this._expanded) {
          return;
        }
        tree = this._tree;
        args = {
          node: this
        };
        if (value) {
          this.beforeExpand && this.beforeExpand(args);
          if (args.stop) {
            return;
          }
          this.fire('beforeExpand', this, args);
          if (args.stop) {
            return;
          }
          tree.beforeNodeExpand && tree.beforeNodeExpand(args);
          if (args.stop) {
            return;
          }
          tree.fire('beforeNodeExpand', tree, args);
          if (args.stop) {
            return;
          }
        }
        j3.Dom.toggleCls(this._elNodeBody, 'tree-node-expanded');
        j3.Dom.toggleCls(this.elBody, 'hide');
        this._expanded = value;
        if (value) {
          this.fire('expand', this);
          tree.onNodeExpand && tree.onNodeExpand(args);
          return tree.fire('nodeExpand', tree, args);
        } else {
          this.fire('collapse', this);
          tree.onNodeCollapse && tree.onNodeCollapse(args);
          return tree.fire('nodeCollapse', tree, args);
        }
      },
      expand: function(recursive) {
        this.setExpanded(true);
        if (recursive && this.children) {
          return this.children.forEach(function(child) {
            return child.expand(true);
          });
        }
      },
      collapse: function(recursive) {
        this.setExpanded(false);
        if (recursive && this.children) {
          return this.children.forEach(function(child) {
            return child.collapse(true);
          });
        }
      },
      click: function() {
        if (this._expandOnClick) {
          this.expand();
        }
        if (this._checkOnClick && this._checkable) {
          return this.setChecked(!this.getChecked());
        }
      },
      getActive: function() {
        return this._tree.getActiveNode() === this;
      },
      setActive: function() {
        return this._tree.setActiveNode(this);
      },
      __doSetActive: function(value) {
        if (value) {
          j3.Dom.addCls(this._elNodeBody, 'tree-node-active');
        } else {
          j3.Dom.removeCls(this._elNodeBody, 'tree-node-active');
        }
      },
      __doSetHover: function(value) {
        if (value) {
          return j3.Dom.addCls(this._elNodeBody, 'tree-node-hover');
        } else {
          return j3.Dom.removeCls(this._elNodeBody, 'tree-node-hover');
        }
      },
      insert: function(child) {
        if (child.parent === this) {
          return;
        }
        child.parent.children.remove(child);
        if (!this._childrenLoaded) {
          this.expand();
          return;
        }
        child.parent = this;
        this.getChildren().insert(child);
        this.elBody.appendChild(child.el);
        return child.setLevel(this._level + 1);
      },
      remove: function(silent) {
        var activeNode, parentNode, tree, uncheckedNodes;
        tree = this._tree;
        parentNode = this.parent;
        if (parentNode === tree) {
          return;
        }
        if (this.getActive()) {
          activeNode = this.getNext();
          if (!activeNode) {
            activeNode = this.getPrevious();
          }
          if (!activeNode) {
            activeNode = parentNode;
          }
        }
        uncheckedNodes = __uncheckChildNodesToBeRemoved(this, true);
        j3.Dom.remove(this.el);
        parentNode.children.remove(this);
        if (activeNode) {
          tree._activeNode = null;
          tree.setActiveNode(activeNode);
        }
        __refreshNode.call(parentNode);
        if (uncheckedNodes && uncheckedNodes.length && !silent) {
          return tree.fire('checkedNodesChange', tree, {
            uncheckedNodes: uncheckedNodes
          });
        }
      },
      clearChildren: function(silent) {
        var activeNode, uncheckedNodes;
        if (!this.children) {
          return;
        }
        activeNode = this._tree.getActiveNode();
        while (activeNode && activeNode !== this._tree && activeNode !== this) {
          activeNode = activeNode.parent;
        }
        if (activeNode === this) {
          this.setActive();
        }
        uncheckedNodes = __uncheckChildNodesToBeRemoved(this, false);
        this.children.clear();
        this.elBody.innerHTML = '';
        __refreshNode.call(this);
        if (uncheckedNodes && uncheckedNodes.length && !silent) {
          return tree.fire('checkedNodesChange', tree, {
            uncheckedNodes: uncheckedNodes
          });
        }
      },
      getText: function() {
        return this._text;
      },
      setText: function(value) {
        this._text = value;
        return this._elLabel.innerHTML = j3.htmlEncode(this._text);
      },
      getData: function() {
        return this._data;
      },
      setData: function(value) {
        var dataTextName;
        this._data = value;
        if (this._data) {
          dataTextName = this._tree._dataTextName;
          if (dataTextName) {
            return this.setText(this._data[dataTextName]);
          }
        }
      },
      getItemData: function() {
        return this._itemDataSelector(this._data);
      },
      getNodeByDataId: function(id) {
        var node, treeNode;
        if (this._data && this._data[this._tree._dataIdName] === id) {
          return this;
        }
        if (!this.children) {
          return null;
        }
        node = this.children.firstNode();
        while (node) {
          treeNode = node.value.getNodeByDataId(id);
          if (treeNode) {
            return treeNode;
          }
          node = node.next;
        }
        return null;
      },
      getChildrenLoaded: function() {
        return this._childrenLoaded;
      },
      setChildrenLoaded: function(value) {
        return this._childrenLoaded = value;
      },
      getNext: function() {
        var el;
        el = j3.Dom.next(this.el);
        return el && el._j3TreeNode;
      },
      getPrevious: function() {
        var el;
        el = j3.Dom.previous(this.el);
        return el && el._j3TreeNode;
      }
    });
  })(j3);

  (function(j3) {
    var __hEl_click, __hEl_dblclick, __hEl_mousemove, __hEl_mouseout;
    __hEl_click = function(evt) {
      var el, node, treeNode;
      el = evt.src();
      while (el && el !== this.el) {
        if (el.className === 'tree-node-expander') {
          treeNode = el.parentNode.parentNode._j3TreeNode;
          if (treeNode) {
            treeNode.setExpanded(!treeNode.getExpanded());
          }
          return;
        }
        if (el.className === 'tree-node-chk') {
          treeNode = el.parentNode.parentNode.parentNode._j3TreeNode;
          if (treeNode) {
            treeNode.setChecked(!treeNode.getChecked());
          }
          return;
        }
        if (el.className === 'tree-node') {
          node = el._j3TreeNode;
          if (node) {
            if (!node.getUnselectable()) {
              this.setActiveNode(node);
            }
            node.click();
            this.fire('nodeClick', this, {
              node: node
            });
          }
          return;
        }
        el = el.parentNode;
      }
    };
    __hEl_dblclick = function(evt) {
      var el, node;
      if (!this._expandOnDoubleClick) {
        return;
      }
      el = evt.src();
      while (el && el !== this.el) {
        if (el.className === 'tree-node-expander') {
          return;
        }
        if (el.className === 'tree-node-chk') {
          return;
        }
        if (el.className === 'tree-node') {
          node = el._j3TreeNode;
          node.setExpanded(!node.getExpanded());
          return;
        }
        el = el.parentNode;
      }
    };
    __hEl_mousemove = function(evt) {
      var el, node;
      el = evt.src();
      while (el && el !== this.el) {
        if (el.className === 'tree-node') {
          node = el._j3TreeNode;
          if (node) {
            this.setHoverNode(node);
          }
          return;
        }
        el = el.parentNode;
      }
    };
    __hEl_mouseout = function(evt) {
      return this.setHoverNode(null);
    };
    return j3.TreeView = j3.cls(j3.View, {
      baseCss: 'tree-view',
      onInit: function(options) {
        this._checkable = !!options.checkable;
        this._dataIdName = options.dataIdName || 'id';
        this._dataTextName = options.dataTextName || 'name';
        this._topNodeHidden = !!options.topNodeHidden;
        if (j3.isUndefined(options.checkOnClick)) {
          this._checkOnClick = true;
        } else {
          this._checkOnClick = !!options.checkOnClick;
        }
        if (j3.isUndefined(options.expandOnDoubleClick)) {
          this._expandOnDoubleClick = true;
        } else {
          this._expandOnDoubleClick = !!options.expandOnDoubleClick;
        }
        this._itemDataSelector = j3.compileSelector(options.itemDataSelector || 'id');
        return this._itemDataEquals = j3.compileEquals(options.itemDataEquals || ['id']);
      },
      createChildren: function(options) {
        var nodeOptions;
        nodeOptions = options.topNode || {};
        nodeOptions.parent = this;
        nodeOptions.expanded = true;
        return this._topNode = new j3.TreeNode(nodeOptions);
      },
      onRender: function(buffer, data) {
        buffer.append('<div id="' + data.id + '" class="' + data.css);
        if (this._topNodeHidden) {
          buffer.append(' tree-view-hide-top-node');
        }
        buffer.append('">');
        this._topNode.render(buffer);
        buffer.append('</div>');
      },
      onCreated: function() {
        j3.on(this.el, 'click', this, __hEl_click);
        j3.on(this.el, 'dblclick', this, __hEl_dblclick);
        j3.on(this.el, 'mousemove', this, __hEl_mousemove);
        return j3.on(this.el, 'mouseout', this, __hEl_mouseout);
      },
      getLevel: function() {
        return -1;
      },
      getTree: function() {
        return this;
      },
      getCheckable: function() {
        return this._checkable;
      },
      getTopNode: function() {
        return this._topNode;
      },
      getNodeByDataId: function(id) {
        return this.getTopNode().getNodeByDataId(id);
      },
      getActiveNode: function() {
        return this._activeNode;
      },
      setActiveNode: function(node) {
        var old;
        if (this._topNodeHidden && node === this.getTopNode()) {
          node = null;
        }
        if (node && node.getUnselectable()) {
          node = null;
        }
        if (this._activeNode === node) {
          return;
        }
        old = this._activeNode;
        if (this._activeNode) {
          this._activeNode.__doSetActive(false);
        }
        this._activeNode = node;
        if (this._activeNode) {
          this._activeNode.__doSetActive(true);
        }
        return this.fire('activeNodeChange', this, {
          old: old,
          node: this._activeNode
        });
      },
      getHoverNode: function() {
        return this._hoverNode;
      },
      setHoverNode: function(node) {
        var old;
        if (this._topNodeHidden && node === this.getTopNode()) {
          node = null;
        }
        if (node && node.getUnselectable()) {
          node = null;
        }
        if (this._hoverNode === node) {
          return;
        }
        old = this._hoverNode;
        if (this._hoverNode) {
          this._hoverNode.__doSetHover(false);
        }
        this._hoverNode = node;
        if (this._hoverNode) {
          this._hoverNode.__doSetHover(true);
        }
        return this.fire('hoverNodeChange', this, {
          old: old,
          node: this._hoverNode
        });
      },
      removeNode: function(node) {
        return node.remove();
      },
      notifyNodeCheck: function(node, checked, silent) {
        var args;
        if (!this._checkedNodes) {
          this._checkedNodes = new j3.List;
        }
        args = {};
        if (checked) {
          this._checkedNodes.insert(node);
          args.checkedNodes = [node];
        } else {
          this._checkedNodes.remove(node);
          args.uncheckedNodes = [node];
        }
        if (!silent) {
          return this.fire('checkedNodesChange', this, args);
        }
      },
      getCheckedNodes: function() {
        return this._checkedNodes;
      },
      getSelectedItems: function() {
        var selectedItems;
        selectedItems = [];
        if (!this._checkedNodes) {
          return selectedItems;
        }
        return this._checkedNodes.forEach(function(node) {
          return selectedItems.push(node.getItemData());
        });
      },
      getTopNodeHidden: function() {
        return this._topNodeHidden;
      }
    });
  })(j3);

  (function(j3) {
    var __actionButton_click;
    __actionButton_click = function(sender, args) {
      return this._window.action(sender.name, sender);
    };
    return j3.WindowActions = j3.cls(j3.ContainerView, {
      baseCss: 'wnd-actions',
      templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>">'),
      templateEnd: j3.template('</div>'),
      onInit: function(options) {
        var _ref;
        this._window = options.window;
        if ((_ref = this._window) == null) {
          this._window = options.parent;
        }
        return this._align = options.align;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._align === 'right' ? ' ' + this.baseCss + '-right' : '') + (this._align === 'left' ? ' ' + this.baseCss + '-left' : '') + (this._align === 'center' ? ' ' + this.baseCss + '-center' : '')
        };
      },
      onChildCreated: function(child) {
        return child.on('click', this, __actionButton_click);
      },
      getActionButton: function(name) {
        var child;
        if (!this.children) {
          return null;
        }
        child = this.children.firstNode();
        while (child) {
          if (child.value.name === name) {
            return child.value;
          }
          child = child.next;
        }
        return null;
      }
    });
  })(j3);

  (function(j3) {
    var __elClose_click, __el_blur, __getActionButtons;
    __getActionButtons = function(actions) {
      if (actions === 'okcancel') {
        return [
          {
            cls: j3.Button,
            text: j3.Lang.ok,
            name: 'ok',
            primary: true
          }, {
            cls: j3.Button,
            text: j3.Lang.cancel,
            name: 'cancel'
          }
        ];
      } else if (actions === 'yesno') {
        return [
          {
            cls: j3.Button,
            text: j3.Lang.yes,
            name: 'yes',
            primary: true
          }, {
            cls: j3.Button,
            text: j3.Lang.no,
            name: 'no'
          }
        ];
      } else {
        return actions;
      }
    };
    __elClose_click = function(evt) {
      return this.close('cancel');
    };
    __el_blur = function(evt) {};
    return j3.Window = j3.cls(j3.ContainerView, {
      baseCss: 'wnd',
      templateBegin: j3.template('<div id="<%=id%>" class="<%=css%>" style="display:none"><div class="wnd-header"><a class="close">&times;</a><h2 class="wnd-title"><%-title%></h2></div><div class="wnd-body"><div class="wnd-body-inner">'),
      onInit: function(options) {
        this._title = options.title;
        this._contextData = options.contextData;
        if (j3.isUndefined(options.autoFocusChild)) {
          options.autoFocusChild = true;
        }
        return this._autoFocusChild = !!options.autoFocusChild;
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss(),
          title: this._title,
          windowActions: this._windowActions
        };
      },
      createChildren: function(options) {
        j3.Window.base().createChildren.apply(this, arguments);
        this.createWindowChildren && this.createWindowChildren(options);
        if (options.actions) {
          return this._windowActions = new j3.WindowActions({
            parent: this,
            children: __getActionButtons(options.actions)
          });
        }
      },
      renderEnd: function(buffer) {
        buffer.append('</div>');
        buffer.append('</div>');
        if (this._windowActions) {
          buffer.append('<div class="wnd-footer">');
          this._windowActions.render(buffer);
          buffer.append('</div>');
        }
        return buffer.append('</div>');
      },
      renderChildren: function(buffer) {
        var node;
        if (!this.children) {
          return;
        }
        node = this.children.firstNode();
        while (node) {
          if (node.value !== this._windowActions) {
            node.value.render(buffer);
          }
          node = node.next;
        }
      },
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this._elWndHeader = Dom.firstChild(this.el);
        this._elWndBody = Dom.next(this._elWndHeader);
        this._elWndFooter = Dom.next(this._elWndBody);
        this._elClose = Dom.firstChild(this._elWndHeader);
        this._elTitle = Dom.lastChild(this._elWndHeader);
        this.elBody = Dom.firstChild(this._elWndBody);
        j3.on(this._elClose, 'click', this, __elClose_click);
        j3.on(this.el, 'blur', this, __el_blur);
        return this._dd = new j3.Drag({
          el: this.el,
          trigger: this._elWndHeader,
          invalidTriggerTypes: 'A'
        });
      },
      setTitle: function(value) {
        return this._elTitle.innerHTML = j3.htmlEncode(value);
      },
      getContextData: function() {
        return this._contextData;
      },
      setContextData: function(value) {
        return this._contextData = value;
      },
      action: function(name, src) {
        var args;
        args = {
          name: name,
          src: src
        };
        if (typeof this.onAction === "function") {
          this.onAction(args);
        }
        return this.fire('action', this, args);
      },
      canLayout: function() {
        return this._visible;
      },
      show: function() {
        var zIndex;
        zIndex = j3.Overlay.show();
        this.el.style.zIndex = zIndex + 1;
        j3.Dom.show(this.el);
        this._visible = true;
        this.layout();
        j3.Dom.center(this.el);
        if (this._autoFocusChild) {
          j3.View.focusChild.call(this);
        }
        this.onActive && this.onActive();
        return this.fire('active', this);
      },
      close: function(result, data) {
        var args;
        if (!this._visible) {
          return;
        }
        args = {
          result: result,
          data: data
        };
        if (typeof beforeClose === "function") {
          beforeClose(args);
        }
        if (args.stop) {
          return;
        }
        this.fire('beforeClose', this, args);
        if (args.stop) {
          return;
        }
        this.hide();
        this._visible = false;
        j3.Overlay.hide();
        if (typeof onClose === "function") {
          onClose(args);
        }
        return this.fire('close', this, args);
      },
      getActionButton: function(name) {
        if (!this._windowActions) {
          return null;
        }
        return this._windowActions.getActionButton(name);
      },
      onSetHeight: function(height) {
        var Dom, bodyHeight;
        if (!height) {
          this.el.style.height = '';
          this._elWndBody.style.height = '';
          this._elWndBody.firstChild.style.height = '';
          return;
        }
        Dom = j3.Dom;
        Dom.offsetHeight(this.el, height);
        bodyHeight = Dom.height(this.el) - Dom.offsetHeight(this._elWndHeader);
        if (this._elWndFooter) {
          bodyHeight -= Dom.offsetHeight(this._elWndFooter);
        }
        Dom.offsetHeight(this._elWndBody, bodyHeight);
        return Dom.offsetHeight(this._elWndBody.firstChild, Dom.height(this._elWndBody));
      },
      center: function() {
        return j3.Dom.center(this.el);
      },
      getVisible: function() {
        return this._visible;
      }
    });
  })(j3);

  (function(j3) {
    var MessageBox, __genShowMethod, __getPool, _pool;
    j3.MessageBox = MessageBox = j3.cls(j3.Window, {
      css: 'msg-wnd',
      renderChildren: function(buffer) {
        buffer.append('<div class="msg-box-icon"></div>');
        buffer.append('<div class="msg-box-content">');
        return buffer.append('</div>');
      },
      onCreated: function(options) {
        MessageBox.base().onCreated.apply(this, arguments);
        this._elMsgIcon = j3.Dom.firstChild(this.elBody);
        this._elMsgContent = j3.Dom.next(this._elMsgIcon);
        this._btnOK = this.getActionButton('ok');
        return this._btnCancel = this.getActionButton('cancel');
      },
      onAction: function(args) {
        return this.close(args.name);
      },
      setIcon: function(value) {
        return this._elMsgIcon.className = 'msg-box-icon msg-box-icon-' + value;
      },
      setContent: function(value, encodeContent) {
        if (value == null) {
          value = '';
        }
        if (encodeContent) {
          value = j3.htmlEncode(value);
        }
        return this._elMsgContent.innerHTML = value;
      },
      setButtons: function(value) {
        var lang;
        lang = j3.Lang;
        switch (value) {
          case 'okcancel':
            this._btnCancel.show();
            this._btnOK.setText(lang.ok);
            return this._btnCancel.setText(lang.cancel);
          case 'ok':
            this._btnOK.setText(lang.ok);
            return this._btnCancel.hide();
          case 'yesno':
            this._btnCancel.show();
            this._btnOK.setText(lang.yes);
            return this._btnCancel.setText(lang.no);
          case 'yes':
            this._btnCancel.hide();
            return this._btnOK.setText(lang.yes);
        }
      }
    });
    _pool = null;
    __getPool = function() {
      if (_pool) {
        return _pool;
      }
      return _pool = new j3.Pool({
        onCreate: function(options) {
          var wnd;
          if (options == null) {
            options = {};
          }
          options.actions = 'okcancel';
          wnd = new MessageBox(options);
          wnd.on('close', function(sender, args) {
            var onClose;
            if (wnd._silentCloseByCancel && args.result === 'cancel') {
              _pool.release(sender);
              return;
            }
            onClose = sender._onCloseOnce;
            if (onClose) {
              if (j3.isFunction(onClose)) {
                onClose();
              } else {
                onClose.handler.apply(onClose.context, arguments);
              }
            }
            return _pool.release(sender);
          });
          return wnd;
        },
        onInit: function(wnd, options) {
          wnd.setTitle(options.title || '');
          wnd.setIcon(options.icon);
          wnd.setContent(options.content, options.encodeContent);
          wnd.setButtons(options.buttons);
          wnd._onCloseOnce = options.onClose;
          wnd._silentCloseByCancel = options.silentCloseByCancel;
          wnd.show();
          return wnd._btnOK.focus();
        }
      });
    };
    __genShowMethod = function(icon, buttons, silentCloseByCancel) {
      return function(title, content, context, callback) {
        var options;
        if (arguments.length === 1) {
          options = title;
        } else {
          if (!callback) {
            callback = context;
            context = null;
          }
          options = {
            title: title,
            content: content,
            onClose: {
              handler: callback,
              context: context
            }
          };
        }
        options.icon = icon || options.icon;
        options.buttons = buttons || options.buttons;
        options.silentCloseByCancel = silentCloseByCancel || options.silentCloseByCancel;
        options.title = options.title || j3.Lang[icon];
        return __getPool().gain(options);
      };
    };
    return j3.ext(MessageBox, {
      show: __genShowMethod(null, null),
      alert: __genShowMethod('warning', 'ok'),
      error: __genShowMethod('error', 'ok'),
      message: __genShowMethod('message', 'ok'),
      confirm: __genShowMethod('confirm', 'okcancel', true)
    });
  })(j3);

  (function(j3) {
    var MessageBar, __genShowMethod, __getPool, _pool;
    j3.MessageBar = MessageBar = j3.cls(j3.View, {
      baseCss: 'msg-bar',
      template: j3.template('<div id="<%=id%>" class="<%=css%>"><div class="msg-bar-icon"></div><div class="msg-bar-content"></div></div>'),
      onCreated: function() {
        var Dom;
        Dom = j3.Dom;
        this._elIcon = Dom.firstChild(this.el);
        return this._elContent = Dom.next(this._elIcon);
      },
      setIcon: function(value) {
        if (this._icon === value) {
          return;
        }
        this._icon = value;
        this.el.className = this.getCss() + ' ' + this.baseCss + '-' + this._icon;
        return this._elIcon.className = this.baseCss + '-icon ' + this.baseCss + '-icon-' + this._icon;
      },
      setContent: function(value, encodeContent) {
        if (encodeContent) {
          value = j3.htmlEncode(value);
        }
        return this._elContent.innerHTML = value;
      },
      show: function(options) {
        var ctnr, el,
          _this = this;
        MessageBar.base().show.apply(this, arguments);
        el = this.el;
        ctnr = options.ctnr;
        if (ctnr) {
          ctnr.appendChild(el);
          el.style.top = '0';
          el.style.left = '0';
        } else {
          document.body.appendChild(el);
          j3.Dom.center(el, 30);
        }
        return this._timerClose = setTimeout((function() {
          return _this.close();
        }), 4000);
      },
      close: function() {
        clearTimeout(this._timerClose);
        this.hide();
        return this.fire('close', this);
      }
    });
    _pool = null;
    __getPool = function() {
      if (_pool) {
        return _pool;
      }
      return _pool = new j3.Pool({
        onCreate: function(options) {
          var bar;
          bar = new MessageBar(options);
          bar.on('close', function(sender, args) {
            return _pool.release(sender);
          });
          return bar;
        },
        onInit: function(bar, options) {
          bar.setIcon(options.icon);
          bar.setContent(options.content, options.encodeContent);
          bar._onCloseOnce = options.onClose;
          return bar.show(options);
        }
      });
    };
    __genShowMethod = function(icon) {
      return function(content, context, callback) {
        var options;
        if (arguments.length === 1 && j3.isObject(content)) {
          options = content;
        } else {
          if (!callback) {
            callback = context;
            context = null;
          }
          options = {
            content: content,
            onClose: {
              handler: callback,
              context: context
            }
          };
        }
        options.icon = icon || options.icon;
        return __getPool().gain(options);
      };
    };
    return j3.ext(MessageBar, {
      show: __genShowMethod(null),
      alert: __genShowMethod('warning'),
      error: __genShowMethod('error'),
      message: __genShowMethod('message')
    });
  })(j3);

  (function(j3) {
    return j3.Splitter = j3.cls(j3.ContainerView, {
      baseCss: 'spt',
      onInit: function(options) {
        if (options.vertical) {
          return this._vertical = true;
        }
      },
      getTemplateData: function() {
        return {
          id: this.id,
          css: this.getCss() + (this._vertical ? ' spt-vertical' : '')
        };
      },
      onCreateChild: function(options, args) {
        var _ref;
        return (_ref = options.cls) != null ? _ref : options.cls = j3.SplitterPanel;
      },
      layoutChildren: function() {
        var Dom, autoSize, autoSizePanels, eachAutoSizePanel, i, methodName, node, panel, panelSize, sizeOfEachAutoPanel, sizeOfLastAutoPanel, splitterSize, _i, _len;
        if (!this.children) {
          return;
        }
        Dom = j3.Dom;
        methodName = this._vertical ? 'height' : 'width';
        autoSize = splitterSize = Dom[methodName].call(Dom, this.el);
        autoSizePanels = [];
        node = this.children.firstNode();
        while (node) {
          panel = node.value;
          panelSize = panel.getSize();
          if (panelSize) {
            panel[methodName].call(panel, panel);
            autoSize -= panelSize;
          } else {
            autoSizePanels.push(panel);
          }
          node = node.next;
        }
        sizeOfEachAutoPanel = Math.floor(autoSize / autoSizePanels.length);
        sizeOfLastAutoPanel = autoSize;
        for (i = _i = 0, _len = autoSizePanels.length; _i < _len; i = ++_i) {
          eachAutoSizePanel = autoSizePanels[i];
          if (i === autoSizePanels.length - 1) {
            panelSize = sizeOfLastAutoPanel;
          } else {
            panelSize = sizeOfEachAutoPanel;
            sizeOfLastAutoPanel -= sizeOfEachAutoPanel;
          }
          eachAutoSizePanel[methodName].call(eachAutoSizePanel, panelSize);
        }
      }
    });
  })(j3);

  (function(j3) {
    return j3.SplitterPanel = j3.cls(j3.ContainerView, {
      baseCss: 'spt-pnl',
      onInit: function(options) {
        this._fill = 0;
        return this._size = options.size || 0;
      },
      getSize: function() {
        return this._size;
      }
    });
  })(j3);

  (function(j3) {
    var __check, _lastHref;
    if (typeof location === 'undefined') {
      return;
    }
    _lastHref = '';
    __check = function() {
      if (_lastHref === location.href) {
        return;
      }
      _lastHref = location.href;
      return j3.Location.fire('change', {
        path: location.pathname
      });
    };
    j3.Location = {
      start: function() {
        return __check();
      },
      goto: function(url) {
        return location.href = url;
      },
      back: function() {
        return history.go(-1);
      },
      refresh: function() {
        return location.refresh();
      }
    };
    return j3.ext(j3.Location, j3.EventManager);
  })(j3);

  (function(j3) {
    var __compileRoutes, __getHandler;
    __compileRoutes = function(routes) {
      var handler, match, _results;
      _results = [];
      for (match in routes) {
        handler = routes[match];
        if (j3.isObject(handler)) {
          __compileRoutes(handler);
        }
        if (match !== '$' && 0 === match.indexOf('$')) {
          _results.push(routes['*'] = [match.substr(1), handler]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    __getHandler = function(fragments, routes, params) {
      var fragment, handler;
      fragment = '';
      while (fragment === '' && fragments.length) {
        fragment = fragments.shift();
      }
      if (fragment === '') {
        return routes.$;
      } else {
        handler = routes[fragment];
        if (!handler) {
          handler = routes['*'];
          if (!handler) {
            return null;
          }
          params[handler[0]] = fragment;
          handler = handler[1];
        }
        if (j3.isFunction(handler)) {
          return handler;
        } else if (j3.isObject(handler)) {
          return __getHandler(fragments, handler, params);
        }
      }
      return null;
    };
    return j3.Router = j3.cls({
      ctor: function(options) {
        this._routes = options.routes || {};
        __compileRoutes(this._routes);
      },
      handle: function(path) {
        var fragments, handler, params;
        fragments = path.split('/');
        params = {};
        handler = __getHandler(fragments, this._routes, params);
        if (j3.isFunction(handler)) {
          return handler(params);
        }
      }
    });
  })(j3);

  (function(j3) {
    var __location_change, _theApp;
    _theApp = null;
    j3.app = function() {
      return _theApp;
    };
    __location_change = function(args) {
      return this._router.handle(args.path);
    };
    return j3.Application = j3.cls({
      ctor: function(options) {
        _theApp = this;
        this._router = new j3.Router({
          routes: options.routes
        });
        this.onLoad && this.onLoad();
      },
      start: function() {
        j3.Location.on('change', this, __location_change);
        return j3.Location.start();
      }
    });
  })(j3);

  (function(j3) {
    var _curPage, _pages;
    _pages = {};
    _curPage = null;
    j3.getPage = function(id) {
      return _pages[id];
    };
    return j3.Page = j3.cls(j3.ContainerView, {
      baseCss: 'page',
      getPage: function() {
        return this;
      },
      show: function() {
        if (_curPage) {
          _curPage.show();
        }
        j3.Page.base().show.apply(this, arguments);
        _curPage = this;
        this.refresh();
      },
      refresh: function(params) {
        this._params = params;
        return this.onRefresh && this.onRefresh();
      },
      onMessage: function() {
        var _ref;
        if ((_ref = this._msgEvtMngr) == null) {
          this._msgEvtMngr = j3.createEventManager();
        }
        return this._msgEvtMngr.on.apply(this._msgEvtMngr, arguments);
      },
      unMessage: function() {
        if (!this._msgEvtMngr) {
          return;
        }
        return this._msgEvtMngr.un.apply(this._msgEvtMngr, arguments);
      },
      notifyMessage: function(name, sender, args) {
        if (typeof this.onNotifyMessage === "function") {
          this.onNotifyMessage(name, sender, args);
        }
        if (!this._msgEvtMngr) {
          return;
        }
        return this._msgEvtMngr.fire(name, sender, args);
      },
      getParam: function(name) {
        if (!this._params) {
          return;
        }
        return this._params[name];
      },
      getQuery: function(name, defaultValue) {
        if (!this._query) {
          this._query = new j3.UrlQuery;
        }
        return this._query.get(name, defaultValue);
      },
      setQuery: function(name, value) {
        if (!this._query) {
          this._query = new j3.UrlQuery;
        }
        return this._query.set(name, value);
      },
      unsetQuery: function(name) {
        if (!this._query) {
          return;
        }
        return this._query.unset(name);
      },
      commitQuery: function() {
        return location.href = location.protocol + '//' + location.host + location.pathname + '#' + this.queryString();
      },
      queryString: function() {
        if (!this._query) {
          this._query = new j3.UrlQuery;
        }
        return this._query.toString();
      }
    });
  })(j3);

}).call(this);
