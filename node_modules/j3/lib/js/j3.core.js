(function() {
  var EventManagerCls, ext, j3, root, toString, _regFormat, _stringBuilder_proto,
    __slice = [].slice;

  root = this;

  j3 = function() {
    return j3.$.apply(this, arguments);
  };

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined') {
      module.exports = j3;
    } else {
      exports.j3 = j3;
    }
  } else {
    root.j3 = j3;
  }

  j3.version = '0.4.4';

  j3.fnRetFalse = function() {
    return false;
  };

  j3.isRunInServer = function() {
    return j3.UA.name === 'server';
  };

  j3.has = function(obj, prop) {
    return obj.hasOwnProperty(prop);
  };

  j3.isUndefined = function(obj) {
    return typeof obj === 'undefined';
  };

  j3.isBoolean = function(obj) {
    return typeof obj === 'boolean';
  };

  j3.isNumber = function(obj) {
    return typeof obj === 'number';
  };

  j3.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  j3.isString = function(obj) {
    return typeof obj === 'string';
  };

  j3.isObject = function(obj) {
    return typeof obj === 'object';
  };

  j3.isNull = function(obj) {
    return obj === null;
  };

  j3.isNullOrUndefined = function(obj) {
    return j3.isNull(obj) || j3.isUndefined(obj);
  };

  toString = Object.prototype.toString;

  j3.isDate = function(obj) {
    return '[object Date]' === toString.call(obj);
  };

  j3.isArray = function(obj) {
    return '[object Array]' === toString.call(obj);
  };

  j3.isDateTime = function(obj) {
    return obj instanceof j3.DateTime;
  };

  j3.bind = function(fn, context, args) {
    if (args) {
      return function() {
        return fn.apply(context, args);
      };
    } else {
      return function() {
        return fn.call(context);
      };
    }
  };

  j3.clone = function(obj, properties, ignoreUndefined) {
    var item, prop, res, _i, _j, _len, _len1;
    if (!j3.isObject(obj)) {
      return obj;
    }
    if (obj === null) {
      return null;
    }
    if (j3.isDate(obj)) {
      return new Date(obj.getTime());
    }
    if (j3.isArray(obj)) {
      res = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        item = obj[_i];
        res.push(j3.clone(item));
      }
      return res;
    }
    if (j3.isFunction(obj.clone)) {
      return obj.clone(properties);
    }
    res = {};
    if (!properties) {
      for (prop in obj) {
        res[prop] = j3.clone(obj[prop]);
      }
    } else {
      for (_j = 0, _len1 = properties.length; _j < _len1; _j++) {
        prop = properties[_j];
        if (obj.hasOwnProperty(prop)) {
          if (ignoreUndefined) {
            if (!j3.isUndefined(obj[prop])) {
              res[prop] = j3.clone(obj[prop]);
            }
          } else {
            res[prop] = j3.clone(obj[prop]);
          }
        }
      }
    }
    return res;
  };

  j3.equals = function(obj1, obj2) {
    var i, key;
    if (typeof obj1 !== typeof obj2) {
      return false;
    }
    if (j3.isNull(obj1)) {
      return j3.isNull(obj2);
    }
    if (!j3.isObject(obj1)) {
      return obj1 === obj2;
    }
    if (j3.isDate(obj1)) {
      return obj1.getTime() === obj2.getTime();
    }
    if (j3.isArray(obj1)) {
      if (!obj2) {
        return false;
      }
      if (obj1.length !== obj2.length) {
        return false;
      }
      i = -1;
      while (++i < obj1.length) {
        if (!j3.equals(obj1[i], obj2[i])) {
          return false;
        }
      }
      return true;
    }
    if (j3.isFunction(obj1.equals)) {
      return obj1.equals(obj2);
    }
    if (j3.isObject(obj1) && j3.isObject(obj2)) {
      for (key in obj1) {
        if (!j3.equals(obj1[key], obj2[key])) {
          return false;
        }
      }
      return true;
    }
    return false;
  };

  j3.compare = function(obj1, obj2, nullGreat) {
    if (j3.isNullOrUndefined(obj1)) {
      if (j3.isNullOrUndefined(obj2)) {
        return 0;
      }
      if (nullGreat) {
        return 1;
      } else {
        return -1;
      }
    } else if (j3.isNullOrUndefined(obj2)) {
      if (nullGreat) {
        return -1;
      } else {
        return 1;
      }
    }
    if (j3.isDateTime(obj1) || j3.isDate(obj1)) {
      obj1 = obj1.getTime();
    }
    if (j3.isDateTime(obj2) || j3.isDate(obj2)) {
      obj2 = obj2.getTime();
    }
    if (j3.isObject(obj1)) {
      if (j3.isFunction(obj1.compare)) {
        return obj1.compare(obj2);
      } else if (!j3.isObject(obj2)) {
        return 1;
      }
    }
    if (j3.isObject(obj2)) {
      if (j3.isFunction(obj2.compare)) {
        return obj2.compare(obj1);
      } else if (!j3.isObject(obj1)) {
        return -1;
      }
    }
    if (obj1 === obj2) {
      return 0;
    } else if (obj1 > obj2) {
      return 1;
    } else {
      return -1;
    }
  };

  j3.$ = function(id) {
    if (typeof id === 'string') {
      return document.getElementById(id);
    }
    return id;
  };

  j3.guid = function() {
    var i, n, s, _i;
    s = "";
    for (i = _i = 1; _i < 33; i = ++_i) {
      n = Math.floor(Math.random() * 16.0).toString(16);
      s += n;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        s += "-";
      }
    }
    return s;
  };

  j3.ns = function(nameSpace) {
    var curNS, name, names, _i, _len;
    names = nameSpace.split(".");
    curNS = typeof window === 'undefined' ? global : window;
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      if (!curNS[name]) {
        curNS[name] = {};
      }
      curNS = curNS[name];
    }
    return curNS;
  };

  ext = j3.ext = function() {
    var extend, exts, original, prop, _i, _len;
    original = arguments[0], exts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = exts.length; _i < _len; _i++) {
      extend = exts[_i];
      for (prop in extend) {
        original[prop] = extend[prop];
      }
    }
    return original;
  };

  j3.cls = function(base, members) {
    var ctor, ctorOfCls, proto;
    if (arguments.length === 1) {
      members = base;
      base = null;
    }
    ctorOfCls = members.ctor;
    if (base) {
      if (ctorOfCls) {
        members.ctor = function() {
          base.apply(this, arguments);
          return ctorOfCls.apply(this, arguments);
        };
      } else {
        members.ctor = function() {
          return base.apply(this, arguments);
        };
      }
    } else if (!ctorOfCls) {
      members.ctor = function() {};
    }
    ctor = members.ctor;
    proto = ctor.prototype;
    if (base) {
      this.ext(proto, base.prototype);
    }
    this.ext(proto, members);
    if (this.has(members, 'toString')) {
      proto.toString = members.toString;
    }
    ctor.base = function() {
      return base.prototype;
    };
    return ctor;
  };

  j3.UA = (function() {
    var nStart, o, ua, version;
    o = {
      ie: 0,
      trident: 0,
      gecko: 0,
      webkit: 0,
      opera: 0,
      name: '',
      N_IE: 'MSIE',
      N_TRIDENT: 'Trident',
      N_FIREFOX: 'Firefox',
      N_OPERA: 'Opera',
      N_CHROME: 'Chrome',
      N_SAFARI: 'Safari',
      N_ANDROID: 'Android',
      P_IPOD: 'iPod',
      P_IPAD: 'iPad',
      P_IPHONE: 'iPhone',
      P_ANDROID: 'Android'
    };
    if (!this.navigator) {
      o.name = 'server';
      return o;
    }
    ua = this.navigator.userAgent;
    if (ua.indexOf(o.N_IE) > -1) {
      o.ie = true;
      o.name = o.N_IE;
    } else if (ua.indexOf(o.N_TRIDENT) > -1) {
      o.ie = true;
      o.trident = true;
      o.name = o.N_IE;
    } else if (ua.indexOf(o.N_FIREFOX) > -1) {
      o.gecko = true;
      o.name = o.N_FIREFOX;
    } else if (ua.indexOf(o.N_OPERA) > -1) {
      o.opera = true;
      o.name = o.N_OPERA;
    } else if (ua.indexOf('AppleWebKit') > -1) {
      o.webkit = true;
      if (ua.indexOf(o.N_ANDROID) > -1) {
        o.name = o.N_ANDROID;
      } else if (ua.indexOf(o.N_CHROME) > -1) {
        o.name = o.N_CHROME;
      } else if (ua.indexOf(o.N_SAFARI) > -1) {
        o.name = o.N_SAFARI;
      }
    }
    if (ua.indexOf(o.P_IPOD) > -1) {
      o.platform = o.P_IPOD;
    } else if (ua.indexOf(o.P_IPAD) > -1) {
      o.platform = o.P_IPAD;
    } else if (ua.indexOf(o.P_IPHONE) > -1) {
      o.platform = o.P_IPHONE;
    } else if (ua.indexOf(o.P_ANDROID) > -1) {
      o.platform = o.P_ANDROID;
    }
    if (o.name === o.N_OPERA || o.name === o.N_SAFARI) {
      nStart = ua.indexOf('Version') + 8;
    }
    if (o.trident) {
      nStart = ua.indexOf('rv:') + 3;
    } else {
      nStart = ua.indexOf(o.name) + o.name.length + 1;
    }
    version = parseFloat(ua.substring(nStart, nStart + 4).match(/\d+\.\d{1}/i)[0]);
    if (o.ie) {
      o.ie = version;
    } else if (o.gecko) {
      o.gecko = version;
    } else if (o.opera) {
      o.opera = version;
    } else if (o.webkit) {
      o.webkit = version;
    }
    o.supportTouch = document.documentElement && document.documentElement.hasOwnProperty && document.documentElement.hasOwnProperty('ontouchstart');
    return o;
  })();

  if (j3.UA.ie >= 8 || j3.UA.opera || j3.UA.webkit) {
    j3.StringBuilder = j3.cls({
      ctor: function() {
        this._data = '';
      },
      append: function(text) {
        this._data += text;
        return this;
      },
      encodeAndAppend: function(text) {
        this._data += j3.htmlEncode(text);
        return this;
      },
      clear: function() {
        this._data = '';
        return this;
      },
      toString: function() {
        return this._data;
      }
    });
  } else {
    j3.StringBuilder = j3.cls({
      ctor: function() {
        this._data = [];
      },
      append: function(text) {
        this._data[this._data.length] = text;
        return this;
      },
      encodeAndAppend: function(text) {
        this._data[this._data.length] = j3.htmlEncode(text);
        return this;
      },
      clear: function() {
        this._data = [];
        return this;
      },
      toString: function() {
        return this._data.join('');
      }
    });
  }

  _stringBuilder_proto = j3.StringBuilder.prototype;

  _stringBuilder_proto.a = _stringBuilder_proto.append;

  _stringBuilder_proto.e = _stringBuilder_proto.encodeAndAppend;

  j3.UrlQuery = j3.cls({
    ctor: function() {
      this._query = {};
      this.parse();
    },
    get: function(name, defaultValue) {
      if (!this._query) {
        return defaultValue;
      }
      if (this._query.hasOwnProperty(name)) {
        return this._query[name];
      }
      return defaultValue;
    },
    set: function(name, value) {
      var _ref;
      if ((_ref = this._query) == null) {
        this._query = {};
      }
      return this._query[name] = value;
    },
    unset: function(name) {
      if (!this._query) {
        return;
      }
      return delete this._query[name];
    },
    toString: function() {
      var first, name, sb, value, _ref;
      sb = new j3.StringBuilder;
      first = true;
      _ref = this._query;
      for (name in _ref) {
        value = _ref[name];
        if (first) {
          first = false;
        } else {
          sb.a('&');
        }
        sb.a(name + '=' + encodeURIComponent(value));
      }
      return sb.toString();
    },
    parse: function() {
      var eachKvStr, hash, idxSharp, key, kv, kvStrings, url, _i, _len, _results;
      url = location.href;
      idxSharp = url.indexOf('#');
      if (idxSharp < 0) {
        return;
      }
      hash = url.substr(idxSharp + 1);
      kvStrings = hash.split('&');
      _results = [];
      for (_i = 0, _len = kvStrings.length; _i < _len; _i++) {
        eachKvStr = kvStrings[_i];
        kv = eachKvStr.split('=');
        key = kv[0];
        if (key) {
          _results.push(this.set(key, kv[1]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  });

  (function(j3) {
    var DateTime, TimeSpan, _DAY, _FORMAT_LOACL, _FORMAT_UTC, _HOUR, _MINUTE, _SECOND, _monthNames, _regParse1, _regParse2, _regParseUTC;
    _SECOND = 1000;
    _MINUTE = 60000;
    _HOUR = 3600000;
    _DAY = 86400000;
    _monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    _regParse1 = /^(\d{4})-(\d{1,2})-(\d{1,2})(?: (\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?$/;
    _regParse2 = /^(\d{1,2})\/(\d{1,2})\/(\d{4})(?: (\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?$/;
    _regParseUTC = /^(\d{4})-(\d{1,2})-(\d{1,2})(?:T(\d{1,2}):(\d{1,2}):(\d{1,2})(?:.(\d{1,3}))?)?Z$/;
    _FORMAT_LOACL = 'yyyy-MM-dd HH:mm:ss';
    _FORMAT_UTC = 'yyyy-MM-ddTHH:mm:ssZ';
    DateTime = j3.cls({
      ctor: function(year, month, date, hours, minutes, seconds, ms) {
        var argLen;
        argLen = arguments.length;
        if (argLen === 0) {
          this._value = new Date;
        } else if (argLen === 1) {
          this._value = new Date(year);
        } else {
          month = month || 0;
          date = date || 0;
          hours = hours || 0;
          minutes = minutes || 0;
          seconds = seconds || 0;
          ms = ms || 0;
          this._value = new Date(year, month - 1, date, hours, minutes, seconds, ms);
        }
      },
      getYear: function() {
        return this._value.getFullYear();
      },
      getMonth: function() {
        return this._value.getMonth() + 1;
      },
      getDay: function() {
        return this._value.getDate();
      },
      getDayOfWeek: function() {
        return this._value.getDay();
      },
      justDate: function() {
        return new DateTime(this.getYear(), this.getMonth(), this.getDay());
      },
      justTime: function() {
        return new DateTime(this._value.getTime() % _DAY);
      },
      addYear: function(years) {
        return new DateTime(this._value.getFullYear + years, this._value.getMonth() + 1, this._value.getDate(), this._value.getHours(), this._value.getMinutes(), this._value.getSeconds(), this._value.getMilliseconds());
      },
      addMonth: function(months) {
        var month, year;
        month = this._value.getFullYear() * 12 + this._value.getMonth() + 1 + months;
        year = parseInt(month / 12);
        month %= 12;
        return new DateTime(year, month, this._value.getDate(), this._value.getHours(), this._value.getMinutes(), this._value.getSeconds(), this._value.getMilliseconds());
      },
      addDay: function(days) {
        return new DateTime(this._value.getTime() + _DAY * days);
      },
      addHour: function(hours) {
        return new DateTime(this._value.getTime() + _HOUR * hours);
      },
      addMinute: function(minutes) {
        return new DateTime(this._value.getTime() + _MINUTE * minutes);
      },
      addSecond: function(seconds) {
        return new DateTime(this._value.getTime() + _SECOND * seconds);
      },
      addMillisecond: function(milliseconds) {
        return new DateTime(this._value.getTime() + milliseconds);
      },
      toString: function(format) {
        if (format == null) {
          format = _FORMAT_LOACL;
        }
        return DateTime.format(this._value, format);
      },
      toUTCString: function() {
        return DateTime.format(this._value, _FORMAT_UTC, true);
      },
      toJson: function(sb) {
        if (j3.isUndefined(sb)) {
          sb = new j3.StringBuilder;
        }
        sb.a('"');
        sb.a(this.toUTCString());
        return sb.a('"');
      },
      getValue: function() {
        return new Date(this._value.getTime());
      },
      getTime: function() {
        return this._value.getTime();
      },
      equals: function(dateTime) {
        if (!dateTime) {
          return false;
        }
        return this._value.getTime() === dateTime._value.getTime();
      },
      lt: function(dateTime) {
        return j3.DateTime.lt(this, dateTime);
      },
      lte: function(dateTime) {
        return j3.DateTime.lte(this, dateTime);
      },
      gt: function(dateTime) {
        return j3.DateTime.gt(this, dateTime);
      },
      gte: function(dateTime) {
        return j3.DateTime.gte(this, dateTime);
      },
      clone: function() {
        return new DateTime(this._value.getTime());
      }
    });
    j3.ext(DateTime, {
      UTC: function(year, month, date, hours, minutes, seconds, ms) {
        var argLen, time;
        argLen = arguments.length;
        if (argLen === 0) {
          time = (new Date).getTime();
        } else if (argLen === 1) {
          time = year;
        } else {
          month = month || 0;
          date = date || 0;
          hours = hours || 0;
          minutes = minutes || 0;
          seconds = seconds || 0;
          ms = ms || 0;
          time = Date.UTC(year, month - 1, date, hours, minutes, seconds, ms);
        }
        return new DateTime(time);
      },
      format: function(value, format, isUTC) {
        var str, strDay, strHour, strMinute, strMonth, strSecond, strYear;
        if (value instanceof DateTime) {
          value = value.getValue();
        }
        if (typeof value === 'number') {
          value = new Date(value);
        } else if (!value instanceof Date) {
          return '';
        }
        if (format == null) {
          format = _FORMAT_LOACL;
        }
        if (isUTC) {
          strYear = value.getUTCFullYear().toString();
          strMonth = (value.getUTCMonth() + 1).toString();
          strDay = value.getUTCDate().toString();
          strHour = value.getUTCHours().toString();
          strMinute = value.getUTCMinutes().toString();
          strSecond = value.getUTCSeconds().toString();
        } else {
          strYear = value.getFullYear().toString();
          strMonth = (value.getMonth() + 1).toString();
          strDay = value.getDate().toString();
          strHour = value.getHours().toString();
          strMinute = value.getMinutes().toString();
          strSecond = value.getSeconds().toString();
        }
        str = format.replace('yyyy', strYear);
        str = str.replace('MMM', _monthNames[value.getMonth()]);
        str = str.replace('MM', strMonth.length === 1 ? '0' + strMonth : strMonth);
        str = str.replace('dd', strDay.length === 1 ? '0' + strDay : strDay);
        str = str.replace('HH', strHour.length === 1 ? '0' + strHour : strHour);
        str = str.replace('mm', strMinute.length === 1 ? '0' + strMinute : strMinute);
        str = str.replace('ss', strSecond.length === 1 ? '0' + strSecond : strSecond);
        str = str.replace('yy', strYear.substr(2));
        str = str.replace('M', strMonth);
        str = str.replace('d', strDay);
        str = str.replace('H', strHour);
        str = str.replace('m', strMinute);
        return str.replace('s', strSecond);
      },
      formatUTC: function(value, format) {
        if (format == null) {
          format = _FORMAT_UTC;
        }
        return this.format(value, format, true);
      },
      parse: function(str) {
        var res;
        if (str instanceof DateTime) {
          return str;
        }
        res = _regParseUTC.exec(str);
        if (res) {
          return DateTime.UTC(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        res = _regParse1.exec(str);
        if (res) {
          return new DateTime(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        res = _regParse2.exec(str);
        if (res) {
          return new DateTime(parseInt(res[3], 10), parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[4], 10), parseInt(res[5], 10), parseInt(res[6], 10), parseInt(res[7], 10));
        }
        return null;
      },
      convertFromJson: function() {
        var attr, attrs, obj, _i, _len;
        obj = arguments[0], attrs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = attrs.length; _i < _len; _i++) {
          attr = attrs[_i];
          obj[attr] = j3.DateTime.parse(obj[attr]);
        }
      },
      now: function() {
        return new DateTime;
      },
      today: function() {
        return (new DateTime).justDate();
      },
      fromMongoObjectId: function(id) {
        return new DateTime(1000 * parseInt(id.slice(0, 8), 16));
      },
      equals: function(dateTime1, dateTime2) {
        if (dateTime1) {
          return dateTime1.equals(dateTime2);
        }
        return !dateTime2;
      },
      lt: function(dateTime1, dateTime2) {
        var t1, t2;
        t1 = dateTime1 ? dateTime1.getTime() : 0;
        t2 = dateTime2 ? dateTime2.getTime() : 0;
        return t1 < t2;
      },
      lte: function(dateTime1, dateTime2) {
        return this.lt(dateTime1, dateTime2) || this.equals(dateTime1, dateTime2);
      },
      gt: function(dateTime1, dateTime2) {
        var t1, t2;
        t1 = dateTime1 ? dateTime1.getTime() : 0;
        t2 = dateTime2 ? dateTime2.getTime() : 0;
        return t1 > t2;
      },
      gte: function(dateTime1, dateTime2) {
        return this.gt(dateTime1, dateTime2) || this.equals(dateTime1, dateTime2);
      }
    });
    j3.DateTime = DateTime;
    TimeSpan = function(dateTime1, dateTime2) {
      var span;
      if (arguments.length === 1) {
        span = dateTime1;
      } else {
        span = dateTime1.getTime() - dateTime2.getTime();
      }
      if (span < 0) {
        span = span * -1;
      }
      this._span = span || 0;
    };
    j3.ext(TimeSpan.prototype, {
      totalSeconds: function() {
        return Math.floor(this._span / _SECOND);
      },
      totalMinutes: function() {
        return Math.floor(this._span / _MINUTE);
      },
      totalHours: function() {
        return Math.floor(this._span / _HOUR);
      },
      totalDays: function() {
        return Math.floor(this._span / _DAY);
      }
    });
    j3.ext(TimeSpan, {
      format: function(span) {
        var days, formatStr, hours, minutes, seconds;
        if (span < _MINUTE) {
          seconds = Math.floor(span / _SECOND);
          return j3.format(j3.Lang.seconds, seconds);
        } else if (span < _HOUR) {
          minutes = Math.floor(span / _MINUTE);
          if (minutes === 1) {
            formatStr = j3.Lang.minute;
          } else {
            formatStr = j3.Lang.minutes;
          }
          return j3.format(formatStr, minutes);
        } else if (span < _DAY) {
          hours = Math.floor(span / _HOUR);
          minutes = Math.floor((span - (hours * _HOUR)) / _MINUTE);
          if (minutes === 0) {
            if (hours === 1) {
              formatStr = j3.Lang.hour;
            } else {
              formatStr = j3.Lang.hours;
            }
          } else {
            formatStr = j3.Lang.hourMinute;
          }
          return j3.format(formatStr, hours, minutes);
        } else {
          days = Math.floor(span / _DAY);
          hours = Math.floor((span - (days * _DAY)) / _HOUR);
          if (hours === 0) {
            if (days === 1) {
              formatStr = j3.Lang.day;
            } else {
              formatStr = j3.Lang.days;
            }
          } else {
            formatStr = j3.Lang.dayHour;
          }
          return j3.format(formatStr, days, hours);
        }
      }
    });
    return j3.TimeSpan = TimeSpan;
  })(j3);

  _regFormat = /{(\d+)?}/g;

  j3.ext(j3, {
    format: function(text) {
      var args;
      args = arguments;
      if (args.length === 0) {
        return '';
      }
      if (args.length === 1) {
        return text;
      }
      return text.replace(_regFormat, function($0, $1) {
        return args[parseInt($1) + 1];
      });
    },
    include: function(s, s1, s2) {
      if (s2 && s2.length) {
        return (s2 + s + s2).indexOf(s2 + s1 + s2) > -1;
      } else {
        return s.indexOf(s1) > -1;
      }
    },
    isNullOrEmpty: function(s) {
      return typeof s === 'undefined' || s === null || s === '';
    },
    isNullOrWhiteSpace: function(s) {
      return j3.isNullOrEmpty(s) || s.trim() === '';
    },
    hyphenlize: function(s) {
      var c, converted, i, len;
      converted = '';
      i = -1;
      len = s.length;
      while (++i < len) {
        c = s.charAt(i);
        if (c === c.toUpperCase()) {
          converted += '-' + c.toLowerCase();
        } else {
          converted += c;
        }
      }
      return converted;
    },
    htmlEncode: function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
    },
    substrEx: function(s, bytes) {
      var c, i, uFF61, uFF9F, uFFE8, uFFEE;
      if (j3.isNullOrEmpty(s)) {
        return '';
      }
      i = 0;
      uFF61 = 65377;
      uFF9F = 65439;
      uFFE8 = 65512;
      uFFEE = 65518;
      while (i < s.length && bytes > 0) {
        c = s.charCodeAt(i);
        if (c < 256 || ((uFF61 <= c) && (c <= uFF9F)) || ((uFFE8 <= c) && (c <= uFFEE))) {
          bytes -= 1;
        } else {
          bytes -= 2;
        }
        i++;
      }
      if (s.length > i) {
        return s.substr(0, i) + "...";
      }
      return s.substr(0, i);
    },
    startsWith: function(s, token) {
      if (!s || !token) {
        return false;
      }
      if (s.indexOf(token) === 0) {
        return true;
      }
      return false;
    },
    endsWith: function(s, token) {
      var pos;
      if (!s || !token) {
        return false;
      }
      pos = s.length - token.length;
      if (pos < 0) {
        return false;
      }
      if (s.substr(pos) === token) {
        return true;
      }
      return false;
    },
    padLeft: function(s, totalWidth, paddingChar) {
      var delta, i, padding, _i;
      if (!s) {
        s = '';
      }
      delta = totalWidth - s.length;
      if (delta < 0) {
        return s;
      }
      if (!paddingChar) {
        paddingChar = '0';
      }
      if (paddingChar.length > 1) {
        paddingChar = paddingChar.substr(0, 1);
      }
      padding = '';
      for (i = _i = 0; 0 <= delta ? _i < delta : _i > delta; i = 0 <= delta ? ++_i : --_i) {
        padding += paddingChar;
      }
      return padding + s;
    },
    padRight: function(s, totalWidth, paddingChar) {
      var delta, i, padding, _i;
      if (!s) {
        s = '';
      }
      delta = totalWidth - s.length;
      if (delta < 0) {
        return s;
      }
      if (!paddingChar) {
        paddingChar = '0';
      }
      if (paddingChar.length > 1) {
        paddingChar = paddingChar.substr(0, 1);
      }
      padding = '';
      for (i = _i = 0; 0 <= delta ? _i < delta : _i > delta; i = 0 <= delta ? ++_i : --_i) {
        padding += paddingChar;
      }
      return s + padding;
    }
  });

  if (String.prototype.trim) {
    j3.trim = function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.trim();
    };
  } else {
    j3.trim = function(s) {
      if (this.isNullOrEmpty(s)) {
        return '';
      }
      return s.replace(_regTime, '');
    };
    String.prototype.trim = function() {
      var i, s, ws;
      s = this;
      s = s.replace(/^\s\s*/, '');
      ws = /\s/;
      i = s.length - 1;
      while (ws.test(s.charAt(i))) {
        i--;
      }
      return s.slice(0, i + 1);
    };
  }

  j3.template = (function(j3) {
    var escaper, escapes, noMatch, p, template, templateSettings, unescape, unescaper;
    templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    noMatch = /.^/;
    escapes = {
      '\\': '\\',
      "'": "'",
      'r': '\r',
      'n': '\n',
      't': '\t',
      'u2028': '\u2028',
      'u2029': '\u2029'
    };
    for (p in escapes) {
      escapes[escapes[p]] = p;
    }
    escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;
    unescape = function(code) {
      return code.replace(unescaper, function(match, escape) {
        return escapes[escape];
      });
    };
    template = function(text, data, settings) {
      var render, sb, source;
      settings = settings || {};
      j3.ext(settings, templateSettings);
      source = text.replace(escaper, function(match) {
        return '\\' + escapes[match];
      }).replace(settings.escape || noMatch, function(match, code) {
        return "',\nj3.htmlEncode(" + (unescape(code)) + "),\n'";
      }).replace(settings.interpolate || noMatch, function(match, code) {
        return "',\n" + (unescape(code)) + ",\n'";
      }).replace(settings.evaluate || noMatch, function(match, code) {
        return "');\n" + (unescape(code)) + "\n;__p.push('";
      });
      sb = new j3.StringBuilder;
      sb.append('var __p=[],print=function(){__p.push.apply(__p,arguments);};\n');
      if (!settings.variable) {
        sb.append('with(obj||{}){\n');
      }
      sb.append("__p.push('");
      sb.append(source);
      sb.append("');\n");
      if (!settings.variable) {
        sb.append('}\n');
      }
      sb.append('return __p.join("");\n');
      render = new Function(settings.variable || 'obj', 'j3', sb.toString());
      if (data) {
        return render(data, j3);
      }
      return function(data) {
        return render.call(this, data, j3);
      };
    };
    return template;
  })(j3);

  j3.List = j3.cls({
    ctor: function() {
      this._count = 0;
    },
    firstNode: function() {
      return this._first;
    },
    first: function() {
      return this._first && this._first.value;
    },
    lastNode: function() {
      return this._last;
    },
    last: function() {
      return this._last && this._last.value;
    },
    count: function() {
      return this._count;
    },
    insertNode: function(node, target) {
      if (node === target) {
        return this;
      }
      if (node.list) {
        if (target) {
          if (node.next) {
            node.next.prev = node.prev;
          } else {
            this._last = node.prev;
          }
          if (node.prev) {
            node.prev.next = node.next;
          } else {
            this._first = node.next;
          }
          node.prev = target.prev;
          node.next = target;
          if (target.prev) {
            target.prev.next = node;
            target.prev = node;
          } else {
            this._first = node;
          }
        } else {
          if (this._last === node) {
            return this;
          }
          node.next.prev = node.prev;
          if (node.prev) {
            node.prev.next = node.next;
          } else {
            this._first = node.next;
          }
          node.prev = this._last;
          node.next = null;
          this._last.next = node;
          this._last = node;
        }
        return this;
      }
      node.list = this;
      if (!this._first) {
        node.prev = node.next = null;
        this._first = this._last = node;
      } else if (!target) {
        node.next = null;
        node.prev = this._last;
        this._last.next = node;
        this._last = node;
      } else {
        node.next = target;
        node.prev = target.prev;
        target.prev = node;
        if (!node.prev) {
          this._first = node;
        } else {
          node.prev.next = node;
        }
      }
      this._count++;
      return this;
    },
    insert: function(value, target) {
      return this.insertNode({
        value: value
      }, target);
    },
    removeNode: function(node) {
      if (node) {
        if (node === this._first) {
          this._first = node.next;
        } else {
          node.prev.next = node.next;
        }
        if (node === this._last) {
          this._last = node.prev;
        } else {
          node.next.prev = node.prev;
        }
        this._count--;
        delete node.value;
        delete node.prev;
        delete node.next;
        delete node.list;
      }
      return this;
    },
    remove: function(value) {
      var node, removedValue;
      node = this.findNode(value);
      if (!node) {
        return null;
      }
      removedValue = node.value;
      this.removeNode(node);
      return removedValue;
    },
    clear: function() {
      var next, node;
      node = this._first;
      while (node) {
        next = node.next;
        delete node.value;
        delete node.prev;
        delete node.next;
        delete node.list;
        node = next;
      }
      this._first = this._last = null;
      return this._count = 0;
    },
    findNode: function(value, equals) {
      var node;
      node = this._first;
      if (equals) {
        while (node) {
          if (equals(value, node.value)) {
            return node;
          }
          node = node.next;
        }
      } else if (j3.isFunction(value)) {
        while (node) {
          if (value(node.value)) {
            return node;
          }
          node = node.next;
        }
      } else if (value && value.equals) {
        while (node) {
          if (value.equals(node.value)) {
            return node;
          }
          node = node.next;
        }
      } else {
        while (node) {
          if (value === node.value) {
            return node;
          }
          node = node.next;
        }
      }
      return null;
    },
    contains: function(value, equals) {
      return null !== this.findNode(value, equals);
    },
    getNodeAt: function(index) {
      var node;
      if (index < 0 || index > this._count) {
        return null;
      }
      node = this._first;
      while (index--) {
        node = node.next;
      }
      return node;
    },
    getAt: function(index) {
      var node;
      node = this.getNodeAt(index);
      if (node) {
        return node.value;
      } else {
        return null;
      }
    },
    toString: function() {
      var sb;
      sb = new j3.StringBuilder;
      this.toJson(sb);
      return sb.toString();
    },
    toJson: function(sb) {
      var node;
      sb.append('[');
      node = this._first;
      if (node) {
        j3.toJson(node.value, sb);
        node = node.next;
        while (node) {
          sb.append(',');
          j3.toJson(node.value, sb);
          node = node.next;
        }
      }
      sb.append(']');
    },
    forEach: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        callback.call(context, node.value, args, i);
        node = node.next;
        i++;
      }
    },
    tryUntil: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        if (callback.call(context, node.value, args, i)) {
          return node.value;
        }
        node = node.next;
        i++;
      }
    },
    doWhile: function(context, args, callback) {
      var i, node;
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      node = this._first;
      i = 0;
      while (node) {
        if (!callback.call(context, node.value, args, i)) {
          return node.value;
        }
        node = node.next;
        i++;
      }
    }
  });

  (function(j3) {
    var Queue, __enlarge;
    j3.Queue = Queue = j3.cls({
      ctor: function() {
        return this.clear();
      },
      clear: function() {
        this._size = 0;
        this._front = this._rear = -1;
        this._data = [];
        return this._data.length = 5;
      },
      enqueue: function(value) {
        if (this._size === this._data.length) {
          __enlarge.call(this);
        }
        this._rear = (this._rear + 1) % this._data.length;
        this._size += 1;
        this._data[this._rear] = value;
      },
      dequeue: function() {
        if (this._size === 0) {
          throw new Error("J3_Err_Queue_Empty");
        }
        this._data[this._front] = null;
        this._front = (this._front + 1) % this._data.length;
        this._size -= 1;
        return this._data[this._front];
      },
      peek: function() {
        if (this._size === 0) {
          throw new Error("J3_Err_Queue_Empty");
        }
        return this._data[(this._front + 1) % this._data.length];
      },
      getSize: function() {
        return this._size;
      }
    });
    __enlarge = function() {
      var data, i, len, max;
      data = this._data;
      max = data.length;
      if (max < 10240) {
        max *= 2;
      } else {
        max += 10240;
      }
      data.length = max;
      if (this._front < this._rear) {
        return;
      }
      if (this._rear + 1 < this._size - this._front - 1) {
        i = 0;
        len = this._rear + 1;
        while (i < len) {
          data[(this._size + i) % max] = data[i];
          data[i] = null;
          i++;
        }
        this._rear = (this._rear + this._size) % max;
      } else {
        i = this._size - 1;
        len = max - this._size;
        while (i > this._front) {
          data[i + len] = data[i];
          i--;
        }
        this._front += len;
      }
    };
    return Queue.fromArray = function(array) {
      var q;
      q = new Queue;
      q._data = array.concat();
      q._size = array.length;
      return q;
    };
  })(j3);

  (function(j3) {
    var _compiledGroupBy;
    j3.compileSelector = function(selector) {
      if (!selector) {
        return function(source) {
          return source;
        };
      }
      if (j3.isFunction(selector)) {
        return selector;
      }
      if (j3.isString(selector)) {
        return function(source) {
          return j3.getVal(source, selector);
        };
      }
      if (j3.isArray(selector)) {
        return function(source) {
          var name, result, val, _i, _len;
          result = {};
          for (_i = 0, _len = selector.length; _i < _len; _i++) {
            name = selector[_i];
            val = j3.getVal(source, name);
            if (!j3.isUndefined(val)) {
              result[name] = val;
            }
          }
          return result;
        };
      }
      if (j3.isObject(selector)) {
        return function(source) {
          var name, result, val, value;
          result = {};
          for (name in selector) {
            value = selector[name];
            if (j3.isString(value)) {
              val = j3.getVal(source, value);
            } else {
              val = value(source);
            }
            if (!j3.isUndefined(val)) {
              result[name] = val;
            }
          }
          return result;
        };
      }
    };
    j3.compileEquals = function(equals) {
      if (j3.isFunction(equals)) {
        return equals;
      }
      if (j3.isString(equals)) {
        return function(obj1, obj2) {
          if (obj1 === null) {
            if (obj2 === null) {
              return true;
            } else {
              return false;
            }
          } else {
            if (obj2 === null) {
              return false;
            } else {
              return j3.equals(j3.getVal(obj1, equals), j3.getVal(obj2, equals));
            }
          }
        };
      }
      if (j3.isArray(equals)) {
        return function(obj1, obj2) {
          var name, _i, _len;
          if (obj1 === null) {
            if (obj2 === null) {
              return true;
            } else {
              return false;
            }
          } else {
            if (obj2 === null) {
              return false;
            } else {
              for (_i = 0, _len = equals.length; _i < _len; _i++) {
                name = equals[_i];
                if (!j3.equals(j3.getVal(obj1, name), j3.getVal(obj2, name))) {
                  return false;
                }
              }
              return true;
            }
          }
        };
      }
    };
    j3.compileSortBy = function(sortBy) {
      var eachSortBy, info, sortInfo, sortRule, sortRules, _i, _j, _len, _len1, _ref;
      if (j3.isFunction(sortBy)) {
        return sortBy;
      }
      if (j3.isString(sortBy)) {
        sortBy = [sortBy];
      }
      sortRules = [];
      for (_i = 0, _len = sortBy.length; _i < _len; _i++) {
        eachSortBy = sortBy[_i];
        sortInfo = eachSortBy.split(' ');
        sortRule = {
          name: sortInfo[0]
        };
        if (sortRule.name.indexOf('?') === 0) {
          sortRule.name = sortRule.name.substr(1);
          sortRule.bool = true;
        }
        if (sortInfo.length > 1) {
          _ref = sortInfo.slice(1);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            info = _ref[_j];
            if (info === 'desc') {
              sortRule.desc = true;
            } else if (info === 'nullGreat') {
              sortRule.nullGreat = true;
            }
          }
        }
        sortRules.push(sortRule);
      }
      return function(obj1, obj2) {
        var eachRule, res, _k, _len2;
        res = 0;
        for (_k = 0, _len2 = sortRules.length; _k < _len2; _k++) {
          eachRule = sortRules[_k];
          if (eachRule.bool) {
            res = j3.compare(!!j3.getVal(obj1, eachRule.name), !!j3.getVal(obj2, eachRule.name));
          } else {
            res = j3.compare(j3.getVal(obj1, eachRule.name), j3.getVal(obj2, eachRule.name), eachRule.nullGreat);
          }
          if (eachRule.desc) {
            res *= -1;
          }
          if (res !== 0) {
            return res;
          }
        }
        return 0;
      };
    };
    _compiledGroupBy = {};
    return j3.compileGroupBy = function(groupBy) {
      var compiledGroupBy;
      if (j3.isFunction(groupBy)) {
        return groupBy;
      }
      if (j3.isString(groupBy)) {
        compiledGroupBy = _compiledGroupBy[groupBy];
        if (compiledGroupBy) {
          return compiledGroupBy;
        }
        _compiledGroupBy[groupBy] = compiledGroupBy = function(obj) {
          return j3.getVal(obj, groupBy);
        };
        return compiledGroupBy;
      }
    };
  })(j3);

  (function(j3) {
    var __forEach, __getChildItems;
    __forEach = function(callback) {
      var eachItem, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        eachItem = this[_i];
        _results.push(callback(eachItem));
      }
      return _results;
    };
    j3.indexOf = function(list, item, equals) {
      var index;
      if (!list) {
        return -1;
      }
      index = -1;
      if (equals == null) {
        equals = j3.equals;
      }
      j3.tryUntil(list, function(eachItem, args, i) {
        if (equals(eachItem, item)) {
          index = i;
          return true;
        }
      });
      return index;
    };
    j3.contains = function(list, item, equals) {
      return -1 !== j3.indexOf(list, item, equals);
    };
    j3["in"] = j3.contains;
    j3.remove = function(list, item, equals) {
      var eachItem, i, _i, _j, _k, _len, _len1, _len2;
      if (list.remove) {
        return list.remove(item, equals);
      }
      if (equals) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (equals(item, eachItem)) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      } else if (item.equals) {
        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
          eachItem = list[i];
          if (item.equals(eachItem)) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      } else {
        for (i = _k = 0, _len2 = list.length; _k < _len2; i = ++_k) {
          eachItem = list[i];
          if (item === eachItem) {
            list.splice(i, 1);
            return eachItem;
          }
        }
      }
    };
    j3.count = function(list) {
      if (j3.isArray(list)) {
        return list.length;
      } else {
        if (!list) {
          return 0;
        }
        return list.count();
      }
    };
    j3.forEach = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          callback.call(context, eachItem, args, i);
        }
      } else if (list.forEach) {
        list.forEach(context, args, callback);
      }
    };
    j3.tryUntil = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (callback.call(context, eachItem, args, i)) {
            return eachItem;
          }
        }
      } else if (list.tryUntil) {
        list.tryUntil(context, args, callback);
      }
    };
    j3.doWhile = function(list, context, args, callback) {
      var eachItem, i, _i, _len;
      if (!list) {
        return;
      }
      if (!args && !callback) {
        callback = context;
        context = null;
        args = null;
      } else if (!callback) {
        callback = args;
        args = null;
      }
      if (j3.isArray(list)) {
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          eachItem = list[i];
          if (!callback.call(context, eachItem, args, i)) {
            return eachItem;
          }
        }
      } else if (list.doWhile) {
        list.doWhile(context, args, callback);
      }
    };
    j3.sortBy = function(list, sortBy) {
      var comparer;
      comparer = j3.compileSortBy(sortBy);
      return list.sort(comparer);
    };
    j3.group = function(list, groupBy, selector) {
      var forEach, grouper, groups;
      groups = {};
      grouper = j3.compileGroupBy(groupBy);
      forEach = list.forEach || __forEach;
      forEach.call(list, function(eachItem) {
        var groupName, subList;
        groupName = grouper(eachItem);
        subList = groups[groupName];
        if (!subList) {
          groups[groupName] = subList = [];
        }
        return subList.push(selector ? selector(eachItem) : eachItem);
      });
      return groups;
    };
    __getChildItems = function(list, parentId, options) {
      var children, childrenName, idName, parentName;
      idName = options.idName;
      parentName = options.parentName;
      childrenName = options.childrenName;
      children = [];
      j3.forEach(list, function(item) {
        if (parentId === j3.getVal(item, parentName)) {
          children.push(item);
          return j3.setVal(item, childrenName, __getChildItems(list, j3.getVal(item, idName), options));
        }
      });
      if (children.length) {
        return children;
      }
      return null;
    };
    j3.tree = function(list, options) {
      var childrenName, idName, itemsDictionary, parentName, rootItems, _ref, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.idName) == null) {
        options.idName = 'id';
      }
      if ((_ref1 = options.parentName) == null) {
        options.parentName = 'parentId';
      }
      if ((_ref2 = options.childrenName) == null) {
        options.childrenName = 'children';
      }
      idName = options.idName;
      parentName = options.parentName;
      childrenName = options.childrenName;
      itemsDictionary = {};
      j3.forEach(list, function(item) {
        return itemsDictionary[j3.getVal(item, idName)] = item;
      });
      rootItems = [];
      j3.forEach(list, function(item) {
        if (!j3.getVal(item, parentName)) {
          rootItems.push(item);
          return j3.setVal(item, childrenName, __getChildItems(list, j3.getVal(item, idName), options));
        }
      });
      return rootItems;
    };
    j3.pickFieldVal = function(list, options) {
      var map, res;
      if (j3.isString(options)) {
        options = {
          ensureUnique: false,
          ignoreEmpty: false,
          fieldName: options
        };
      }
      res = [];
      if (!options.ensureUnique) {
        j3.forEach(list, function(item) {
          if (options.ignoreEmpty && j3.isNullOrUndefined(item)) {
            return;
          }
          return res.push(j3.getVal(item, options.fieldName));
        });
        return res;
      }
      map = {};
      j3.forEach(list, function(item) {
        var eachVal, value, _i, _len;
        value = j3.getVal(item, options.fieldName);
        if (j3.isArray(value)) {
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            eachVal = value[_i];
            if (options.ignoreEmpty && j3.isNullOrUndefined(eachVal)) {
              return;
            }
            if (!map[eachVal]) {
              map[eachVal] = true;
              res.push(eachVal);
            }
          }
        } else {
          if (options.ignoreEmpty && j3.isNullOrUndefined(value)) {
            return;
          }
          if (!map[value]) {
            map[value] = true;
            return res.push(value);
          }
        }
      });
      return res;
    };
    j3.toMap = function(list, keyName) {
      var map;
      map = {};
      if (j3.isFunction(keyName)) {
        j3.forEach(list, function(item) {
          var key;
          key = keyName(item);
          return map[key] = item;
        });
      } else {
        j3.forEach(list, function(item) {
          var key;
          key = j3.getVal(item, keyName);
          return map[key] = item;
        });
      }
      return map;
    };
    return j3.without = function(list, values) {
      var result;
      result = [];
      j3.forEach(list, function(item) {
        if (j3.isFunction(values)) {
          if (!values(item)) {
            return result.push(item);
          }
        } else {
          if (!j3.tryUntil(values, (function(value) {
            return j3.equals(item, value);
          }))) {
            return result.push(item);
          }
        }
      });
      return result;
    };
  })(j3);

  j3.Pool = function(options) {
    this._maxSize = options.maxSize || -1;
    this._data = [];
    this._usedSize = 0;
    this._poolSize = 0;
    this.__onCreate = options.onCreate;
    this.__onInit = options.onInit;
    this.__onRelease = options.onRelease;
    return this.__onDestroy = options.onDestroy;
  };

  j3.ext(j3.Pool.prototype, {
    getMaxSize: function() {
      return this._maxSize;
    },
    setMaxSize: function(value) {
      if (value === -1 || value > this._maxSize) {
        return this._maxSize = value;
      }
    },
    getUsedSize: function() {
      return this._usedSize;
    },
    canGain: function() {
      return this._usedSize !== this._maxSize;
    },
    gain: function(options) {
      var entry;
      if (!this.canGain()) {
        return null;
      }
      if (this._usedSize < this._poolSize) {
        entry = this._data[this._usedSize];
      }
      if (!entry) {
        entry = this.__onCreate(options);
        if (!entry) {
          return null;
        }
        this._data[this._poolSize++] = entry;
      }
      this.__onInit(entry, options);
      this._usedSize++;
      return entry;
    },
    release: function(entry) {
      var i, lastEntry;
      if (!entry) {
        return;
      }
      lastEntry = this._data[this._usedSize - 1];
      if (entry !== lastEntry) {
        i = 0;
        while (i < this._usedSize) {
          if (entry === this._data[i]) {
            this._data[i] = lastEntry;
            break;
          }
          i++;
        }
        this._data[this._usedSize - 1] = entry;
      }
      if (typeof this.__onRelease === "function") {
        this.__onRelease(entry);
      }
      this._usedSize--;
    }
  });

  (function(j3) {
    var Unique, __addToArray;
    j3.Unique = Unique = function(options) {
      if (options == null) {
        options = {};
      }
      this._array = [];
      this._ignoreEmpty = options.ignoreEmpty;
    };
    Unique.prototype.getArray = function() {
      return this._array;
    };
    Unique.prototype.add = function(items) {
      var eachItem, _i, _len, _results;
      if (arguments.length === 0) {
        return;
      }
      if (this._ignoreEmpty) {
        if (j3.isUndefined(items)) {
          return;
        }
        if (j3.isNull(items)) {
          return;
        }
      }
      if (j3.isArray(items)) {
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          eachItem = items[_i];
          _results.push(__addToArray.call(this, eachItem));
        }
        return _results;
      } else {
        return __addToArray.call(this, items);
      }
    };
    return __addToArray = function(item) {
      var eachItem, _i, _len, _ref;
      _ref = this._array;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eachItem = _ref[_i];
        if (j3.equals(eachItem, item)) {
          return;
        }
      }
      return this._array.push(item);
    };
  })(j3);

  j3.EventManager = {
    on: function(name, context, handler) {
      var handlerList, handlerName, handlers;
      if (!this._eventHandlers) {
        this._eventHandlers = {};
      }
      if (arguments.length === 1) {
        handlers = name;
        for (handlerName in handlers) {
          handler = handlers[handlerName];
          handlerList = this._eventHandlers[handlerName];
          if (j3.isArray(handler)) {
            context = handler[0];
            handler = handler[1];
          } else if (j3.isObject(handler)) {
            context = handler.c || handler.ctx || handler.context;
            handler = handler.h || handler.hdl || handler.handler;
          } else {
            context = null;
          }
          if (!handlerList) {
            this._eventHandlers[handlerName] = handlerList = new j3.List;
          }
          handlerList.insert({
            handler: handler,
            context: context
          });
        }
      } else {
        if (arguments.length === 2) {
          handler = context;
          context = null;
        }
        handlerList = this._eventHandlers[name];
        if (!handlerList) {
          this._eventHandlers[name] = handlerList = new j3.List;
        }
        handlerList.insert({
          handler: handler,
          context: context
        });
      }
      return this;
    },
    un: function(name, context, handler) {
      var handlerList;
      if (!this._eventHandlers) {
        return this;
      }
      handlerList = this._eventHandlers[name];
      if (!handlerList) {
        return this;
      }
      if (arguments.length === 2) {
        handler = context;
        context = null;
      }
      handlerList.removeNode(handlerList.findNode({
        handler: handler,
        context: context,
        equals: function(obj) {
          return this.handler === obj.handler && this.context === obj.context;
        }
      }));
      return this;
    },
    fire: function(name, sender, args) {
      var handlerList;
      if (!this._eventHandlers) {
        return this;
      }
      handlerList = this._eventHandlers[name];
      if (!handlerList) {
        return this;
      }
      handlerList.forEach(function(obj) {
        return obj.handler.call(obj.context, sender, args);
      });
      return this;
    }
  };

  EventManagerCls = function() {};

  j3.ext(EventManagerCls.prototype, j3.EventManager);

  j3.createEventManager = function() {
    return new EventManagerCls;
  };

  (function(j3) {
    var ViewInfo;
    ViewInfo = function(view, handler) {
      this.view = view;
      this.handler = handler;
    };
    ViewInfo.prototype.equals = function(obj) {
      return this.view === obj.view && this.handler === obj.handler;
    };
    return j3.Datasource = {
      bind: function(view, handler) {
        var viewInfo;
        if (!view) {
          return;
        }
        if (!this._views) {
          this._views = new j3.List;
        }
        viewInfo = new ViewInfo(view, handler);
        if (this._views.contains(viewInfo)) {
          return;
        }
        this._views.insert(viewInfo);
        if (handler == null) {
          handler = view.updateView;
        }
        return handler.call(view, this, 'refresh');
      },
      unbind: function(view, handler) {
        var viewInfo;
        if (!view) {
          return;
        }
        if (!this._views) {
          return;
        }
        viewInfo = new ViewInfo(view, handler);
        if (!this._views.contains(viewInfo)) {
          return;
        }
        return this._views.remove(viewInfo);
      },
      updateViews: function(eventName, args) {
        var handler, node, view, viewInfo;
        if (!this._views) {
          return;
        }
        node = this._views.firstNode();
        while (node) {
          viewInfo = node.value;
          view = viewInfo.view;
          handler = viewInfo.handler || view.updateView;
          handler.call(view, this, eventName, args);
          node = node.next;
        }
      },
      refreshViews: function() {
        return this.updateViews('refresh');
      }
    };
  })(j3);

  j3.DataView = {
    getDatasource: function() {
      return this._datasource;
    },
    setDatasource: function(datasource) {
      if (this._datasource === datasource) {
        return;
      }
      if (this._datasource) {
        this._datasource.unbind(this);
      }
      this._datasource = datasource;
      if (datasource) {
        return datasource.bind(this);
      }
    },
    updateData: function() {
      if (!this._datasource) {
        return;
      }
      if (this._updatingData) {
        return;
      }
      this._updatingData = true;
      this.onUpdateData(this._datasource);
      return this._updatingData = false;
    },
    isUpdatingData: function() {
      return this._updatingData;
    },
    updateView: function(datasource, eventName, args) {
      if (this._updatingData || this._updatingView) {
        return;
      }
      this._updatingView = true;
      this.onUpdateView(datasource, eventName, args);
      return this._updatingView = false;
    },
    isUpdatingView: function() {
      return this._updatingView;
    }
  };

  (function(j3) {
    var Model;
    j3.Model = Model = function(data, options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      if (data && !options.noParse && this.parse) {
        data = this.parse(data);
      }
      if (defaults = this.get('defaults')) {
        data = j3.ext(defaults, data);
      }
      this._data = data || {};
    };
    j3.ext(Model.prototype, j3.EventManager, j3.Datasource, {
      notifyChangeName: 'modelDataChange',
      has: function(name) {
        return this._data.hasOwnProperty(name);
      },
      getData: function(fields) {
        if (this._data) {
          return j3.clone(this._data, fields);
        } else {
          return {};
        }
      },
      get: function(name, defaultVal) {
        if (j3.isFunction(this[name])) {
          return this[name].call(this);
        }
        if (!this._data) {
          return defaultVal;
        }
        if (this._data.hasOwnProperty(name)) {
          return this._data[name];
        } else {
          return defaultVal;
        }
      },
      set: function(name, value, options) {
        var changedData, data, eventName, _ref;
        if ((_ref = this._data) == null) {
          this._data = {};
        }
        if (j3.isObject(name)) {
          data = name;
          options = value;
        }
        if (options == null) {
          options = {};
        }
        if (!this._originalData) {
          this._originalData = j3.clone(this._data);
        }
        eventName = 'change';
        if (!data) {
          if (j3.equals(this._data[name], value)) {
            return;
          }
          changedData = {};
          changedData[name] = value;
          this._data[name] = value;
        } else {
          if (options.append) {
            changedData = {};
            for (name in data) {
              value = data[name];
              if (j3.equals(this._data[name], value)) {
                continue;
              }
              changedData[name] = value;
              this._data[name] = value;
            }
          } else {
            eventName = 'refresh';
            if (this.parse) {
              data = this.parse(data);
            }
            this._data = j3.clone(data);
          }
        }
        return this.notifyChange({
          eventName: eventName,
          changedData: changedData,
          source: options.source
        });
      },
      notifyChange: function(options) {
        var args, collection, eventName;
        if (options == null) {
          options = {};
        }
        eventName = options.eventName;
        args = {
          changedData: options.changedData,
          source: options.source,
          model: this
        };
        this.fire(eventName, this, args);
        this.updateViews(eventName, args);
        collection = this.collection;
        return collection && collection.notifyModelChange(this.notifyChangeName, args);
      },
      toJson: function(buffer) {
        return j3.toJson(this._data, buffer);
      }
    });
    j3.getVal = function(model, name, defaultVal) {
      if (j3.isFunction(model.get)) {
        return model.get(name, defaultVal);
      }
      if (j3.isUndefined(model[name])) {
        return defaultVal;
      }
      return model[name];
    };
    return j3.setVal = function(model, name, value, options) {
      if (j3.isFunction(model.set)) {
        return model.set(name, value, options);
      }
      return model[name] = value;
    };
  })(j3);

  (function(j3) {
    var _collections;
    _collections = {};
    j3.getCollection = function(id) {
      return _collections[id];
    };
    j3.Collection = j3.cls({
      ctor: function(options) {
        if (options == null) {
          options = {};
        }
        if (options.id) {
          this.id = options.id;
          _collections[this.id] = this;
        }
        this._idName = options.idName || 'id';
        this._idxId = {};
        this._model = options.model || j3.Model;
        this._models = new j3.List;
        this._notFoundModels = {};
        this._lazyLoad = options.lazyLoad;
        this._url = options.url;
        this._contextData = options.contextData;
        options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model;
      },
      getContextData: function() {
        return this._contextData;
      },
      setContextData: function(value) {
        if (this._contextData === value) {
          return;
        }
        return this._contextData = value;
      },
      insert: function(data, options) {
        var args, id, model, target;
        if (options == null) {
          options = {};
        }
        if (data instanceof this._model) {
          model = data;
        } else {
          model = new this._model(data);
        }
        id = model.get(this._idName);
        if (id) {
          this._idxId[id] = model;
        }
        model.collection = this;
        target = null;
        if (!j3.isUndefined(options.targetIndex)) {
          target = this._models.getNodeAt(options.targetIndex);
        }
        this._models.insert(model, target);
        if (!options.silent) {
          args = {
            model: model
          };
          this.updateViews('add', args);
          this.fire('addModel', this, args);
        }
        return model;
      },
      remove: function(model, options) {
        var args, newActiveModel, node;
        if (!model) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._models.findNode(model);
        if (this._activeModel === model) {
          newActiveModel = node.next && node.next.value;
          if (!newActiveModel) {
            newActiveModel = node.prev && node.prev.value;
          }
        }
        delete this._idxId[model.get(this._idName)];
        this._models.removeNode(node);
        if (!options.silent) {
          args = {
            model: model
          };
          this.updateViews('remove', args);
          this.fire('removeModel', this, args);
        }
        if (newActiveModel) {
          this.setActive(newActiveModel, options);
        }
        return model;
      },
      removeById: function(id, options) {
        var model;
        model = this.getById(id);
        if (model) {
          return this.remove(model, options);
        }
      },
      removeActive: function(options) {
        if (this._activeModel) {
          return this.remove(this._activeModel, options);
        }
      },
      clear: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this._notFoundModels = {};
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadData: function(dataList, options) {
        var data, silent, _i, _len;
        dataList = dataList || [];
        options = options || {};
        silent = options.silent;
        options.silent = true;
        this.clear(options);
        for (_i = 0, _len = dataList.length; _i < _len; _i++) {
          data = dataList[_i];
          this.insert(data, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActive(this._models.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      setActiveByIndex: function(index, options) {
        if (index >= this.count() || index < 0) {
          index = -1;
        }
        return this.setActive(this.getAt(index), options);
      },
      setActiveById: function(id, options) {
        var _this = this;
        return this.getById(id, function(model) {
          return _this.setActive(model, options);
        });
      },
      notifyModelChange: function(changeName, args) {
        this.updateViews(changeName, args);
        return this.fire(changeName, this, args);
      },
      getById: function(id, callback) {
        var model;
        if (!id) {
          callback && callback(null);
          return null;
        }
        model = this._idxId[id];
        if (model) {
          callback && callback(model);
          return model;
        }
        if (!this._lazyLoad || this._notFoundModels[id]) {
          callback && callback(null);
          return null;
        }
        return j3.get(this._url + id, null, this, function(xhr, result) {
          if (xhr.status >= 500) {
            return callback(null);
          } else if (xhr.status >= 400) {
            this._notFoundModels[id] = true;
            return callback(null);
          }
          this.insert(result);
          callback(this._idxId[id]);
        });
      },
      getAt: function(index) {
        return this._models.getAt(index);
      },
      count: function() {
        return this._models.count();
      },
      forEach: function(context, args, callback) {
        return this._models.forEach(context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return this._models.tryUntil(context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return this._models.doWhile(context, args, callback);
      },
      find: function(model, equals) {
        var node;
        node = this._models.findNode(model, equals);
        return node && node.value;
      },
      contains: function(model, equals) {
        return this._models.contains(model, equals);
      },
      map: function(callback, context) {
        var result;
        result = [];
        this.forEach(context, null, function(model) {
          return result.push(callback.call(this, model));
        });
        return result;
      }
    });
    j3.ext(j3.Collection.prototype, j3.Datasource);
    return j3.ext(j3.Collection.prototype, j3.EventManager);
  })(j3);

  (function(j3) {
    var __filter, __group, __grouper, __select;
    __filter = function(model, filterBy) {
      var filter, name;
      if (j3.isFunction(filterBy)) {
        return filterBy(model);
      }
      for (name in filterBy) {
        filter = filterBy[name];
        if (j3.isFunction(filter)) {
          if (!filter(model[name], model)) {
            return false;
          }
        } else if (model[name] !== filter) {
          return false;
        }
      }
      return true;
    };
    __select = function(model, selector) {
      if (j3.isFunction(selector)) {
        return selector(model);
      }
    };
    __grouper = function(groupBy) {
      var groupId, groupText, groupValue, idName, textName, valueName;
      if (j3.isFunction(groupBy)) {
        return groupBy;
      }
      if (j3.isString(groupBy)) {
        return function(obj) {
          return obj[groupBy];
        };
      }
      if (j3.isObject(groupBy)) {
        if (!groupBy.text) {
          groupText = null;
        } else if (j3.isFunction(groupBy.text)) {
          groupText = groupBy.text;
        } else {
          textName = groupBy.text;
          groupText = function(obj) {
            return obj[textName];
          };
        }
        if (!groupBy.value) {
          groupValue = null;
        } else if (j3.isFunction(groupBy.value)) {
          groupValue = groupBy.value;
        } else {
          valueName = groupBy.value;
          groupValue = function(obj) {
            return obj[valueName];
          };
        }
        if (!groupBy.id) {
          groupId = null;
        } else if (j3.isFunction(groupBy.id)) {
          groupId = groupBy.id;
        } else {
          idName = groupBy.id;
          groupId = function(obj) {
            return obj[idName];
          };
        }
        return function(obj) {
          var groupInfo;
          groupInfo = {};
          if (groupText) {
            groupInfo.text = groupText(obj);
          }
          if (groupValue) {
            groupInfo.value = groupValue(obj);
          }
          if (groupId) {
            groupInfo.id = groupId(obj);
          }
          return groupInfo;
        };
      }
    };
    __group = function() {
      var eachModel, groupBy, groupData, groupIdName, groupList, groupMap, groupSortBy, grouper, modelGroup, models, _i, _len;
      models = this._models;
      groupIdName = this._groupIdName;
      groupBy = this._groupBy;
      groupSortBy = this._groupSortBy;
      if (!groupBy) {
        return;
      }
      grouper = __grouper(groupBy);
      groupMap = {};
      groupList = [];
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        eachModel = models[_i];
        groupData = grouper(eachModel.getData());
        if (!groupData) {
          groupData = this._defaultGroupData;
        }
        if (!groupData) {
          continue;
        }
        modelGroup = groupMap[groupData[groupIdName]];
        if (!modelGroup) {
          groupData.items = [];
          groupMap[groupData[groupIdName]] = modelGroup = groupData;
          groupList.push(modelGroup);
        }
        modelGroup.items.push(eachModel);
      }
      if (!groupSortBy) {
        groupSortBy = 'id';
      }
      groupList.sort(j3.compileSortBy(groupSortBy));
      this._groupList = groupList;
      this._groupMap = groupMap;
    };
    j3.CollectionView = j3.cls({
      ctor: function(options) {
        this._idName = options.idName || 'id';
        this._selector = options.selector;
        this._filterBy = options.filterBy;
        this._sortBy = options.sortBy;
        this._groupIdName = options.groupIdName || 'id';
        this._groupBy = options.groupBy;
        this._groupSortBy = options.groupSortBy;
        this._defaultGroupData = options.defaultGroupData;
        this._model = options.model;
        this.setDatasource(options.datasource);
        return options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model || this.getDatasource().getModel() || j3.Model;
      },
      getSelector: function() {
        return this._selector;
      },
      setSelector: function(selector, options) {
        options = options || {};
        this._selector = selector;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getFilterBy: function() {
        return this._filterBy;
      },
      setFilterBy: function(filterBy, options) {
        options = options || {};
        this._filterBy = filterBy;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getSortBy: function() {
        return this._sortBy;
      },
      setSortBy: function(sortBy, options) {
        options = options || {};
        this._sortBy = sortBy;
        if (!options.silent) {
          return this.refresh();
        }
      },
      getGroupBy: function() {
        return this._groupBy;
      },
      setGroupBy: function(groupBy, options) {
        options = options || {};
        this._groupBy = groupBy;
        if (!options.silent) {
          __group.call(this);
          return this.updateViews('group');
        }
      },
      getGroupSortBy: function() {
        return this._groupSortBy;
      },
      setGroupSortBy: function(groupBy, options) {
        options = options || {};
        this._groupSortBy = groupBy;
        if (!options.silent) {
          return this.updateViews('groupSort');
        }
      },
      getById: function(id) {
        return this._idxId[id];
      },
      getAt: function(index) {
        if (index < 0 || index >= this._models.length) {
          return null;
        }
        return this._models[index];
      },
      removeById: function(id, options) {
        return this.getDatasource().removeById(id, options);
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      count: function() {
        return this._models.length;
      },
      onUpdateView: function(datasource, eventName, args) {
        return this.refresh();
      },
      forEach: function(context, args, callback) {
        return j3.forEach(this._models, context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return j3.tryUntil(this._models, context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return j3.doWhile(this._models, context, args, callback);
      },
      forEachGroup: function(context, args, callback) {
        var group, i, _i, _len, _ref, _results;
        if (!this._groupList) {
          return;
        }
        if (!args && !callback) {
          callback = context;
          context = null;
          args = null;
        } else if (!callback) {
          callback = args;
          args = null;
        }
        _ref = this._groupList;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          group = _ref[i];
          _results.push(callback.call(context, group, args, i));
        }
        return _results;
      },
      getGroupById: function(id) {
        if (!this._groupMap) {
          return;
        }
        return this._groupMap[id];
      },
      refresh: function() {
        var Model, distinctor, filtedModels, id, model, models, newModel, _i, _j, _len, _len1;
        models = [];
        distinctor = {};
        if (this._selector) {
          this._datasource.forEach(this, function(model) {
            var id, newModel;
            newModel = __select(model, this._selector);
            if (newModel) {
              if (this._idName) {
                id = newModel[this._idName];
                if (!distinctor[id]) {
                  distinctor[id] = newModel;
                  return models.push(newModel);
                }
              } else {
                return models.push(newModel);
              }
            }
          });
          if (this._filterBy) {
            filtedModels = [];
            for (_i = 0, _len = models.length; _i < _len; _i++) {
              model = models[_i];
              if (__filter(model, this._filterBy)) {
                filtedModels.push(model);
              }
            }
            models = filtedModels;
          }
        } else {
          if (this._filterBy) {
            this._datasource.forEach(this, function(model) {
              var newModel;
              newModel = model.getData();
              if (__filter(newModel, this._filterBy)) {
                return models.push(newModel);
              }
            });
          } else {
            this._datasource.forEach(this, function(model) {
              return models.push(model.getData());
            });
          }
        }
        this._models = [];
        this._idxId = {};
        Model = this.getModel();
        for (_j = 0, _len1 = models.length; _j < _len1; _j++) {
          model = models[_j];
          newModel = new Model(model);
          newModel.collection = this;
          this._models.push(newModel);
          if (this._idName) {
            id = model[this._idName];
            this._idxId[id] = newModel;
          }
        }
        if (this._sortBy) {
          this._models.sort(j3.compileSortBy(this._sortBy));
        }
        __group.call(this);
        this.updateViews('refresh');
        return this.fire('refresh', this);
      }
    });
    return j3.ext(j3.CollectionView.prototype, j3.DataView, j3.Datasource, j3.EventManager);
  })(j3);

  (function(j3) {
    var GroupedCollection, __getFirstNodeGreatThan, __insertModelToGroup, __removeModelFromGroup;
    __insertModelToGroup = function(model, group) {
      var items;
      if (model.group === group) {
        return;
      }
      if (model.group) {
        model.group.items.remove(model);
      }
      model.group = group;
      items = group.items;
      if (!items) {
        group.items = items = new j3.List;
      }
      return items.insert(model);
    };
    __removeModelFromGroup = function(model) {
      var group, items;
      group = model.group;
      if (!group) {
        return;
      }
      model.group = null;
      items = group.items;
      if (items) {
        return items.remove(model);
      }
    };
    __getFirstNodeGreatThan = function(list, value, comparer) {
      var node;
      node = list.firstNode();
      while (node) {
        if (node.value !== value && 0 < comparer(node.value._data, value._data)) {
          return node;
        }
        node = node.next;
      }
      return null;
    };
    j3.GroupedCollection = GroupedCollection = j3.cls({
      ctor: function(options) {
        if (options == null) {
          options = {};
        }
        if (options.id) {
          this.id = options.id;
          _collections[this.id] = this;
        }
        this._idName = options.idName || 'id';
        this._idxId = {};
        this._model = options.model || j3.Model;
        this._models = new j3.List;
        this._groupIdName = options.groupIdName || 'id';
        this._groupMap = {};
        this._groupModel = options.groupModel || j3.Model;
        this._groupList = new j3.List;
        if (options.groupBy) {
          this._groupBy = j3.compileGroupBy(options.groupBy);
        }
        if (options.groupSortBy) {
          this._groupSortBy = j3.compileSortBy(options.groupSortBy);
        }
        options.on && this.on(options.on);
      },
      getModel: function() {
        return this._model;
      },
      getData: function(name) {
        if (!this._data) {
          return null;
        }
        return this._data[name];
      },
      setData: function(name, value) {
        if (!this._data) {
          this._data = {};
        }
        return this._data[name] = value;
      },
      insertGroup: function(data, options) {
        var group, groupNodeToInsert, id;
        if (options == null) {
          options = {};
        }
        group = new this._groupModel(data);
        group.notifyChangeName = 'groupDataChange';
        group.collection = this;
        id = group.get(this._groupIdName);
        if (id) {
          this._groupMap[id] = group;
        }
        if (this._groupSortBy) {
          groupNodeToInsert = __getFirstNodeGreatThan(this._groupList, group, this._groupSortBy);
        }
        this._groupList.insert(group, groupNodeToInsert);
        if (!options.silent) {
          this.updateViews('groupAdd', {
            group: group
          });
        }
        return group;
      },
      removeGroup: function(group, options) {
        var newActiveGroup, node;
        if (!group) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._groupList.findNode(group);
        if (this._activeGroup === group) {
          newActiveGroup = node.next && node.next.value;
          if (!newActiveGroup) {
            newActiveGroup = node.prev && node.prev.value;
          }
        }
        this._groupList.removeNode(node);
        delete this._groupMap[group.get(this._groupIdName)];
        if (!options.silent) {
          this.updateViews('groupRemove', {
            group: group
          });
        }
        if (newActiveGroup) {
          this.setActiveGroup(newActiveGroup, options);
        }
        return group;
      },
      removeGroupById: function(id, options) {
        var group;
        group = this.getGroupById(id);
        if (group) {
          return this.removeGroup(group, options);
        }
      },
      removeActiveGroup: function(options) {
        if (this._activeGroup) {
          return this.removeGroup(this._activeGroup, options);
        }
      },
      insert: function(data, options) {
        var group, groupId, id, model;
        if (options == null) {
          options = {};
        }
        if (data instanceof this._model) {
          model = data;
        } else {
          model = new this._model(data);
        }
        id = model.get(this._idName);
        if (id) {
          this._idxId[id] = model;
        }
        if (options.group) {
          __insertModelToGroup(model, options.group);
        } else {
          groupId = this._groupBy(model);
          group = this.getGroupById(groupId);
          if (!group) {
            return;
          }
          __insertModelToGroup(model, group);
        }
        model.collection = this;
        this._models.insert(model);
        if (!options.silent) {
          this.updateViews('add', {
            model: model
          });
        }
        return model;
      },
      remove: function(model, options) {
        var newActiveModel, node;
        if (!model) {
          return;
        }
        if (options == null) {
          options = {};
        }
        node = this._models.findNode(model);
        if (this._activeModel === model) {
          newActiveModel = node.next && node.next.value;
          if (!newActiveModel) {
            newActiveModel = node.prev && node.prev.value;
          }
        }
        __removeModelFromGroup(model);
        delete this._idxId[model.get(this._idName)];
        this._models.removeNode(node);
        if (!options.silent) {
          this.updateViews('remove', {
            model: model
          });
        }
        if (newActiveModel) {
          this.setActive(newActiveModel, options);
        }
        return model;
      },
      removeById: function(id, options) {
        var model;
        model = this.getById(id);
        if (model) {
          return this.remove(model, options);
        }
      },
      removeActive: function(options) {
        if (this._activeModel) {
          return this.remove(this._activeModel, options);
        }
      },
      clear: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this.forEachGroup(function(group) {
          return group.items && group.items.clear();
        });
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      clearGroup: function(options) {
        if (options == null) {
          options = {};
        }
        this._idxId = {};
        this._models.clear();
        this._groupMap = {};
        this._groupList.clear();
        if (!options.silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadGroupData: function(groupDataList, options) {
        var groupData, silent, _i, _len;
        if (options == null) {
          options = {};
        }
        silent = options.silent;
        options.silent = true;
        this.clearGroup(options);
        for (_i = 0, _len = groupDataList.length; _i < _len; _i++) {
          groupData = groupDataList[_i];
          this.insertGroup(groupData, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActiveGroup(this._groupList.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      loadData: function(dataList, options) {
        var data, silent, _i, _len;
        options = options || {};
        silent = options.silent;
        options.silent = true;
        this.clear(options);
        for (_i = 0, _len = dataList.length; _i < _len; _i++) {
          data = dataList[_i];
          this.insert(data, options);
        }
        if (!j3.isUndefined(options.activeIndex)) {
          this.setActive(this._models.getAt(options.activeIndex));
        }
        if (!silent) {
          this.updateViews('refresh');
          return this.fire('refresh', this);
        }
      },
      getActiveGroup: function() {
        return this._activeGroup;
      },
      setActiveGroup: function(group, options) {
        var args, old;
        if (this._activeGroup === group) {
          return;
        }
        options = options || {};
        old = this._activeGroup;
        this._activeGroup = group;
        if (!options.silent) {
          args = {
            old: old,
            group: group
          };
          this.updateViews('activeGroup', args);
          return this.fire('activeGroupChange', this, args);
        }
      },
      setActiveGroupByIndex: function(index, options) {
        if (index >= this._groupList.count() || index < 0) {
          index = -1;
        }
        return this.setActiveGroup(this.getGroupAt(index), options);
      },
      getGroupById: function(id) {
        if (!id) {
          return null;
        }
        return this._groupMap[id];
      },
      getGroupAt: function(index) {
        return this._groupList.getAt(index);
      },
      groupCount: function() {
        return this._groupList.count();
      },
      getActive: function() {
        return this._activeModel;
      },
      setActive: function(model, options) {
        var args, old;
        if (this._activeModel === model) {
          return;
        }
        options = options || {};
        old = this._activeModel;
        this._activeModel = model;
        if (!options.silent) {
          args = {
            old: old,
            model: model
          };
          this.updateViews('active', args);
          return this.fire('activeModelChange', this, args);
        }
      },
      setActiveByIndex: function(index, options) {
        if (index >= this.count() || index < 0) {
          index = -1;
        }
        return this.setActive(this.getAt(index), options);
      },
      notifyModelChange: function(changeName, args) {
        var group, groupId, groupNode, model, targetNode;
        if (changeName === 'groupDataChange') {
          if (this._groupSortBy) {
            group = args.model;
            if (group) {
              targetNode = __getFirstNodeGreatThan(this._groupList, group, this._groupSortBy);
              groupNode = this._groupList.findNode(group);
              this._groupList.insertNode(groupNode, targetNode);
            }
          }
        } else {
          model = args.model;
          groupId = this._groupBy(model);
          group = this.getGroupById(groupId);
          if (group) {
            __insertModelToGroup(model, group);
          }
        }
        this.updateViews(changeName, args);
        return this.fire(changeName, this, args);
      },
      getById: function(id, callback) {
        if (!id) {
          return null;
        }
        return this._idxId[id];
      },
      getAt: function(index) {
        return this._models.getAt(index);
      },
      count: function() {
        return this._models.count();
      },
      forEach: function(context, args, callback) {
        return this._models.forEach(context, args, callback);
      },
      tryUntil: function(context, args, callback) {
        return this._models.tryUntil(context, args, callback);
      },
      doWhile: function(context, args, callback) {
        return this._models.doWhile(context, args, callback);
      },
      forEachGroup: function(context, args, callback) {
        return this._groupList.forEach(context, args, callback);
      },
      tryUntilGroup: function(context, args, callback) {
        return this._groupList.tryUntil(context, args, callback);
      },
      doWhileGroup: function(context, args, callback) {
        return this._groupList.doWhile(context, args, callback);
      }
    });
    return j3.ext(GroupedCollection.prototype, j3.Datasource, j3.EventManager);
  })(j3);

}).call(this);
